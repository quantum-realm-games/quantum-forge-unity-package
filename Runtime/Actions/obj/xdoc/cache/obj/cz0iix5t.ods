id: cs.temp.dll
language: CSharp
name:
  Default: cs.temp.dll
qualifiedName:
  Default: cs.temp.dll
type: Assembly
modifiers: {}
items:
- id: QRG.QuantumForge.Runtime
  commentId: N:QRG.QuantumForge.Runtime
  language: CSharp
  name:
    CSharp: QRG.QuantumForge.Runtime
    VB: QRG.QuantumForge.Runtime
  nameWithType:
    CSharp: QRG.QuantumForge.Runtime
    VB: QRG.QuantumForge.Runtime
  qualifiedName:
    CSharp: QRG.QuantumForge.Runtime
    VB: QRG.QuantumForge.Runtime
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: QRG.QuantumForge.Runtime.BasisValue
    commentId: T:QRG.QuantumForge.Runtime.BasisValue
    language: CSharp
    name:
      CSharp: BasisValue
      VB: BasisValue
    nameWithType:
      CSharp: BasisValue
      VB: BasisValue
    qualifiedName:
      CSharp: QRG.QuantumForge.Runtime.BasisValue
      VB: QRG.QuantumForge.Runtime.BasisValue
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Runtime
    source:
      id: BasisValue
      path: ''
      startLine: 27
    summary: "\nRepresents a value in a quantum basis.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class BasisValue : IEquatable<BasisValue>
        VB: >-
          <Serializable>

          Public Class BasisValue

              Implements IEquatable(Of BasisValue)
    inheritance:
    - System.Object
    implements:
    - System.IEquatable{QRG.QuantumForge.Runtime.BasisValue}
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: QRG.QuantumForge.Runtime.BasisValue.Name
      commentId: F:QRG.QuantumForge.Runtime.BasisValue.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: BasisValue.Name
        VB: BasisValue.Name
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.BasisValue.Name
        VB: QRG.QuantumForge.Runtime.BasisValue.Name
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Name
        path: ''
        startLine: 33
      summary: "\nThe name of the basis value.\n"
      example: []
      syntax:
        content:
          CSharp: public string Name
          VB: Public Name As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.BasisValue.Equals(QRG.QuantumForge.Runtime.BasisValue)
      commentId: M:QRG.QuantumForge.Runtime.BasisValue.Equals(QRG.QuantumForge.Runtime.BasisValue)
      language: CSharp
      name:
        CSharp: Equals(BasisValue)
        VB: Equals(BasisValue)
      nameWithType:
        CSharp: BasisValue.Equals(BasisValue)
        VB: BasisValue.Equals(BasisValue)
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.BasisValue.Equals(QRG.QuantumForge.Runtime.BasisValue)
        VB: QRG.QuantumForge.Runtime.BasisValue.Equals(QRG.QuantumForge.Runtime.BasisValue)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Equals
        path: ''
        startLine: 40
      summary: "\nDetermines whether the specified <xref href=\"QRG.QuantumForge.Runtime.BasisValue\" data-throw-if-not-resolved=\"false\"></xref> is equal to the current instance.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Equals(BasisValue other)
          VB: Public Function Equals(other As BasisValue) As Boolean
        parameters:
        - id: other
          type: QRG.QuantumForge.Runtime.BasisValue
          description: The other <xref href="QRG.QuantumForge.Runtime.BasisValue" data-throw-if-not-resolved="false"></xref> to compare.
        return:
          type: System.Boolean
          description: <code>true</code> if the specified <xref href="QRG.QuantumForge.Runtime.BasisValue" data-throw-if-not-resolved="false"></xref> is equal to the current instance; otherwise, <code>false</code>.
      overload: QRG.QuantumForge.Runtime.BasisValue.Equals*
      implements:
      - System.IEquatable{QRG.QuantumForge.Runtime.BasisValue}.Equals(QRG.QuantumForge.Runtime.BasisValue)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        QRG.QuantumForge.Runtime.BasisValue: 
    - id: QRG.QuantumForge.Runtime.BasisValue.Equals(System.Object)
      commentId: M:QRG.QuantumForge.Runtime.BasisValue.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: BasisValue.Equals(Object)
        VB: BasisValue.Equals(Object)
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.BasisValue.Equals(System.Object)
        VB: QRG.QuantumForge.Runtime.BasisValue.Equals(System.Object)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Equals
        path: ''
        startLine: 52
      summary: "\nDetermines whether the specified object is equal to the current instance.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
          description: The object to compare.
        return:
          type: System.Boolean
          description: <code>true</code> if the specified object is equal to the current instance; otherwise, <code>false</code>.
      overload: QRG.QuantumForge.Runtime.BasisValue.Equals*
      overridden: System.Object.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: QRG.QuantumForge.Runtime.BasisValue.GetHashCode
      commentId: M:QRG.QuantumForge.Runtime.BasisValue.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: BasisValue.GetHashCode()
        VB: BasisValue.GetHashCode()
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.BasisValue.GetHashCode()
        VB: QRG.QuantumForge.Runtime.BasisValue.GetHashCode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: GetHashCode
        path: ''
        startLine: 64
      summary: "\nServes as the default hash function.\n"
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
          description: A hash code for the current object.
      overload: QRG.QuantumForge.Runtime.BasisValue.GetHashCode*
      overridden: System.Object.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: QRG.QuantumForge.Runtime.Basis
    commentId: T:QRG.QuantumForge.Runtime.Basis
    language: CSharp
    name:
      CSharp: Basis
      VB: Basis
    nameWithType:
      CSharp: Basis
      VB: Basis
    qualifiedName:
      CSharp: QRG.QuantumForge.Runtime.Basis
      VB: QRG.QuantumForge.Runtime.Basis
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Runtime
    source:
      id: Basis
      path: ''
      startLine: 75
    summary: "\nRepresents a quantum basis, which is a collection of basis values.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class Basis : ScriptableObject'
        VB: >-
          Public Class Basis

              Inherits ScriptableObject
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: QRG.QuantumForge.Runtime.Basis.values
      commentId: F:QRG.QuantumForge.Runtime.Basis.values
      language: CSharp
      name:
        CSharp: values
        VB: values
      nameWithType:
        CSharp: Basis.values
        VB: Basis.values
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.Basis.values
        VB: QRG.QuantumForge.Runtime.Basis.values
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: values
        path: ''
        startLine: 81
      summary: "\nThe list of basis values in this quantum basis.\n"
      example: []
      syntax:
        content:
          CSharp: public List<BasisValue> values
          VB: Public values As List(Of BasisValue)
        return:
          type: System.Collections.Generic.List{QRG.QuantumForge.Runtime.BasisValue}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.Basis.Dimension
      commentId: P:QRG.QuantumForge.Runtime.Basis.Dimension
      language: CSharp
      name:
        CSharp: Dimension
        VB: Dimension
      nameWithType:
        CSharp: Basis.Dimension
        VB: Basis.Dimension
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.Basis.Dimension
        VB: QRG.QuantumForge.Runtime.Basis.Dimension
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Dimension
        path: ''
        startLine: 86
      summary: "\nGets the dimension of the quantum basis, which is the number of basis values.\n"
      example: []
      syntax:
        content:
          CSharp: public int Dimension { get; }
          VB: Public ReadOnly Property Dimension As Integer
        parameters: []
        return:
          type: System.Int32
      overload: QRG.QuantumForge.Runtime.Basis.Dimension*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
  - id: QRG.QuantumForge.Runtime.BasisValueDropdownAttribute
    commentId: T:QRG.QuantumForge.Runtime.BasisValueDropdownAttribute
    language: CSharp
    name:
      CSharp: BasisValueDropdownAttribute
      VB: BasisValueDropdownAttribute
    nameWithType:
      CSharp: BasisValueDropdownAttribute
      VB: BasisValueDropdownAttribute
    qualifiedName:
      CSharp: QRG.QuantumForge.Runtime.BasisValueDropdownAttribute
      VB: QRG.QuantumForge.Runtime.BasisValueDropdownAttribute
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Runtime
    source:
      id: BasisValueDropdownAttribute
      path: ''
      startLine: 102
    syntax:
      content:
        CSharp: 'public class BasisValueDropdownAttribute : PropertyAttribute'
        VB: >-
          Public Class BasisValueDropdownAttribute

              Inherits PropertyAttribute
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: QRG.QuantumForge.Runtime.BasisValueDropdownAttribute.#ctor
      commentId: M:QRG.QuantumForge.Runtime.BasisValueDropdownAttribute.#ctor
      language: CSharp
      name:
        CSharp: BasisValueDropdownAttribute()
        VB: BasisValueDropdownAttribute()
      nameWithType:
        CSharp: BasisValueDropdownAttribute.BasisValueDropdownAttribute()
        VB: BasisValueDropdownAttribute.BasisValueDropdownAttribute()
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.BasisValueDropdownAttribute.BasisValueDropdownAttribute()
        VB: QRG.QuantumForge.Runtime.BasisValueDropdownAttribute.BasisValueDropdownAttribute()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: .ctor
        path: ''
        startLine: 104
      syntax:
        content:
          CSharp: public BasisValueDropdownAttribute()
          VB: Public Sub New
      overload: QRG.QuantumForge.Runtime.BasisValueDropdownAttribute.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: QRG.QuantumForge.Runtime.Predicate
    commentId: T:QRG.QuantumForge.Runtime.Predicate
    language: CSharp
    name:
      CSharp: Predicate
      VB: Predicate
    nameWithType:
      CSharp: Predicate
      VB: Predicate
    qualifiedName:
      CSharp: QRG.QuantumForge.Runtime.Predicate
      VB: QRG.QuantumForge.Runtime.Predicate
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Runtime
    source:
      id: Predicate
      path: ''
      startLine: 143
    summary: "\nRepresents a condition or predicate for quantum operations.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class Predicate
        VB: >-
          <Serializable>

          Public Class Predicate
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: QRG.QuantumForge.Runtime.Predicate.property
      commentId: F:QRG.QuantumForge.Runtime.Predicate.property
      language: CSharp
      name:
        CSharp: property
        VB: property
      nameWithType:
        CSharp: Predicate.property
        VB: Predicate.property
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.Predicate.property
        VB: QRG.QuantumForge.Runtime.Predicate.property
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: property
        path: ''
        startLine: 151
      summary: "\nThe quantum property associated with this predicate.\n"
      example: []
      syntax:
        content:
          CSharp: public QuantumProperty property
          VB: Public property As QuantumProperty
        return:
          type: QRG.QuantumForge.Runtime.QuantumProperty
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.Predicate.value
      commentId: F:QRG.QuantumForge.Runtime.Predicate.value
      language: CSharp
      name:
        CSharp: value
        VB: value
      nameWithType:
        CSharp: Predicate.value
        VB: Predicate.value
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.Predicate.value
        VB: QRG.QuantumForge.Runtime.Predicate.value
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: value
        path: ''
        startLine: 158
      summary: "\nThe basis value to compare against.\n"
      example: []
      syntax:
        content:
          CSharp: public BasisValue value
          VB: Public value As BasisValue
        return:
          type: QRG.QuantumForge.Runtime.BasisValue
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.Predicate.is_equal
      commentId: F:QRG.QuantumForge.Runtime.Predicate.is_equal
      language: CSharp
      name:
        CSharp: is_equal
        VB: is_equal
      nameWithType:
        CSharp: Predicate.is_equal
        VB: Predicate.is_equal
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.Predicate.is_equal
        VB: QRG.QuantumForge.Runtime.Predicate.is_equal
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: is_equal
        path: ''
        startLine: 164
      summary: "\nIndicates whether the predicate checks for equality or inequality.\n"
      example: []
      syntax:
        content:
          CSharp: public bool is_equal
          VB: Public is_equal As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: QRG.QuantumForge.Runtime.QuantumProperty
    commentId: T:QRG.QuantumForge.Runtime.QuantumProperty
    language: CSharp
    name:
      CSharp: QuantumProperty
      VB: QuantumProperty
    nameWithType:
      CSharp: QuantumProperty
      VB: QuantumProperty
    qualifiedName:
      CSharp: QRG.QuantumForge.Runtime.QuantumProperty
      VB: QRG.QuantumForge.Runtime.QuantumProperty
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Runtime
    source:
      id: QuantumProperty
      path: ''
      startLine: 170
    summary: "\nGives an object the ability to exist in a quantum state.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class QuantumProperty : MonoBehaviour
        VB: >-
          <Serializable>

          Public Class QuantumProperty

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: QRG.QuantumForge.Runtime.QuantumProperty.basis
      commentId: F:QRG.QuantumForge.Runtime.QuantumProperty.basis
      language: CSharp
      name:
        CSharp: basis
        VB: basis
      nameWithType:
        CSharp: QuantumProperty.basis
        VB: QuantumProperty.basis
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.basis
        VB: QRG.QuantumForge.Runtime.QuantumProperty.basis
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: basis
        path: ''
        startLine: 183
      summary: "\nThe basis associated with this quantum property.\n"
      example: []
      syntax:
        content:
          CSharp: public Basis basis
          VB: Public basis As Basis
        return:
          type: QRG.QuantumForge.Runtime.Basis
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.QuantumProperty.Dimension
      commentId: P:QRG.QuantumForge.Runtime.QuantumProperty.Dimension
      language: CSharp
      name:
        CSharp: Dimension
        VB: Dimension
      nameWithType:
        CSharp: QuantumProperty.Dimension
        VB: QuantumProperty.Dimension
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.Dimension
        VB: QRG.QuantumForge.Runtime.QuantumProperty.Dimension
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Dimension
        path: ''
        startLine: 194
      summary: "\nThe dimension, or number of basis values, of the quantum property.\n"
      example: []
      syntax:
        content:
          CSharp: public int Dimension { get; }
          VB: Public ReadOnly Property Dimension As Integer
        parameters: []
        return:
          type: System.Int32
      overload: QRG.QuantumForge.Runtime.QuantumProperty.Dimension*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: QRG.QuantumForge.Runtime.QuantumProperty.is_value(QRG.QuantumForge.Runtime.BasisValue)
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.is_value(QRG.QuantumForge.Runtime.BasisValue)
      language: CSharp
      name:
        CSharp: is_value(BasisValue)
        VB: is_value(BasisValue)
      nameWithType:
        CSharp: QuantumProperty.is_value(BasisValue)
        VB: QuantumProperty.is_value(BasisValue)
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.is_value(QRG.QuantumForge.Runtime.BasisValue)
        VB: QRG.QuantumForge.Runtime.QuantumProperty.is_value(QRG.QuantumForge.Runtime.BasisValue)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: is_value
        path: ''
        startLine: 229
      summary: "\nCreates a predicate that checks if the quantum property has the specified basis value.\n"
      example: []
      syntax:
        content:
          CSharp: public Predicate is_value(BasisValue value)
          VB: Public Function is_value(value As BasisValue) As Predicate
        parameters:
        - id: value
          type: QRG.QuantumForge.Runtime.BasisValue
          description: The basis value to check.
        return:
          type: QRG.QuantumForge.Runtime.Predicate
          description: A predicate representing the condition.
      overload: QRG.QuantumForge.Runtime.QuantumProperty.is_value*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.QuantumProperty.is_value(System.String)
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.is_value(System.String)
      language: CSharp
      name:
        CSharp: is_value(String)
        VB: is_value(String)
      nameWithType:
        CSharp: QuantumProperty.is_value(String)
        VB: QuantumProperty.is_value(String)
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.is_value(System.String)
        VB: QRG.QuantumForge.Runtime.QuantumProperty.is_value(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: is_value
        path: ''
        startLine: 244
      summary: "\nCreates a predicate that checks if the quantum property has the specified basis value by name.\n"
      example: []
      syntax:
        content:
          CSharp: public Predicate is_value(string valueName)
          VB: Public Function is_value(valueName As String) As Predicate
        parameters:
        - id: valueName
          type: System.String
          description: The name of the basis value to check.
        return:
          type: QRG.QuantumForge.Runtime.Predicate
          description: A predicate representing the condition.
      overload: QRG.QuantumForge.Runtime.QuantumProperty.is_value*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.QuantumProperty.is_value(System.Int32)
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.is_value(System.Int32)
      language: CSharp
      name:
        CSharp: is_value(Int32)
        VB: is_value(Int32)
      nameWithType:
        CSharp: QuantumProperty.is_value(Int32)
        VB: QuantumProperty.is_value(Int32)
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.is_value(System.Int32)
        VB: QRG.QuantumForge.Runtime.QuantumProperty.is_value(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: is_value
        path: ''
        startLine: 254
      summary: "\nCreates a predicate that checks if the quantum property has the specified basis value by index.\n"
      example: []
      syntax:
        content:
          CSharp: public Predicate is_value(int valueIndex)
          VB: Public Function is_value(valueIndex As Integer) As Predicate
        parameters:
        - id: valueIndex
          type: System.Int32
          description: The index of the basis value to check.
        return:
          type: QRG.QuantumForge.Runtime.Predicate
          description: A predicate representing the condition.
      overload: QRG.QuantumForge.Runtime.QuantumProperty.is_value*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.QuantumProperty.is_not_value(QRG.QuantumForge.Runtime.BasisValue)
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.is_not_value(QRG.QuantumForge.Runtime.BasisValue)
      language: CSharp
      name:
        CSharp: is_not_value(BasisValue)
        VB: is_not_value(BasisValue)
      nameWithType:
        CSharp: QuantumProperty.is_not_value(BasisValue)
        VB: QuantumProperty.is_not_value(BasisValue)
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.is_not_value(QRG.QuantumForge.Runtime.BasisValue)
        VB: QRG.QuantumForge.Runtime.QuantumProperty.is_not_value(QRG.QuantumForge.Runtime.BasisValue)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: is_not_value
        path: ''
        startLine: 264
      summary: "\nCreates a predicate that checks if the quantum property does not have the specified basis value.\n"
      example: []
      syntax:
        content:
          CSharp: public Predicate is_not_value(BasisValue value)
          VB: Public Function is_not_value(value As BasisValue) As Predicate
        parameters:
        - id: value
          type: QRG.QuantumForge.Runtime.BasisValue
          description: The basis value to check against.
        return:
          type: QRG.QuantumForge.Runtime.Predicate
          description: A predicate representing the condition.
      overload: QRG.QuantumForge.Runtime.QuantumProperty.is_not_value*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.QuantumProperty.is_not_value(System.String)
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.is_not_value(System.String)
      language: CSharp
      name:
        CSharp: is_not_value(String)
        VB: is_not_value(String)
      nameWithType:
        CSharp: QuantumProperty.is_not_value(String)
        VB: QuantumProperty.is_not_value(String)
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.is_not_value(System.String)
        VB: QRG.QuantumForge.Runtime.QuantumProperty.is_not_value(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: is_not_value
        path: ''
        startLine: 279
      summary: "\nCreates a predicate that checks if the quantum property does not have the specified basis value by name.\n"
      example: []
      syntax:
        content:
          CSharp: public Predicate is_not_value(string valueName)
          VB: Public Function is_not_value(valueName As String) As Predicate
        parameters:
        - id: valueName
          type: System.String
          description: The name of the basis value to check against.
        return:
          type: QRG.QuantumForge.Runtime.Predicate
          description: A predicate representing the condition.
      overload: QRG.QuantumForge.Runtime.QuantumProperty.is_not_value*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.QuantumProperty.is_not_value(System.Int32)
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.is_not_value(System.Int32)
      language: CSharp
      name:
        CSharp: is_not_value(Int32)
        VB: is_not_value(Int32)
      nameWithType:
        CSharp: QuantumProperty.is_not_value(Int32)
        VB: QuantumProperty.is_not_value(Int32)
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.is_not_value(System.Int32)
        VB: QRG.QuantumForge.Runtime.QuantumProperty.is_not_value(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: is_not_value
        path: ''
        startLine: 289
      summary: "\nCreates a predicate that checks if the quantum property does not have the specified basis value by index.\n"
      example: []
      syntax:
        content:
          CSharp: public Predicate is_not_value(int value)
          VB: Public Function is_not_value(value As Integer) As Predicate
        parameters:
        - id: value
          type: System.Int32
          description: The index of the basis value to check against.
        return:
          type: QRG.QuantumForge.Runtime.Predicate
          description: A predicate representing the condition.
      overload: QRG.QuantumForge.Runtime.QuantumProperty.is_not_value*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.QuantumProperty.Cycle(QRG.QuantumForge.Runtime.QuantumProperty,QRG.QuantumForge.Runtime.Predicate[])
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.Cycle(QRG.QuantumForge.Runtime.QuantumProperty,QRG.QuantumForge.Runtime.Predicate[])
      language: CSharp
      name:
        CSharp: Cycle(QuantumProperty, Predicate[])
        VB: Cycle(QuantumProperty, Predicate())
      nameWithType:
        CSharp: QuantumProperty.Cycle(QuantumProperty, Predicate[])
        VB: QuantumProperty.Cycle(QuantumProperty, Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.Cycle(QRG.QuantumForge.Runtime.QuantumProperty, QRG.QuantumForge.Runtime.Predicate[])
        VB: QRG.QuantumForge.Runtime.QuantumProperty.Cycle(QRG.QuantumForge.Runtime.QuantumProperty, QRG.QuantumForge.Runtime.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Cycle
        path: ''
        startLine: 301
      syntax:
        content:
          CSharp: public static void Cycle(QuantumProperty prop, params Predicate[] predicates)
          VB: Public Shared Sub Cycle(prop As QuantumProperty, ParamArray predicates As Predicate())
        parameters:
        - id: prop
          type: QRG.QuantumForge.Runtime.QuantumProperty
        - id: predicates
          type: QRG.QuantumForge.Runtime.Predicate[]
      overload: QRG.QuantumForge.Runtime.QuantumProperty.Cycle*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Runtime.QuantumProperty.Cycle(QRG.QuantumForge.Runtime.Predicate[])
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.Cycle(QRG.QuantumForge.Runtime.Predicate[])
      language: CSharp
      name:
        CSharp: Cycle(Predicate[])
        VB: Cycle(Predicate())
      nameWithType:
        CSharp: QuantumProperty.Cycle(Predicate[])
        VB: QuantumProperty.Cycle(Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.Cycle(QRG.QuantumForge.Runtime.Predicate[])
        VB: QRG.QuantumForge.Runtime.QuantumProperty.Cycle(QRG.QuantumForge.Runtime.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Cycle
        path: ''
        startLine: 306
      syntax:
        content:
          CSharp: public void Cycle(params Predicate[] predicates)
          VB: Public Sub Cycle(ParamArray predicates As Predicate())
        parameters:
        - id: predicates
          type: QRG.QuantumForge.Runtime.Predicate[]
      overload: QRG.QuantumForge.Runtime.QuantumProperty.Cycle*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.QuantumProperty.Cycle(QRG.QuantumForge.Runtime.QuantumProperty,System.Single,QRG.QuantumForge.Runtime.Predicate[])
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.Cycle(QRG.QuantumForge.Runtime.QuantumProperty,System.Single,QRG.QuantumForge.Runtime.Predicate[])
      language: CSharp
      name:
        CSharp: Cycle(QuantumProperty, Single, Predicate[])
        VB: Cycle(QuantumProperty, Single, Predicate())
      nameWithType:
        CSharp: QuantumProperty.Cycle(QuantumProperty, Single, Predicate[])
        VB: QuantumProperty.Cycle(QuantumProperty, Single, Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.Cycle(QRG.QuantumForge.Runtime.QuantumProperty, System.Single, QRG.QuantumForge.Runtime.Predicate[])
        VB: QRG.QuantumForge.Runtime.QuantumProperty.Cycle(QRG.QuantumForge.Runtime.QuantumProperty, System.Single, QRG.QuantumForge.Runtime.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Cycle
        path: ''
        startLine: 311
      syntax:
        content:
          CSharp: public static void Cycle(QuantumProperty prop, float fraction, params Predicate[] predicates)
          VB: Public Shared Sub Cycle(prop As QuantumProperty, fraction As Single, ParamArray predicates As Predicate())
        parameters:
        - id: prop
          type: QRG.QuantumForge.Runtime.QuantumProperty
        - id: fraction
          type: System.Single
        - id: predicates
          type: QRG.QuantumForge.Runtime.Predicate[]
      overload: QRG.QuantumForge.Runtime.QuantumProperty.Cycle*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Runtime.QuantumProperty.Cycle(System.Single,QRG.QuantumForge.Runtime.Predicate[])
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.Cycle(System.Single,QRG.QuantumForge.Runtime.Predicate[])
      language: CSharp
      name:
        CSharp: Cycle(Single, Predicate[])
        VB: Cycle(Single, Predicate())
      nameWithType:
        CSharp: QuantumProperty.Cycle(Single, Predicate[])
        VB: QuantumProperty.Cycle(Single, Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.Cycle(System.Single, QRG.QuantumForge.Runtime.Predicate[])
        VB: QRG.QuantumForge.Runtime.QuantumProperty.Cycle(System.Single, QRG.QuantumForge.Runtime.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Cycle
        path: ''
        startLine: 316
      syntax:
        content:
          CSharp: public void Cycle(float fraction, params Predicate[] predicates)
          VB: Public Sub Cycle(fraction As Single, ParamArray predicates As Predicate())
        parameters:
        - id: fraction
          type: System.Single
        - id: predicates
          type: QRG.QuantumForge.Runtime.Predicate[]
      overload: QRG.QuantumForge.Runtime.QuantumProperty.Cycle*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.QuantumProperty.Shift(QRG.QuantumForge.Runtime.QuantumProperty,QRG.QuantumForge.Runtime.Predicate[])
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.Shift(QRG.QuantumForge.Runtime.QuantumProperty,QRG.QuantumForge.Runtime.Predicate[])
      language: CSharp
      name:
        CSharp: Shift(QuantumProperty, Predicate[])
        VB: Shift(QuantumProperty, Predicate())
      nameWithType:
        CSharp: QuantumProperty.Shift(QuantumProperty, Predicate[])
        VB: QuantumProperty.Shift(QuantumProperty, Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.Shift(QRG.QuantumForge.Runtime.QuantumProperty, QRG.QuantumForge.Runtime.Predicate[])
        VB: QRG.QuantumForge.Runtime.QuantumProperty.Shift(QRG.QuantumForge.Runtime.QuantumProperty, QRG.QuantumForge.Runtime.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Shift
        path: ''
        startLine: 321
      syntax:
        content:
          CSharp: public static void Shift(QuantumProperty prop, params Predicate[] predicates)
          VB: Public Shared Sub Shift(prop As QuantumProperty, ParamArray predicates As Predicate())
        parameters:
        - id: prop
          type: QRG.QuantumForge.Runtime.QuantumProperty
        - id: predicates
          type: QRG.QuantumForge.Runtime.Predicate[]
      overload: QRG.QuantumForge.Runtime.QuantumProperty.Shift*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Runtime.QuantumProperty.Shift(QRG.QuantumForge.Runtime.Predicate[])
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.Shift(QRG.QuantumForge.Runtime.Predicate[])
      language: CSharp
      name:
        CSharp: Shift(Predicate[])
        VB: Shift(Predicate())
      nameWithType:
        CSharp: QuantumProperty.Shift(Predicate[])
        VB: QuantumProperty.Shift(Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.Shift(QRG.QuantumForge.Runtime.Predicate[])
        VB: QRG.QuantumForge.Runtime.QuantumProperty.Shift(QRG.QuantumForge.Runtime.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Shift
        path: ''
        startLine: 326
      syntax:
        content:
          CSharp: public void Shift(params Predicate[] predicates)
          VB: Public Sub Shift(ParamArray predicates As Predicate())
        parameters:
        - id: predicates
          type: QRG.QuantumForge.Runtime.Predicate[]
      overload: QRG.QuantumForge.Runtime.QuantumProperty.Shift*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.QuantumProperty.Shift(QRG.QuantumForge.Runtime.QuantumProperty,System.Single,QRG.QuantumForge.Runtime.Predicate[])
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.Shift(QRG.QuantumForge.Runtime.QuantumProperty,System.Single,QRG.QuantumForge.Runtime.Predicate[])
      language: CSharp
      name:
        CSharp: Shift(QuantumProperty, Single, Predicate[])
        VB: Shift(QuantumProperty, Single, Predicate())
      nameWithType:
        CSharp: QuantumProperty.Shift(QuantumProperty, Single, Predicate[])
        VB: QuantumProperty.Shift(QuantumProperty, Single, Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.Shift(QRG.QuantumForge.Runtime.QuantumProperty, System.Single, QRG.QuantumForge.Runtime.Predicate[])
        VB: QRG.QuantumForge.Runtime.QuantumProperty.Shift(QRG.QuantumForge.Runtime.QuantumProperty, System.Single, QRG.QuantumForge.Runtime.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Shift
        path: ''
        startLine: 331
      syntax:
        content:
          CSharp: public static void Shift(QuantumProperty prop, float fraction, params Predicate[] predicates)
          VB: Public Shared Sub Shift(prop As QuantumProperty, fraction As Single, ParamArray predicates As Predicate())
        parameters:
        - id: prop
          type: QRG.QuantumForge.Runtime.QuantumProperty
        - id: fraction
          type: System.Single
        - id: predicates
          type: QRG.QuantumForge.Runtime.Predicate[]
      overload: QRG.QuantumForge.Runtime.QuantumProperty.Shift*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Runtime.QuantumProperty.Shift(System.Single,QRG.QuantumForge.Runtime.Predicate[])
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.Shift(System.Single,QRG.QuantumForge.Runtime.Predicate[])
      language: CSharp
      name:
        CSharp: Shift(Single, Predicate[])
        VB: Shift(Single, Predicate())
      nameWithType:
        CSharp: QuantumProperty.Shift(Single, Predicate[])
        VB: QuantumProperty.Shift(Single, Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.Shift(System.Single, QRG.QuantumForge.Runtime.Predicate[])
        VB: QRG.QuantumForge.Runtime.QuantumProperty.Shift(System.Single, QRG.QuantumForge.Runtime.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Shift
        path: ''
        startLine: 336
      syntax:
        content:
          CSharp: public void Shift(float fraction, params Predicate[] predicates)
          VB: Public Sub Shift(fraction As Single, ParamArray predicates As Predicate())
        parameters:
        - id: fraction
          type: System.Single
        - id: predicates
          type: QRG.QuantumForge.Runtime.Predicate[]
      overload: QRG.QuantumForge.Runtime.QuantumProperty.Shift*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.QuantumProperty.Clock(QRG.QuantumForge.Runtime.QuantumProperty,System.Single,QRG.QuantumForge.Runtime.Predicate[])
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.Clock(QRG.QuantumForge.Runtime.QuantumProperty,System.Single,QRG.QuantumForge.Runtime.Predicate[])
      language: CSharp
      name:
        CSharp: Clock(QuantumProperty, Single, Predicate[])
        VB: Clock(QuantumProperty, Single, Predicate())
      nameWithType:
        CSharp: QuantumProperty.Clock(QuantumProperty, Single, Predicate[])
        VB: QuantumProperty.Clock(QuantumProperty, Single, Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.Clock(QRG.QuantumForge.Runtime.QuantumProperty, System.Single, QRG.QuantumForge.Runtime.Predicate[])
        VB: QRG.QuantumForge.Runtime.QuantumProperty.Clock(QRG.QuantumForge.Runtime.QuantumProperty, System.Single, QRG.QuantumForge.Runtime.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Clock
        path: ''
        startLine: 341
      syntax:
        content:
          CSharp: public static void Clock(QuantumProperty property, float fraction, params Predicate[] predicates)
          VB: Public Shared Sub Clock(property As QuantumProperty, fraction As Single, ParamArray predicates As Predicate())
        parameters:
        - id: property
          type: QRG.QuantumForge.Runtime.QuantumProperty
        - id: fraction
          type: System.Single
        - id: predicates
          type: QRG.QuantumForge.Runtime.Predicate[]
      overload: QRG.QuantumForge.Runtime.QuantumProperty.Clock*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Runtime.QuantumProperty.Clock(System.Single,QRG.QuantumForge.Runtime.Predicate[])
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.Clock(System.Single,QRG.QuantumForge.Runtime.Predicate[])
      language: CSharp
      name:
        CSharp: Clock(Single, Predicate[])
        VB: Clock(Single, Predicate())
      nameWithType:
        CSharp: QuantumProperty.Clock(Single, Predicate[])
        VB: QuantumProperty.Clock(Single, Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.Clock(System.Single, QRG.QuantumForge.Runtime.Predicate[])
        VB: QRG.QuantumForge.Runtime.QuantumProperty.Clock(System.Single, QRG.QuantumForge.Runtime.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Clock
        path: ''
        startLine: 352
      summary: "\nThe full qudit Z gate.\nApplies a phase rotation to all basis values, based on the value_string.\nLet w = exp(2*pi*i/Dimension)\nFor basis value_string v, the phase rotation is w^v\n"
      example: []
      syntax:
        content:
          CSharp: public void Clock(float fraction, params Predicate[] predicates)
          VB: Public Sub Clock(fraction As Single, ParamArray predicates As Predicate())
        parameters:
        - id: fraction
          type: System.Single
        - id: predicates
          type: QRG.QuantumForge.Runtime.Predicate[]
      overload: QRG.QuantumForge.Runtime.QuantumProperty.Clock*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.QuantumProperty.Clock(QRG.QuantumForge.Runtime.QuantumProperty,QRG.QuantumForge.Runtime.Predicate[])
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.Clock(QRG.QuantumForge.Runtime.QuantumProperty,QRG.QuantumForge.Runtime.Predicate[])
      language: CSharp
      name:
        CSharp: Clock(QuantumProperty, Predicate[])
        VB: Clock(QuantumProperty, Predicate())
      nameWithType:
        CSharp: QuantumProperty.Clock(QuantumProperty, Predicate[])
        VB: QuantumProperty.Clock(QuantumProperty, Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.Clock(QRG.QuantumForge.Runtime.QuantumProperty, QRG.QuantumForge.Runtime.Predicate[])
        VB: QRG.QuantumForge.Runtime.QuantumProperty.Clock(QRG.QuantumForge.Runtime.QuantumProperty, QRG.QuantumForge.Runtime.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Clock
        path: ''
        startLine: 358
      syntax:
        content:
          CSharp: public static void Clock(QuantumProperty property, params Predicate[] predicates)
          VB: Public Shared Sub Clock(property As QuantumProperty, ParamArray predicates As Predicate())
        parameters:
        - id: property
          type: QRG.QuantumForge.Runtime.QuantumProperty
        - id: predicates
          type: QRG.QuantumForge.Runtime.Predicate[]
      overload: QRG.QuantumForge.Runtime.QuantumProperty.Clock*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Runtime.QuantumProperty.Clock(QRG.QuantumForge.Runtime.Predicate[])
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.Clock(QRG.QuantumForge.Runtime.Predicate[])
      language: CSharp
      name:
        CSharp: Clock(Predicate[])
        VB: Clock(Predicate())
      nameWithType:
        CSharp: QuantumProperty.Clock(Predicate[])
        VB: QuantumProperty.Clock(Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.Clock(QRG.QuantumForge.Runtime.Predicate[])
        VB: QRG.QuantumForge.Runtime.QuantumProperty.Clock(QRG.QuantumForge.Runtime.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Clock
        path: ''
        startLine: 369
      summary: "\nThe full qudit Z gate.\nApplies a phase rotation to all basis values, based on the value_string.\nLet w = exp(2*pi*i/Dimension)\nFor basis value_string v, the phase rotation is w^v\n"
      example: []
      syntax:
        content:
          CSharp: public void Clock(params Predicate[] predicates)
          VB: Public Sub Clock(ParamArray predicates As Predicate())
        parameters:
        - id: predicates
          type: QRG.QuantumForge.Runtime.Predicate[]
      overload: QRG.QuantumForge.Runtime.QuantumProperty.Clock*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.QuantumProperty.Hadamard(QRG.QuantumForge.Runtime.QuantumProperty,QRG.QuantumForge.Runtime.Predicate[])
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.Hadamard(QRG.QuantumForge.Runtime.QuantumProperty,QRG.QuantumForge.Runtime.Predicate[])
      language: CSharp
      name:
        CSharp: Hadamard(QuantumProperty, Predicate[])
        VB: Hadamard(QuantumProperty, Predicate())
      nameWithType:
        CSharp: QuantumProperty.Hadamard(QuantumProperty, Predicate[])
        VB: QuantumProperty.Hadamard(QuantumProperty, Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.Hadamard(QRG.QuantumForge.Runtime.QuantumProperty, QRG.QuantumForge.Runtime.Predicate[])
        VB: QRG.QuantumForge.Runtime.QuantumProperty.Hadamard(QRG.QuantumForge.Runtime.QuantumProperty, QRG.QuantumForge.Runtime.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Hadamard
        path: ''
        startLine: 374
      syntax:
        content:
          CSharp: public static void Hadamard(QuantumProperty prop, params Predicate[] predicates)
          VB: Public Shared Sub Hadamard(prop As QuantumProperty, ParamArray predicates As Predicate())
        parameters:
        - id: prop
          type: QRG.QuantumForge.Runtime.QuantumProperty
        - id: predicates
          type: QRG.QuantumForge.Runtime.Predicate[]
      overload: QRG.QuantumForge.Runtime.QuantumProperty.Hadamard*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Runtime.QuantumProperty.Hadamard(QRG.QuantumForge.Runtime.Predicate[])
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.Hadamard(QRG.QuantumForge.Runtime.Predicate[])
      language: CSharp
      name:
        CSharp: Hadamard(Predicate[])
        VB: Hadamard(Predicate())
      nameWithType:
        CSharp: QuantumProperty.Hadamard(Predicate[])
        VB: QuantumProperty.Hadamard(Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.Hadamard(QRG.QuantumForge.Runtime.Predicate[])
        VB: QRG.QuantumForge.Runtime.QuantumProperty.Hadamard(QRG.QuantumForge.Runtime.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Hadamard
        path: ''
        startLine: 379
      syntax:
        content:
          CSharp: public void Hadamard(params Predicate[] predicates)
          VB: Public Sub Hadamard(ParamArray predicates As Predicate())
        parameters:
        - id: predicates
          type: QRG.QuantumForge.Runtime.Predicate[]
      overload: QRG.QuantumForge.Runtime.QuantumProperty.Hadamard*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.QuantumProperty.InverseHadamard(QRG.QuantumForge.Runtime.QuantumProperty,QRG.QuantumForge.Runtime.Predicate[])
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.InverseHadamard(QRG.QuantumForge.Runtime.QuantumProperty,QRG.QuantumForge.Runtime.Predicate[])
      language: CSharp
      name:
        CSharp: InverseHadamard(QuantumProperty, Predicate[])
        VB: InverseHadamard(QuantumProperty, Predicate())
      nameWithType:
        CSharp: QuantumProperty.InverseHadamard(QuantumProperty, Predicate[])
        VB: QuantumProperty.InverseHadamard(QuantumProperty, Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.InverseHadamard(QRG.QuantumForge.Runtime.QuantumProperty, QRG.QuantumForge.Runtime.Predicate[])
        VB: QRG.QuantumForge.Runtime.QuantumProperty.InverseHadamard(QRG.QuantumForge.Runtime.QuantumProperty, QRG.QuantumForge.Runtime.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: InverseHadamard
        path: ''
        startLine: 384
      syntax:
        content:
          CSharp: public static void InverseHadamard(QuantumProperty prop, params Predicate[] predicates)
          VB: Public Shared Sub InverseHadamard(prop As QuantumProperty, ParamArray predicates As Predicate())
        parameters:
        - id: prop
          type: QRG.QuantumForge.Runtime.QuantumProperty
        - id: predicates
          type: QRG.QuantumForge.Runtime.Predicate[]
      overload: QRG.QuantumForge.Runtime.QuantumProperty.InverseHadamard*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Runtime.QuantumProperty.InverseHadamard(QRG.QuantumForge.Runtime.Predicate[])
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.InverseHadamard(QRG.QuantumForge.Runtime.Predicate[])
      language: CSharp
      name:
        CSharp: InverseHadamard(Predicate[])
        VB: InverseHadamard(Predicate())
      nameWithType:
        CSharp: QuantumProperty.InverseHadamard(Predicate[])
        VB: QuantumProperty.InverseHadamard(Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.InverseHadamard(QRG.QuantumForge.Runtime.Predicate[])
        VB: QRG.QuantumForge.Runtime.QuantumProperty.InverseHadamard(QRG.QuantumForge.Runtime.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: InverseHadamard
        path: ''
        startLine: 389
      syntax:
        content:
          CSharp: public void InverseHadamard(params Predicate[] predicates)
          VB: Public Sub InverseHadamard(ParamArray predicates As Predicate())
        parameters:
        - id: predicates
          type: QRG.QuantumForge.Runtime.Predicate[]
      overload: QRG.QuantumForge.Runtime.QuantumProperty.InverseHadamard*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.QuantumProperty.PhaseRotate(System.Single,QRG.QuantumForge.Runtime.Predicate[])
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.PhaseRotate(System.Single,QRG.QuantumForge.Runtime.Predicate[])
      language: CSharp
      name:
        CSharp: PhaseRotate(Single, Predicate[])
        VB: PhaseRotate(Single, Predicate())
      nameWithType:
        CSharp: QuantumProperty.PhaseRotate(Single, Predicate[])
        VB: QuantumProperty.PhaseRotate(Single, Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.PhaseRotate(System.Single, QRG.QuantumForge.Runtime.Predicate[])
        VB: QRG.QuantumForge.Runtime.QuantumProperty.PhaseRotate(System.Single, QRG.QuantumForge.Runtime.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: PhaseRotate
        path: ''
        startLine: 394
      syntax:
        content:
          CSharp: public static void PhaseRotate(float angle, params Predicate[] predicates)
          VB: Public Shared Sub PhaseRotate(angle As Single, ParamArray predicates As Predicate())
        parameters:
        - id: angle
          type: System.Single
        - id: predicates
          type: QRG.QuantumForge.Runtime.Predicate[]
      overload: QRG.QuantumForge.Runtime.QuantumProperty.PhaseRotate*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Runtime.QuantumProperty.Swap(QRG.QuantumForge.Runtime.QuantumProperty,QRG.QuantumForge.Runtime.QuantumProperty,QRG.QuantumForge.Runtime.Predicate[])
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.Swap(QRG.QuantumForge.Runtime.QuantumProperty,QRG.QuantumForge.Runtime.QuantumProperty,QRG.QuantumForge.Runtime.Predicate[])
      language: CSharp
      name:
        CSharp: Swap(QuantumProperty, QuantumProperty, Predicate[])
        VB: Swap(QuantumProperty, QuantumProperty, Predicate())
      nameWithType:
        CSharp: QuantumProperty.Swap(QuantumProperty, QuantumProperty, Predicate[])
        VB: QuantumProperty.Swap(QuantumProperty, QuantumProperty, Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.Swap(QRG.QuantumForge.Runtime.QuantumProperty, QRG.QuantumForge.Runtime.QuantumProperty, QRG.QuantumForge.Runtime.Predicate[])
        VB: QRG.QuantumForge.Runtime.QuantumProperty.Swap(QRG.QuantumForge.Runtime.QuantumProperty, QRG.QuantumForge.Runtime.QuantumProperty, QRG.QuantumForge.Runtime.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Swap
        path: ''
        startLine: 399
      syntax:
        content:
          CSharp: public static void Swap(QuantumProperty prop1, QuantumProperty prop2, params Predicate[] predicates)
          VB: Public Shared Sub Swap(prop1 As QuantumProperty, prop2 As QuantumProperty, ParamArray predicates As Predicate())
        parameters:
        - id: prop1
          type: QRG.QuantumForge.Runtime.QuantumProperty
        - id: prop2
          type: QRG.QuantumForge.Runtime.QuantumProperty
        - id: predicates
          type: QRG.QuantumForge.Runtime.Predicate[]
      overload: QRG.QuantumForge.Runtime.QuantumProperty.Swap*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Runtime.QuantumProperty.ISwap(QRG.QuantumForge.Runtime.QuantumProperty,QRG.QuantumForge.Runtime.QuantumProperty)
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.ISwap(QRG.QuantumForge.Runtime.QuantumProperty,QRG.QuantumForge.Runtime.QuantumProperty)
      language: CSharp
      name:
        CSharp: ISwap(QuantumProperty, QuantumProperty)
        VB: ISwap(QuantumProperty, QuantumProperty)
      nameWithType:
        CSharp: QuantumProperty.ISwap(QuantumProperty, QuantumProperty)
        VB: QuantumProperty.ISwap(QuantumProperty, QuantumProperty)
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.ISwap(QRG.QuantumForge.Runtime.QuantumProperty, QRG.QuantumForge.Runtime.QuantumProperty)
        VB: QRG.QuantumForge.Runtime.QuantumProperty.ISwap(QRG.QuantumForge.Runtime.QuantumProperty, QRG.QuantumForge.Runtime.QuantumProperty)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: ISwap
        path: ''
        startLine: 404
      syntax:
        content:
          CSharp: public static void ISwap(QuantumProperty prop1, QuantumProperty prop2)
          VB: Public Shared Sub ISwap(prop1 As QuantumProperty, prop2 As QuantumProperty)
        parameters:
        - id: prop1
          type: QRG.QuantumForge.Runtime.QuantumProperty
        - id: prop2
          type: QRG.QuantumForge.Runtime.QuantumProperty
      overload: QRG.QuantumForge.Runtime.QuantumProperty.ISwap*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Runtime.QuantumProperty.ISwap(QRG.QuantumForge.Runtime.QuantumProperty,QRG.QuantumForge.Runtime.QuantumProperty,System.Single)
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.ISwap(QRG.QuantumForge.Runtime.QuantumProperty,QRG.QuantumForge.Runtime.QuantumProperty,System.Single)
      language: CSharp
      name:
        CSharp: ISwap(QuantumProperty, QuantumProperty, Single)
        VB: ISwap(QuantumProperty, QuantumProperty, Single)
      nameWithType:
        CSharp: QuantumProperty.ISwap(QuantumProperty, QuantumProperty, Single)
        VB: QuantumProperty.ISwap(QuantumProperty, QuantumProperty, Single)
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.ISwap(QRG.QuantumForge.Runtime.QuantumProperty, QRG.QuantumForge.Runtime.QuantumProperty, System.Single)
        VB: QRG.QuantumForge.Runtime.QuantumProperty.ISwap(QRG.QuantumForge.Runtime.QuantumProperty, QRG.QuantumForge.Runtime.QuantumProperty, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: ISwap
        path: ''
        startLine: 409
      syntax:
        content:
          CSharp: public static void ISwap(QuantumProperty prop1, QuantumProperty prop2, float fraction)
          VB: Public Shared Sub ISwap(prop1 As QuantumProperty, prop2 As QuantumProperty, fraction As Single)
        parameters:
        - id: prop1
          type: QRG.QuantumForge.Runtime.QuantumProperty
        - id: prop2
          type: QRG.QuantumForge.Runtime.QuantumProperty
        - id: fraction
          type: System.Single
      overload: QRG.QuantumForge.Runtime.QuantumProperty.ISwap*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Runtime.QuantumProperty.NCycle(QRG.QuantumForge.Runtime.QuantumProperty,QRG.QuantumForge.Runtime.QuantumProperty)
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.NCycle(QRG.QuantumForge.Runtime.QuantumProperty,QRG.QuantumForge.Runtime.QuantumProperty)
      language: CSharp
      name:
        CSharp: NCycle(QuantumProperty, QuantumProperty)
        VB: NCycle(QuantumProperty, QuantumProperty)
      nameWithType:
        CSharp: QuantumProperty.NCycle(QuantumProperty, QuantumProperty)
        VB: QuantumProperty.NCycle(QuantumProperty, QuantumProperty)
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.NCycle(QRG.QuantumForge.Runtime.QuantumProperty, QRG.QuantumForge.Runtime.QuantumProperty)
        VB: QRG.QuantumForge.Runtime.QuantumProperty.NCycle(QRG.QuantumForge.Runtime.QuantumProperty, QRG.QuantumForge.Runtime.QuantumProperty)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: NCycle
        path: ''
        startLine: 425
      summary: "\nEntangling operation. Performs a number of predicated (controlled) cycles on prop2 based on the value_string of prop1.\nEx. Prop1 is in superposition of 0, 1, and 2 : |prop1> = 1/sqrt(3) * (|0> + |1> + |2>)\nProp2 starts in state 0: |prop2> = |0>\nResult: |prop1,prop2> = 1/sqrt(3) * (|0,0> + |1,1> + |2,2>)\nNote: if prop2 starts in a different state, the result will be a different entanglement structure.\nEx. Prop2 starts in state 1: |prop2> = |1>\nResult: |prop1,prop2> = 1/sqrt(3) * (|0,1> + |1,2> + |2,0>)\n"
      example: []
      syntax:
        content:
          CSharp: public static void NCycle(QuantumProperty prop1, QuantumProperty prop2)
          VB: Public Shared Sub NCycle(prop1 As QuantumProperty, prop2 As QuantumProperty)
        parameters:
        - id: prop1
          type: QRG.QuantumForge.Runtime.QuantumProperty
        - id: prop2
          type: QRG.QuantumForge.Runtime.QuantumProperty
      overload: QRG.QuantumForge.Runtime.QuantumProperty.NCycle*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Runtime.QuantumProperty.Probabilities(QRG.QuantumForge.Runtime.QuantumProperty[])
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.Probabilities(QRG.QuantumForge.Runtime.QuantumProperty[])
      language: CSharp
      name:
        CSharp: Probabilities(QuantumProperty[])
        VB: Probabilities(QuantumProperty())
      nameWithType:
        CSharp: QuantumProperty.Probabilities(QuantumProperty[])
        VB: QuantumProperty.Probabilities(QuantumProperty())
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.Probabilities(QRG.QuantumForge.Runtime.QuantumProperty[])
        VB: QRG.QuantumForge.Runtime.QuantumProperty.Probabilities(QRG.QuantumForge.Runtime.QuantumProperty())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Probabilities
        path: ''
        startLine: 451
      syntax:
        content:
          CSharp: public static QuantumProperty.BasisProbability[] Probabilities(params QuantumProperty[] properties)
          VB: Public Shared Function Probabilities(ParamArray properties As QuantumProperty()) As QuantumProperty.BasisProbability()
        parameters:
        - id: properties
          type: QRG.QuantumForge.Runtime.QuantumProperty[]
        return:
          type: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability[]
      overload: QRG.QuantumForge.Runtime.QuantumProperty.Probabilities*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Runtime.QuantumProperty.ReducedDensityMatrix(QRG.QuantumForge.Runtime.QuantumProperty[])
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.ReducedDensityMatrix(QRG.QuantumForge.Runtime.QuantumProperty[])
      language: CSharp
      name:
        CSharp: ReducedDensityMatrix(QuantumProperty[])
        VB: ReducedDensityMatrix(QuantumProperty())
      nameWithType:
        CSharp: QuantumProperty.ReducedDensityMatrix(QuantumProperty[])
        VB: QuantumProperty.ReducedDensityMatrix(QuantumProperty())
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.ReducedDensityMatrix(QRG.QuantumForge.Runtime.QuantumProperty[])
        VB: QRG.QuantumForge.Runtime.QuantumProperty.ReducedDensityMatrix(QRG.QuantumForge.Runtime.QuantumProperty())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: ReducedDensityMatrix
        path: ''
        startLine: 476
      syntax:
        content:
          CSharp: public static Complex[, ] ReducedDensityMatrix(params QuantumProperty[] properties)
          VB: Public Shared Function ReducedDensityMatrix(ParamArray properties As QuantumProperty()) As Complex(,)
        parameters:
        - id: properties
          type: QRG.QuantumForge.Runtime.QuantumProperty[]
        return:
          type: Complex[,]
      overload: QRG.QuantumForge.Runtime.QuantumProperty.ReducedDensityMatrix*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Runtime.QuantumProperty.MutualInformation(QRG.QuantumForge.Runtime.QuantumProperty[])
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.MutualInformation(QRG.QuantumForge.Runtime.QuantumProperty[])
      language: CSharp
      name:
        CSharp: MutualInformation(QuantumProperty[])
        VB: MutualInformation(QuantumProperty())
      nameWithType:
        CSharp: QuantumProperty.MutualInformation(QuantumProperty[])
        VB: QuantumProperty.MutualInformation(QuantumProperty())
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.MutualInformation(QRG.QuantumForge.Runtime.QuantumProperty[])
        VB: QRG.QuantumForge.Runtime.QuantumProperty.MutualInformation(QRG.QuantumForge.Runtime.QuantumProperty())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: MutualInformation
        path: ''
        startLine: 482
      syntax:
        content:
          CSharp: public static float[] MutualInformation(params QuantumProperty[] properties)
          VB: Public Shared Function MutualInformation(ParamArray properties As QuantumProperty()) As Single()
        parameters:
        - id: properties
          type: QRG.QuantumForge.Runtime.QuantumProperty[]
        return:
          type: System.Single[]
      overload: QRG.QuantumForge.Runtime.QuantumProperty.MutualInformation*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Runtime.QuantumProperty.CorrelationMatrix(QRG.QuantumForge.Runtime.QuantumProperty[])
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.CorrelationMatrix(QRG.QuantumForge.Runtime.QuantumProperty[])
      language: CSharp
      name:
        CSharp: CorrelationMatrix(QuantumProperty[])
        VB: CorrelationMatrix(QuantumProperty())
      nameWithType:
        CSharp: QuantumProperty.CorrelationMatrix(QuantumProperty[])
        VB: QuantumProperty.CorrelationMatrix(QuantumProperty())
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.CorrelationMatrix(QRG.QuantumForge.Runtime.QuantumProperty[])
        VB: QRG.QuantumForge.Runtime.QuantumProperty.CorrelationMatrix(QRG.QuantumForge.Runtime.QuantumProperty())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: CorrelationMatrix
        path: ''
        startLine: 488
      syntax:
        content:
          CSharp: public static float[, ] CorrelationMatrix(params QuantumProperty[] properties)
          VB: Public Shared Function CorrelationMatrix(ParamArray properties As QuantumProperty()) As Single(,)
        parameters:
        - id: properties
          type: QRG.QuantumForge.Runtime.QuantumProperty[]
        return:
          type: System.Single[,]
      overload: QRG.QuantumForge.Runtime.QuantumProperty.CorrelationMatrix*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Runtime.QuantumProperty.Measure(QRG.QuantumForge.Runtime.QuantumProperty[])
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.Measure(QRG.QuantumForge.Runtime.QuantumProperty[])
      language: CSharp
      name:
        CSharp: Measure(QuantumProperty[])
        VB: Measure(QuantumProperty())
      nameWithType:
        CSharp: QuantumProperty.Measure(QuantumProperty[])
        VB: QuantumProperty.Measure(QuantumProperty())
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.Measure(QRG.QuantumForge.Runtime.QuantumProperty[])
        VB: QRG.QuantumForge.Runtime.QuantumProperty.Measure(QRG.QuantumForge.Runtime.QuantumProperty())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Measure
        path: ''
        startLine: 494
      syntax:
        content:
          CSharp: public static int[] Measure(params QuantumProperty[] properties)
          VB: Public Shared Function Measure(ParamArray properties As QuantumProperty()) As Integer()
        parameters:
        - id: properties
          type: QRG.QuantumForge.Runtime.QuantumProperty[]
        return:
          type: System.Int32[]
      overload: QRG.QuantumForge.Runtime.QuantumProperty.Measure*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Runtime.QuantumProperty.Measure(QRG.QuantumForge.Runtime.Predicate[])
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.Measure(QRG.QuantumForge.Runtime.Predicate[])
      language: CSharp
      name:
        CSharp: Measure(Predicate[])
        VB: Measure(Predicate())
      nameWithType:
        CSharp: QuantumProperty.Measure(Predicate[])
        VB: QuantumProperty.Measure(Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.Measure(QRG.QuantumForge.Runtime.Predicate[])
        VB: QRG.QuantumForge.Runtime.QuantumProperty.Measure(QRG.QuantumForge.Runtime.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Measure
        path: ''
        startLine: 499
      syntax:
        content:
          CSharp: public static int Measure(params Predicate[] predicates)
          VB: Public Shared Function Measure(ParamArray predicates As Predicate()) As Integer
        parameters:
        - id: predicates
          type: QRG.QuantumForge.Runtime.Predicate[]
        return:
          type: System.Int32
      overload: QRG.QuantumForge.Runtime.QuantumProperty.Measure*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability
    commentId: T:QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability
    language: CSharp
    name:
      CSharp: QuantumProperty.BasisProbability
      VB: QuantumProperty.BasisProbability
    nameWithType:
      CSharp: QuantumProperty.BasisProbability
      VB: QuantumProperty.BasisProbability
    qualifiedName:
      CSharp: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability
      VB: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Runtime
    source:
      id: BasisProbability
      path: ''
      startLine: 431
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public struct BasisProbability
        VB: >-
          <Serializable>

          Public Structure BasisProbability
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability.Probability
      commentId: F:QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability.Probability
      language: CSharp
      name:
        CSharp: Probability
        VB: Probability
      nameWithType:
        CSharp: QuantumProperty.BasisProbability.Probability
        VB: QuantumProperty.BasisProbability.Probability
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability.Probability
        VB: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability.Probability
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Probability
        path: ''
        startLine: 434
      syntax:
        content:
          CSharp: public float Probability
          VB: Public Probability As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability.BasisValues
      commentId: F:QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability.BasisValues
      language: CSharp
      name:
        CSharp: BasisValues
        VB: BasisValues
      nameWithType:
        CSharp: QuantumProperty.BasisProbability.BasisValues
        VB: QuantumProperty.BasisProbability.BasisValues
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability.BasisValues
        VB: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability.BasisValues
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: BasisValues
        path: ''
        startLine: 435
      syntax:
        content:
          CSharp: public BasisValue[] BasisValues
          VB: Public BasisValues As BasisValue()
        return:
          type: QRG.QuantumForge.Runtime.BasisValue[]
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability.#ctor(System.Single,QRG.QuantumForge.Runtime.BasisValue[])
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability.#ctor(System.Single,QRG.QuantumForge.Runtime.BasisValue[])
      language: CSharp
      name:
        CSharp: BasisProbability(Single, BasisValue[])
        VB: BasisProbability(Single, BasisValue())
      nameWithType:
        CSharp: QuantumProperty.BasisProbability.BasisProbability(Single, BasisValue[])
        VB: QuantumProperty.BasisProbability.BasisProbability(Single, BasisValue())
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability.BasisProbability(System.Single, QRG.QuantumForge.Runtime.BasisValue[])
        VB: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability.BasisProbability(System.Single, QRG.QuantumForge.Runtime.BasisValue())
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: .ctor
        path: ''
        startLine: 438
      syntax:
        content:
          CSharp: public BasisProbability(float probability, BasisValue[] basisValues)
          VB: Public Sub New(probability As Single, basisValues As BasisValue())
        parameters:
        - id: probability
          type: System.Single
        - id: basisValues
          type: QRG.QuantumForge.Runtime.BasisValue[]
      overload: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability.ToString
      commentId: M:QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: QuantumProperty.BasisProbability.ToString()
        VB: QuantumProperty.BasisProbability.ToString()
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability.ToString()
        VB: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: ToString
        path: ''
        startLine: 445
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: QRG.QuantumForge.Runtime.QuantumPropertyEvent
    commentId: T:QRG.QuantumForge.Runtime.QuantumPropertyEvent
    language: CSharp
    name:
      CSharp: QuantumPropertyEvent
      VB: QuantumPropertyEvent
    nameWithType:
      CSharp: QuantumPropertyEvent
      VB: QuantumPropertyEvent
    qualifiedName:
      CSharp: QRG.QuantumForge.Runtime.QuantumPropertyEvent
      VB: QRG.QuantumForge.Runtime.QuantumPropertyEvent
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Runtime
    source:
      id: QuantumPropertyEvent
      path: ''
      startLine: 530
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class QuantumPropertyEvent : UnityEvent<QuantumProperty>
        VB: >-
          <Serializable>

          Public Class QuantumPropertyEvent

              Inherits UnityEvent(Of QuantumProperty)
    inheritance:
    - System.Object
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: QRG.QuantumForge.Runtime.QuantumPropertyTrigger
    commentId: T:QRG.QuantumForge.Runtime.QuantumPropertyTrigger
    language: CSharp
    name:
      CSharp: QuantumPropertyTrigger
      VB: QuantumPropertyTrigger
    nameWithType:
      CSharp: QuantumPropertyTrigger
      VB: QuantumPropertyTrigger
    qualifiedName:
      CSharp: QRG.QuantumForge.Runtime.QuantumPropertyTrigger
      VB: QRG.QuantumForge.Runtime.QuantumPropertyTrigger
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Runtime
    source:
      id: QuantumPropertyTrigger
      path: ''
      startLine: 533
    syntax:
      content:
        CSharp: 'public class QuantumPropertyTrigger : MonoBehaviour'
        VB: >-
          Public Class QuantumPropertyTrigger

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: QRG.QuantumForge.Runtime.Clock
    commentId: T:QRG.QuantumForge.Runtime.Clock
    language: CSharp
    name:
      CSharp: Clock
      VB: Clock
    nameWithType:
      CSharp: Clock
      VB: Clock
    qualifiedName:
      CSharp: QRG.QuantumForge.Runtime.Clock
      VB: QRG.QuantumForge.Runtime.Clock
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Runtime
    source:
      id: Clock
      path: ''
      startLine: 582
    summary: "\nRepresents a quantum clock action that applies a clock operation to quantum properties.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class Clock : MonoBehaviour, IQuantumAction
        VB: >-
          <Serializable>

          Public Class Clock

              Inherits MonoBehaviour

              Implements IQuantumAction
    inheritance:
    - System.Object
    implements:
    - QRG.QuantumForge.Runtime.IQuantumAction
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: QRG.QuantumForge.Runtime.Clock.Predicates
      commentId: P:QRG.QuantumForge.Runtime.Clock.Predicates
      language: CSharp
      name:
        CSharp: Predicates
        VB: Predicates
      nameWithType:
        CSharp: Clock.Predicates
        VB: Clock.Predicates
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.Clock.Predicates
        VB: QRG.QuantumForge.Runtime.Clock.Predicates
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Predicates
        path: ''
        startLine: 588
      summary: "\nGets or sets the predicates that determine the conditions for this action.\n"
      example: []
      syntax:
        content:
          CSharp: public Predicate[] Predicates { get; set; }
          VB: Public Property Predicates As Predicate()
        parameters: []
        return:
          type: QRG.QuantumForge.Runtime.Predicate[]
      overload: QRG.QuantumForge.Runtime.Clock.Predicates*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.Predicates
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.Clock.TargetProperties
      commentId: P:QRG.QuantumForge.Runtime.Clock.TargetProperties
      language: CSharp
      name:
        CSharp: TargetProperties
        VB: TargetProperties
      nameWithType:
        CSharp: Clock.TargetProperties
        VB: Clock.TargetProperties
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.Clock.TargetProperties
        VB: QRG.QuantumForge.Runtime.Clock.TargetProperties
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: TargetProperties
        path: ''
        startLine: 594
      summary: "\nGets or sets the quantum properties that this action targets.\n"
      example: []
      syntax:
        content:
          CSharp: public QuantumProperty[] TargetProperties { get; set; }
          VB: Public Property TargetProperties As QuantumProperty()
        parameters: []
        return:
          type: QRG.QuantumForge.Runtime.QuantumProperty[]
      overload: QRG.QuantumForge.Runtime.Clock.TargetProperties*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.TargetProperties
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.Clock.fraction
      commentId: F:QRG.QuantumForge.Runtime.Clock.fraction
      language: CSharp
      name:
        CSharp: fraction
        VB: fraction
      nameWithType:
        CSharp: Clock.fraction
        VB: Clock.fraction
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.Clock.fraction
        VB: QRG.QuantumForge.Runtime.Clock.fraction
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: fraction
        path: ''
        startLine: 601
      summary: "\nThe fraction of the clock cycle to apply.\n"
      example: []
      syntax:
        content:
          CSharp: public float fraction
          VB: Public fraction As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.Clock.apply
      commentId: M:QRG.QuantumForge.Runtime.Clock.apply
      language: CSharp
      name:
        CSharp: apply()
        VB: apply()
      nameWithType:
        CSharp: Clock.apply()
        VB: Clock.apply()
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.Clock.apply()
        VB: QRG.QuantumForge.Runtime.Clock.apply()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: apply
        path: ''
        startLine: 606
      summary: "\nApplies the clock operation to the target quantum properties.\n"
      example: []
      syntax:
        content:
          CSharp: public void apply()
          VB: Public Sub apply
      overload: QRG.QuantumForge.Runtime.Clock.apply*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.apply
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: QRG.QuantumForge.Runtime.Cycle
    commentId: T:QRG.QuantumForge.Runtime.Cycle
    language: CSharp
    name:
      CSharp: Cycle
      VB: Cycle
    nameWithType:
      CSharp: Cycle
      VB: Cycle
    qualifiedName:
      CSharp: QRG.QuantumForge.Runtime.Cycle
      VB: QRG.QuantumForge.Runtime.Cycle
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Runtime
    source:
      id: Cycle
      path: ''
      startLine: 644
    summary: "\nRepresents a quantum cycle action that applies a cycle operation to quantum properties.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class Cycle : MonoBehaviour, IQuantumAction
        VB: >-
          <Serializable>

          Public Class Cycle

              Inherits MonoBehaviour

              Implements IQuantumAction
    inheritance:
    - System.Object
    implements:
    - QRG.QuantumForge.Runtime.IQuantumAction
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: QRG.QuantumForge.Runtime.Cycle.Predicates
      commentId: P:QRG.QuantumForge.Runtime.Cycle.Predicates
      language: CSharp
      name:
        CSharp: Predicates
        VB: Predicates
      nameWithType:
        CSharp: Cycle.Predicates
        VB: Cycle.Predicates
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.Cycle.Predicates
        VB: QRG.QuantumForge.Runtime.Cycle.Predicates
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Predicates
        path: ''
        startLine: 650
      summary: "\nGets or sets the predicates that determine the conditions for this action.\n"
      example: []
      syntax:
        content:
          CSharp: public Predicate[] Predicates { get; set; }
          VB: Public Property Predicates As Predicate()
        parameters: []
        return:
          type: QRG.QuantumForge.Runtime.Predicate[]
      overload: QRG.QuantumForge.Runtime.Cycle.Predicates*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.Predicates
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.Cycle.TargetProperties
      commentId: P:QRG.QuantumForge.Runtime.Cycle.TargetProperties
      language: CSharp
      name:
        CSharp: TargetProperties
        VB: TargetProperties
      nameWithType:
        CSharp: Cycle.TargetProperties
        VB: Cycle.TargetProperties
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.Cycle.TargetProperties
        VB: QRG.QuantumForge.Runtime.Cycle.TargetProperties
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: TargetProperties
        path: ''
        startLine: 656
      summary: "\nGets or sets the quantum properties that this action targets.\n"
      example: []
      syntax:
        content:
          CSharp: public QuantumProperty[] TargetProperties { get; set; }
          VB: Public Property TargetProperties As QuantumProperty()
        parameters: []
        return:
          type: QRG.QuantumForge.Runtime.QuantumProperty[]
      overload: QRG.QuantumForge.Runtime.Cycle.TargetProperties*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.TargetProperties
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.Cycle.apply
      commentId: M:QRG.QuantumForge.Runtime.Cycle.apply
      language: CSharp
      name:
        CSharp: apply()
        VB: apply()
      nameWithType:
        CSharp: Cycle.apply()
        VB: Cycle.apply()
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.Cycle.apply()
        VB: QRG.QuantumForge.Runtime.Cycle.apply()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: apply
        path: ''
        startLine: 668
      summary: "\nApplies the cycle operation to the target quantum properties.\n"
      example: []
      syntax:
        content:
          CSharp: public void apply()
          VB: Public Sub apply
      overload: QRG.QuantumForge.Runtime.Cycle.apply*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.apply
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: QRG.QuantumForge.Runtime.Hadamard
    commentId: T:QRG.QuantumForge.Runtime.Hadamard
    language: CSharp
    name:
      CSharp: Hadamard
      VB: Hadamard
    nameWithType:
      CSharp: Hadamard
      VB: Hadamard
    qualifiedName:
      CSharp: QRG.QuantumForge.Runtime.Hadamard
      VB: QRG.QuantumForge.Runtime.Hadamard
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Runtime
    source:
      id: Hadamard
      path: ''
      startLine: 708
    summary: "\nRepresents a quantum Hadamard action that applies a Hadamard operation to quantum properties.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class Hadamard : MonoBehaviour, IQuantumAction
        VB: >-
          <Serializable>

          Public Class Hadamard

              Inherits MonoBehaviour

              Implements IQuantumAction
    inheritance:
    - System.Object
    implements:
    - QRG.QuantumForge.Runtime.IQuantumAction
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: QRG.QuantumForge.Runtime.Hadamard.Predicates
      commentId: P:QRG.QuantumForge.Runtime.Hadamard.Predicates
      language: CSharp
      name:
        CSharp: Predicates
        VB: Predicates
      nameWithType:
        CSharp: Hadamard.Predicates
        VB: Hadamard.Predicates
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.Hadamard.Predicates
        VB: QRG.QuantumForge.Runtime.Hadamard.Predicates
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Predicates
        path: ''
        startLine: 714
      summary: "\nGets or sets the predicates that determine the conditions for this action.\n"
      example: []
      syntax:
        content:
          CSharp: public Predicate[] Predicates { get; set; }
          VB: Public Property Predicates As Predicate()
        parameters: []
        return:
          type: QRG.QuantumForge.Runtime.Predicate[]
      overload: QRG.QuantumForge.Runtime.Hadamard.Predicates*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.Predicates
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.Hadamard.TargetProperties
      commentId: P:QRG.QuantumForge.Runtime.Hadamard.TargetProperties
      language: CSharp
      name:
        CSharp: TargetProperties
        VB: TargetProperties
      nameWithType:
        CSharp: Hadamard.TargetProperties
        VB: Hadamard.TargetProperties
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.Hadamard.TargetProperties
        VB: QRG.QuantumForge.Runtime.Hadamard.TargetProperties
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: TargetProperties
        path: ''
        startLine: 720
      summary: "\nGets or sets the quantum properties that this action targets.\n"
      example: []
      syntax:
        content:
          CSharp: public QuantumProperty[] TargetProperties { get; set; }
          VB: Public Property TargetProperties As QuantumProperty()
        parameters: []
        return:
          type: QRG.QuantumForge.Runtime.QuantumProperty[]
      overload: QRG.QuantumForge.Runtime.Hadamard.TargetProperties*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.TargetProperties
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.Hadamard.apply
      commentId: M:QRG.QuantumForge.Runtime.Hadamard.apply
      language: CSharp
      name:
        CSharp: apply()
        VB: apply()
      nameWithType:
        CSharp: Hadamard.apply()
        VB: Hadamard.apply()
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.Hadamard.apply()
        VB: QRG.QuantumForge.Runtime.Hadamard.apply()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: apply
        path: ''
        startLine: 726
      summary: "\nApplies the Hadamard operation to the target quantum properties.\n"
      example: []
      syntax:
        content:
          CSharp: public void apply()
          VB: Public Sub apply
      overload: QRG.QuantumForge.Runtime.Hadamard.apply*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.apply
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: QRG.QuantumForge.Runtime.InverseHadamard
    commentId: T:QRG.QuantumForge.Runtime.InverseHadamard
    language: CSharp
    name:
      CSharp: InverseHadamard
      VB: InverseHadamard
    nameWithType:
      CSharp: InverseHadamard
      VB: InverseHadamard
    qualifiedName:
      CSharp: QRG.QuantumForge.Runtime.InverseHadamard
      VB: QRG.QuantumForge.Runtime.InverseHadamard
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Runtime
    source:
      id: InverseHadamard
      path: ''
      startLine: 769
    summary: "\nRepresents a quantum Inverse Hadamard action that applies an inverse Hadamard operation to quantum properties.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class InverseHadamard : MonoBehaviour, IQuantumAction
        VB: >-
          <Serializable>

          Public Class InverseHadamard

              Inherits MonoBehaviour

              Implements IQuantumAction
    inheritance:
    - System.Object
    implements:
    - QRG.QuantumForge.Runtime.IQuantumAction
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: QRG.QuantumForge.Runtime.InverseHadamard.Predicates
      commentId: P:QRG.QuantumForge.Runtime.InverseHadamard.Predicates
      language: CSharp
      name:
        CSharp: Predicates
        VB: Predicates
      nameWithType:
        CSharp: InverseHadamard.Predicates
        VB: InverseHadamard.Predicates
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.InverseHadamard.Predicates
        VB: QRG.QuantumForge.Runtime.InverseHadamard.Predicates
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Predicates
        path: ''
        startLine: 775
      summary: "\nGets or sets the predicates that determine the conditions for this action.\n"
      example: []
      syntax:
        content:
          CSharp: public Predicate[] Predicates { get; set; }
          VB: Public Property Predicates As Predicate()
        parameters: []
        return:
          type: QRG.QuantumForge.Runtime.Predicate[]
      overload: QRG.QuantumForge.Runtime.InverseHadamard.Predicates*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.Predicates
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.InverseHadamard.TargetProperties
      commentId: P:QRG.QuantumForge.Runtime.InverseHadamard.TargetProperties
      language: CSharp
      name:
        CSharp: TargetProperties
        VB: TargetProperties
      nameWithType:
        CSharp: InverseHadamard.TargetProperties
        VB: InverseHadamard.TargetProperties
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.InverseHadamard.TargetProperties
        VB: QRG.QuantumForge.Runtime.InverseHadamard.TargetProperties
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: TargetProperties
        path: ''
        startLine: 781
      summary: "\nGets or sets the quantum properties that this action targets.\n"
      example: []
      syntax:
        content:
          CSharp: public QuantumProperty[] TargetProperties { get; set; }
          VB: Public Property TargetProperties As QuantumProperty()
        parameters: []
        return:
          type: QRG.QuantumForge.Runtime.QuantumProperty[]
      overload: QRG.QuantumForge.Runtime.InverseHadamard.TargetProperties*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.TargetProperties
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.InverseHadamard.apply
      commentId: M:QRG.QuantumForge.Runtime.InverseHadamard.apply
      language: CSharp
      name:
        CSharp: apply()
        VB: apply()
      nameWithType:
        CSharp: InverseHadamard.apply()
        VB: InverseHadamard.apply()
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.InverseHadamard.apply()
        VB: QRG.QuantumForge.Runtime.InverseHadamard.apply()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: apply
        path: ''
        startLine: 787
      summary: "\nApplies the inverse Hadamard operation to the target quantum properties.\n"
      example: []
      syntax:
        content:
          CSharp: public void apply()
          VB: Public Sub apply
      overload: QRG.QuantumForge.Runtime.InverseHadamard.apply*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.apply
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: QRG.QuantumForge.Runtime.ISwap
    commentId: T:QRG.QuantumForge.Runtime.ISwap
    language: CSharp
    name:
      CSharp: ISwap
      VB: ISwap
    nameWithType:
      CSharp: ISwap
      VB: ISwap
    qualifiedName:
      CSharp: QRG.QuantumForge.Runtime.ISwap
      VB: QRG.QuantumForge.Runtime.ISwap
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Runtime
    source:
      id: ISwap
      path: ''
      startLine: 810
    summary: "\nRepresents a quantum ISwap action that applies an ISwap operation to quantum properties.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class ISwap : MonoBehaviour, IQuantumAction
        VB: >-
          <Serializable>

          Public Class ISwap

              Inherits MonoBehaviour

              Implements IQuantumAction
    inheritance:
    - System.Object
    implements:
    - QRG.QuantumForge.Runtime.IQuantumAction
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: QRG.QuantumForge.Runtime.ISwap.Predicates
      commentId: P:QRG.QuantumForge.Runtime.ISwap.Predicates
      language: CSharp
      name:
        CSharp: Predicates
        VB: Predicates
      nameWithType:
        CSharp: ISwap.Predicates
        VB: ISwap.Predicates
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.ISwap.Predicates
        VB: QRG.QuantumForge.Runtime.ISwap.Predicates
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Predicates
        path: ''
        startLine: 816
      summary: "\nGets or sets the predicates that determine the conditions for this action.\n"
      example: []
      syntax:
        content:
          CSharp: public Predicate[] Predicates { get; set; }
          VB: Public Property Predicates As Predicate()
        parameters: []
        return:
          type: QRG.QuantumForge.Runtime.Predicate[]
      overload: QRG.QuantumForge.Runtime.ISwap.Predicates*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.Predicates
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.ISwap.TargetProperties
      commentId: P:QRG.QuantumForge.Runtime.ISwap.TargetProperties
      language: CSharp
      name:
        CSharp: TargetProperties
        VB: TargetProperties
      nameWithType:
        CSharp: ISwap.TargetProperties
        VB: ISwap.TargetProperties
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.ISwap.TargetProperties
        VB: QRG.QuantumForge.Runtime.ISwap.TargetProperties
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: TargetProperties
        path: ''
        startLine: 822
      summary: "\nGets or sets the quantum properties that this action targets.\n"
      example: []
      syntax:
        content:
          CSharp: public QuantumProperty[] TargetProperties { get; set; }
          VB: Public Property TargetProperties As QuantumProperty()
        parameters: []
        return:
          type: QRG.QuantumForge.Runtime.QuantumProperty[]
      overload: QRG.QuantumForge.Runtime.ISwap.TargetProperties*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.TargetProperties
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.ISwap.fraction
      commentId: F:QRG.QuantumForge.Runtime.ISwap.fraction
      language: CSharp
      name:
        CSharp: fraction
        VB: fraction
      nameWithType:
        CSharp: ISwap.fraction
        VB: ISwap.fraction
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.ISwap.fraction
        VB: QRG.QuantumForge.Runtime.ISwap.fraction
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: fraction
        path: ''
        startLine: 829
      summary: "\nThe fraction of the ISwap operation to apply.\n"
      example: []
      syntax:
        content:
          CSharp: public float fraction
          VB: Public fraction As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.ISwap.apply
      commentId: M:QRG.QuantumForge.Runtime.ISwap.apply
      language: CSharp
      name:
        CSharp: apply()
        VB: apply()
      nameWithType:
        CSharp: ISwap.apply()
        VB: ISwap.apply()
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.ISwap.apply()
        VB: QRG.QuantumForge.Runtime.ISwap.apply()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: apply
        path: ''
        startLine: 834
      summary: "\nApplies the ISwap operation to the target quantum properties.\n"
      example: []
      syntax:
        content:
          CSharp: public void apply()
          VB: Public Sub apply
      overload: QRG.QuantumForge.Runtime.ISwap.apply*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.apply
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: QRG.QuantumForge.Runtime.MeasurePredicateEvent
    commentId: T:QRG.QuantumForge.Runtime.MeasurePredicateEvent
    language: CSharp
    name:
      CSharp: MeasurePredicateEvent
      VB: MeasurePredicateEvent
    nameWithType:
      CSharp: MeasurePredicateEvent
      VB: MeasurePredicateEvent
    qualifiedName:
      CSharp: QRG.QuantumForge.Runtime.MeasurePredicateEvent
      VB: QRG.QuantumForge.Runtime.MeasurePredicateEvent
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Runtime
    source:
      id: MeasurePredicateEvent
      path: ''
      startLine: 872
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class MeasurePredicateEvent : UnityEvent<bool>
        VB: >-
          <Serializable>

          Public Class MeasurePredicateEvent

              Inherits UnityEvent(Of Boolean)
    inheritance:
    - System.Object
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: QRG.QuantumForge.Runtime.MeasurePredicates
    commentId: T:QRG.QuantumForge.Runtime.MeasurePredicates
    language: CSharp
    name:
      CSharp: MeasurePredicates
      VB: MeasurePredicates
    nameWithType:
      CSharp: MeasurePredicates
      VB: MeasurePredicates
    qualifiedName:
      CSharp: QRG.QuantumForge.Runtime.MeasurePredicates
      VB: QRG.QuantumForge.Runtime.MeasurePredicates
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Runtime
    source:
      id: MeasurePredicates
      path: ''
      startLine: 878
    summary: "\nRepresents a quantum action that measures predicates and triggers events.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class MeasurePredicates : MonoBehaviour, IQuantumAction
        VB: >-
          <Serializable>

          Public Class MeasurePredicates

              Inherits MonoBehaviour

              Implements IQuantumAction
    inheritance:
    - System.Object
    implements:
    - QRG.QuantumForge.Runtime.IQuantumAction
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: QRG.QuantumForge.Runtime.MeasurePredicates.OnMeasure
      commentId: F:QRG.QuantumForge.Runtime.MeasurePredicates.OnMeasure
      language: CSharp
      name:
        CSharp: OnMeasure
        VB: OnMeasure
      nameWithType:
        CSharp: MeasurePredicates.OnMeasure
        VB: MeasurePredicates.OnMeasure
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.MeasurePredicates.OnMeasure
        VB: QRG.QuantumForge.Runtime.MeasurePredicates.OnMeasure
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: OnMeasure
        path: ''
        startLine: 885
      summary: "\nEvent triggered when a measurement is performed.\n"
      example: []
      syntax:
        content:
          CSharp: public UnityEvent OnMeasure
          VB: Public OnMeasure As UnityEvent
        return:
          type: UnityEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.MeasurePredicates.OnMeasurePredicates
      commentId: F:QRG.QuantumForge.Runtime.MeasurePredicates.OnMeasurePredicates
      language: CSharp
      name:
        CSharp: OnMeasurePredicates
        VB: OnMeasurePredicates
      nameWithType:
        CSharp: MeasurePredicates.OnMeasurePredicates
        VB: MeasurePredicates.OnMeasurePredicates
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.MeasurePredicates.OnMeasurePredicates
        VB: QRG.QuantumForge.Runtime.MeasurePredicates.OnMeasurePredicates
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: OnMeasurePredicates
        path: ''
        startLine: 891
      summary: "\nEvent triggered with a QuantumProperty when a measurement is performed.\n"
      example: []
      syntax:
        content:
          CSharp: public MeasurePredicateEvent OnMeasurePredicates
          VB: Public OnMeasurePredicates As MeasurePredicateEvent
        return:
          type: QRG.QuantumForge.Runtime.MeasurePredicateEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.MeasurePredicates.Predicates
      commentId: P:QRG.QuantumForge.Runtime.MeasurePredicates.Predicates
      language: CSharp
      name:
        CSharp: Predicates
        VB: Predicates
      nameWithType:
        CSharp: MeasurePredicates.Predicates
        VB: MeasurePredicates.Predicates
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.MeasurePredicates.Predicates
        VB: QRG.QuantumForge.Runtime.MeasurePredicates.Predicates
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Predicates
        path: ''
        startLine: 896
      syntax:
        content:
          CSharp: public Predicate[] Predicates { get; set; }
          VB: Public Property Predicates As Predicate()
        parameters: []
        return:
          type: QRG.QuantumForge.Runtime.Predicate[]
      overload: QRG.QuantumForge.Runtime.MeasurePredicates.Predicates*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.Predicates
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.MeasurePredicates.TargetProperties
      commentId: P:QRG.QuantumForge.Runtime.MeasurePredicates.TargetProperties
      language: CSharp
      name:
        CSharp: TargetProperties
        VB: TargetProperties
      nameWithType:
        CSharp: MeasurePredicates.TargetProperties
        VB: MeasurePredicates.TargetProperties
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.MeasurePredicates.TargetProperties
        VB: QRG.QuantumForge.Runtime.MeasurePredicates.TargetProperties
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: TargetProperties
        path: ''
        startLine: 902
      summary: "\nGets or sets the quantum properties that this action targets.\n"
      example: []
      syntax:
        content:
          CSharp: public QuantumProperty[] TargetProperties { get; set; }
          VB: Public Property TargetProperties As QuantumProperty()
        parameters: []
        return:
          type: QRG.QuantumForge.Runtime.QuantumProperty[]
      overload: QRG.QuantumForge.Runtime.MeasurePredicates.TargetProperties*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.TargetProperties
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.MeasurePredicates.LastResult
      commentId: P:QRG.QuantumForge.Runtime.MeasurePredicates.LastResult
      language: CSharp
      name:
        CSharp: LastResult
        VB: LastResult
      nameWithType:
        CSharp: MeasurePredicates.LastResult
        VB: MeasurePredicates.LastResult
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.MeasurePredicates.LastResult
        VB: QRG.QuantumForge.Runtime.MeasurePredicates.LastResult
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: LastResult
        path: ''
        startLine: 907
      summary: "\nGets the last result of the measurement.\n"
      example: []
      syntax:
        content:
          CSharp: public int LastResult { get; }
          VB: Public ReadOnly Property LastResult As Integer
        parameters: []
        return:
          type: System.Int32
      overload: QRG.QuantumForge.Runtime.MeasurePredicates.LastResult*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: QRG.QuantumForge.Runtime.MeasurePredicates.apply
      commentId: M:QRG.QuantumForge.Runtime.MeasurePredicates.apply
      language: CSharp
      name:
        CSharp: apply()
        VB: apply()
      nameWithType:
        CSharp: MeasurePredicates.apply()
        VB: MeasurePredicates.apply()
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.MeasurePredicates.apply()
        VB: QRG.QuantumForge.Runtime.MeasurePredicates.apply()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: apply
        path: ''
        startLine: 913
      summary: "\nApplies the measurement action to the target quantum properties.\n"
      example: []
      syntax:
        content:
          CSharp: public void apply()
          VB: Public Sub apply
      overload: QRG.QuantumForge.Runtime.MeasurePredicates.apply*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.apply
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: QRG.QuantumForge.Runtime.MeasureProperties
    commentId: T:QRG.QuantumForge.Runtime.MeasureProperties
    language: CSharp
    name:
      CSharp: MeasureProperties
      VB: MeasureProperties
    nameWithType:
      CSharp: MeasureProperties
      VB: MeasureProperties
    qualifiedName:
      CSharp: QRG.QuantumForge.Runtime.MeasureProperties
      VB: QRG.QuantumForge.Runtime.MeasureProperties
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Runtime
    source:
      id: MeasureProperties
      path: ''
      startLine: 951
    summary: "\nRepresents a quantum action that measures quantum properties and triggers events.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class MeasureProperties : MonoBehaviour, IQuantumAction
        VB: >-
          <Serializable>

          Public Class MeasureProperties

              Inherits MonoBehaviour

              Implements IQuantumAction
    inheritance:
    - System.Object
    implements:
    - QRG.QuantumForge.Runtime.IQuantumAction
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: QRG.QuantumForge.Runtime.MeasureProperties.OnMeasure
      commentId: F:QRG.QuantumForge.Runtime.MeasureProperties.OnMeasure
      language: CSharp
      name:
        CSharp: OnMeasure
        VB: OnMeasure
      nameWithType:
        CSharp: MeasureProperties.OnMeasure
        VB: MeasureProperties.OnMeasure
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.MeasureProperties.OnMeasure
        VB: QRG.QuantumForge.Runtime.MeasureProperties.OnMeasure
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: OnMeasure
        path: ''
        startLine: 958
      summary: "\nEvent triggered when a measurement is performed.\n"
      example: []
      syntax:
        content:
          CSharp: public UnityEvent OnMeasure
          VB: Public OnMeasure As UnityEvent
        return:
          type: UnityEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.MeasureProperties.OnMeasureQuantumProperty
      commentId: F:QRG.QuantumForge.Runtime.MeasureProperties.OnMeasureQuantumProperty
      language: CSharp
      name:
        CSharp: OnMeasureQuantumProperty
        VB: OnMeasureQuantumProperty
      nameWithType:
        CSharp: MeasureProperties.OnMeasureQuantumProperty
        VB: MeasureProperties.OnMeasureQuantumProperty
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.MeasureProperties.OnMeasureQuantumProperty
        VB: QRG.QuantumForge.Runtime.MeasureProperties.OnMeasureQuantumProperty
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: OnMeasureQuantumProperty
        path: ''
        startLine: 964
      summary: "\nEvent triggered with a QuantumProperty when a measurement is performed.\n"
      example: []
      syntax:
        content:
          CSharp: public QuantumPropertyEvent OnMeasureQuantumProperty
          VB: Public OnMeasureQuantumProperty As QuantumPropertyEvent
        return:
          type: QRG.QuantumForge.Runtime.QuantumPropertyEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.MeasureProperties.Predicates
      commentId: P:QRG.QuantumForge.Runtime.MeasureProperties.Predicates
      language: CSharp
      name:
        CSharp: Predicates
        VB: Predicates
      nameWithType:
        CSharp: MeasureProperties.Predicates
        VB: MeasureProperties.Predicates
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.MeasureProperties.Predicates
        VB: QRG.QuantumForge.Runtime.MeasureProperties.Predicates
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Predicates
        path: ''
        startLine: 969
      summary: "\nGets or sets the predicates that determine the conditions for this action.\n"
      example: []
      syntax:
        content:
          CSharp: public Predicate[] Predicates { get; set; }
          VB: Public Property Predicates As Predicate()
        parameters: []
        return:
          type: QRG.QuantumForge.Runtime.Predicate[]
      overload: QRG.QuantumForge.Runtime.MeasureProperties.Predicates*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.Predicates
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.MeasureProperties.TargetProperties
      commentId: P:QRG.QuantumForge.Runtime.MeasureProperties.TargetProperties
      language: CSharp
      name:
        CSharp: TargetProperties
        VB: TargetProperties
      nameWithType:
        CSharp: MeasureProperties.TargetProperties
        VB: MeasureProperties.TargetProperties
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.MeasureProperties.TargetProperties
        VB: QRG.QuantumForge.Runtime.MeasureProperties.TargetProperties
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: TargetProperties
        path: ''
        startLine: 975
      summary: "\nGets or sets the quantum properties that this action targets.\n"
      example: []
      syntax:
        content:
          CSharp: public QuantumProperty[] TargetProperties { get; set; }
          VB: Public Property TargetProperties As QuantumProperty()
        parameters: []
        return:
          type: QRG.QuantumForge.Runtime.QuantumProperty[]
      overload: QRG.QuantumForge.Runtime.MeasureProperties.TargetProperties*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.TargetProperties
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.MeasureProperties.LastResult
      commentId: P:QRG.QuantumForge.Runtime.MeasureProperties.LastResult
      language: CSharp
      name:
        CSharp: LastResult
        VB: LastResult
      nameWithType:
        CSharp: MeasureProperties.LastResult
        VB: MeasureProperties.LastResult
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.MeasureProperties.LastResult
        VB: QRG.QuantumForge.Runtime.MeasureProperties.LastResult
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: LastResult
        path: ''
        startLine: 981
      summary: "\nGets the last results of the measurements.\n"
      example: []
      syntax:
        content:
          CSharp: public int[] LastResult { get; }
          VB: Public ReadOnly Property LastResult As Integer()
        parameters: []
        return:
          type: System.Int32[]
      overload: QRG.QuantumForge.Runtime.MeasureProperties.LastResult*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: QRG.QuantumForge.Runtime.MeasureProperties.apply
      commentId: M:QRG.QuantumForge.Runtime.MeasureProperties.apply
      language: CSharp
      name:
        CSharp: apply()
        VB: apply()
      nameWithType:
        CSharp: MeasureProperties.apply()
        VB: MeasureProperties.apply()
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.MeasureProperties.apply()
        VB: QRG.QuantumForge.Runtime.MeasureProperties.apply()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: apply
        path: ''
        startLine: 987
      summary: "\nApplies the measurement action to the target quantum properties.\n"
      example: []
      syntax:
        content:
          CSharp: public void apply()
          VB: Public Sub apply
      overload: QRG.QuantumForge.Runtime.MeasureProperties.apply*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.apply
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: QRG.QuantumForge.Runtime.NCycle
    commentId: T:QRG.QuantumForge.Runtime.NCycle
    language: CSharp
    name:
      CSharp: NCycle
      VB: NCycle
    nameWithType:
      CSharp: NCycle
      VB: NCycle
    qualifiedName:
      CSharp: QRG.QuantumForge.Runtime.NCycle
      VB: QRG.QuantumForge.Runtime.NCycle
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Runtime
    source:
      id: NCycle
      path: ''
      startLine: 1031
    summary: "\nRepresents a quantum action that applies an NCycle operation to quantum properties.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class NCycle : MonoBehaviour, IQuantumAction
        VB: >-
          <Serializable>

          Public Class NCycle

              Inherits MonoBehaviour

              Implements IQuantumAction
    inheritance:
    - System.Object
    implements:
    - QRG.QuantumForge.Runtime.IQuantumAction
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: QRG.QuantumForge.Runtime.NCycle.Predicates
      commentId: P:QRG.QuantumForge.Runtime.NCycle.Predicates
      language: CSharp
      name:
        CSharp: Predicates
        VB: Predicates
      nameWithType:
        CSharp: NCycle.Predicates
        VB: NCycle.Predicates
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.NCycle.Predicates
        VB: QRG.QuantumForge.Runtime.NCycle.Predicates
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Predicates
        path: ''
        startLine: 1037
      summary: "\nGets or sets the predicates that determine the conditions for this action.\n"
      example: []
      syntax:
        content:
          CSharp: public Predicate[] Predicates { get; set; }
          VB: Public Property Predicates As Predicate()
        parameters: []
        return:
          type: QRG.QuantumForge.Runtime.Predicate[]
      overload: QRG.QuantumForge.Runtime.NCycle.Predicates*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.Predicates
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.NCycle.TargetProperties
      commentId: P:QRG.QuantumForge.Runtime.NCycle.TargetProperties
      language: CSharp
      name:
        CSharp: TargetProperties
        VB: TargetProperties
      nameWithType:
        CSharp: NCycle.TargetProperties
        VB: NCycle.TargetProperties
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.NCycle.TargetProperties
        VB: QRG.QuantumForge.Runtime.NCycle.TargetProperties
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: TargetProperties
        path: ''
        startLine: 1043
      summary: "\nGets or sets the quantum properties that this action targets.\n"
      example: []
      syntax:
        content:
          CSharp: public QuantumProperty[] TargetProperties { get; set; }
          VB: Public Property TargetProperties As QuantumProperty()
        parameters: []
        return:
          type: QRG.QuantumForge.Runtime.QuantumProperty[]
      overload: QRG.QuantumForge.Runtime.NCycle.TargetProperties*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.TargetProperties
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.NCycle.apply
      commentId: M:QRG.QuantumForge.Runtime.NCycle.apply
      language: CSharp
      name:
        CSharp: apply()
        VB: apply()
      nameWithType:
        CSharp: NCycle.apply()
        VB: NCycle.apply()
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.NCycle.apply()
        VB: QRG.QuantumForge.Runtime.NCycle.apply()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: apply
        path: ''
        startLine: 1049
      summary: "\nApplies the NCycle operation to the target quantum properties.\n"
      example: []
      syntax:
        content:
          CSharp: public void apply()
          VB: Public Sub apply
      overload: QRG.QuantumForge.Runtime.NCycle.apply*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.apply
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: QRG.QuantumForge.Runtime.PhaseRotate
    commentId: T:QRG.QuantumForge.Runtime.PhaseRotate
    language: CSharp
    name:
      CSharp: PhaseRotate
      VB: PhaseRotate
    nameWithType:
      CSharp: PhaseRotate
      VB: PhaseRotate
    qualifiedName:
      CSharp: QRG.QuantumForge.Runtime.PhaseRotate
      VB: QRG.QuantumForge.Runtime.PhaseRotate
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Runtime
    source:
      id: PhaseRotate
      path: ''
      startLine: 1091
    summary: "\nRepresents a quantum action that applies a phase rotation to quantum properties.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class PhaseRotate : MonoBehaviour, IQuantumAction
        VB: >-
          <Serializable>

          Public Class PhaseRotate

              Inherits MonoBehaviour

              Implements IQuantumAction
    inheritance:
    - System.Object
    implements:
    - QRG.QuantumForge.Runtime.IQuantumAction
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: QRG.QuantumForge.Runtime.PhaseRotate.Predicates
      commentId: P:QRG.QuantumForge.Runtime.PhaseRotate.Predicates
      language: CSharp
      name:
        CSharp: Predicates
        VB: Predicates
      nameWithType:
        CSharp: PhaseRotate.Predicates
        VB: PhaseRotate.Predicates
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.PhaseRotate.Predicates
        VB: QRG.QuantumForge.Runtime.PhaseRotate.Predicates
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Predicates
        path: ''
        startLine: 1100
      syntax:
        content:
          CSharp: public Predicate[] Predicates { get; set; }
          VB: Public Property Predicates As Predicate()
        parameters: []
        return:
          type: QRG.QuantumForge.Runtime.Predicate[]
      overload: QRG.QuantumForge.Runtime.PhaseRotate.Predicates*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.Predicates
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.PhaseRotate.TargetProperties
      commentId: P:QRG.QuantumForge.Runtime.PhaseRotate.TargetProperties
      language: CSharp
      name:
        CSharp: TargetProperties
        VB: TargetProperties
      nameWithType:
        CSharp: PhaseRotate.TargetProperties
        VB: PhaseRotate.TargetProperties
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.PhaseRotate.TargetProperties
        VB: QRG.QuantumForge.Runtime.PhaseRotate.TargetProperties
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: TargetProperties
        path: ''
        startLine: 1109
      summary: "\nGets or sets the quantum properties that this action targets.\n"
      example: []
      syntax:
        content:
          CSharp: public QuantumProperty[] TargetProperties { get; set; }
          VB: Public Property TargetProperties As QuantumProperty()
        parameters: []
        return:
          type: QRG.QuantumForge.Runtime.QuantumProperty[]
      overload: QRG.QuantumForge.Runtime.PhaseRotate.TargetProperties*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.TargetProperties
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.PhaseRotate.Radians
      commentId: P:QRG.QuantumForge.Runtime.PhaseRotate.Radians
      language: CSharp
      name:
        CSharp: Radians
        VB: Radians
      nameWithType:
        CSharp: PhaseRotate.Radians
        VB: PhaseRotate.Radians
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.PhaseRotate.Radians
        VB: QRG.QuantumForge.Runtime.PhaseRotate.Radians
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Radians
        path: ''
        startLine: 1119
      summary: "\nGets or sets the angle of rotation in radians.\n"
      example: []
      syntax:
        content:
          CSharp: public float Radians { get; set; }
          VB: Public Property Radians As Single
        parameters: []
        return:
          type: System.Single
      overload: QRG.QuantumForge.Runtime.PhaseRotate.Radians*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.PhaseRotate.apply
      commentId: M:QRG.QuantumForge.Runtime.PhaseRotate.apply
      language: CSharp
      name:
        CSharp: apply()
        VB: apply()
      nameWithType:
        CSharp: PhaseRotate.apply()
        VB: PhaseRotate.apply()
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.PhaseRotate.apply()
        VB: QRG.QuantumForge.Runtime.PhaseRotate.apply()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: apply
        path: ''
        startLine: 1140
      summary: "\nApplies the phase rotation to the target quantum properties.\n"
      example: []
      syntax:
        content:
          CSharp: public void apply()
          VB: Public Sub apply
      overload: QRG.QuantumForge.Runtime.PhaseRotate.apply*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.apply
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: QRG.QuantumForge.Runtime.IQuantumAction
    commentId: T:QRG.QuantumForge.Runtime.IQuantumAction
    language: CSharp
    name:
      CSharp: IQuantumAction
      VB: IQuantumAction
    nameWithType:
      CSharp: IQuantumAction
      VB: IQuantumAction
    qualifiedName:
      CSharp: QRG.QuantumForge.Runtime.IQuantumAction
      VB: QRG.QuantumForge.Runtime.IQuantumAction
    type: Interface
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Runtime
    source:
      id: IQuantumAction
      path: ''
      startLine: 1178
    summary: "\nDefines the interface for quantum actions that can be applied to quantum properties.\n"
    example: []
    syntax:
      content:
        CSharp: public interface IQuantumAction
        VB: Public Interface IQuantumAction
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: QRG.QuantumForge.Runtime.IQuantumAction.Predicates
      commentId: P:QRG.QuantumForge.Runtime.IQuantumAction.Predicates
      language: CSharp
      name:
        CSharp: Predicates
        VB: Predicates
      nameWithType:
        CSharp: IQuantumAction.Predicates
        VB: IQuantumAction.Predicates
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.IQuantumAction.Predicates
        VB: QRG.QuantumForge.Runtime.IQuantumAction.Predicates
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Predicates
        path: ''
        startLine: 1183
      summary: "\nGets or sets the predicates that determine the conditions for this action.\n"
      example: []
      syntax:
        content:
          CSharp: Predicate[] Predicates { get; set; }
          VB: Property Predicates As Predicate()
        parameters: []
        return:
          type: QRG.QuantumForge.Runtime.Predicate[]
      overload: QRG.QuantumForge.Runtime.IQuantumAction.Predicates*
      modifiers:
        CSharp:
        - get
        - set
        VB: []
    - id: QRG.QuantumForge.Runtime.IQuantumAction.TargetProperties
      commentId: P:QRG.QuantumForge.Runtime.IQuantumAction.TargetProperties
      language: CSharp
      name:
        CSharp: TargetProperties
        VB: TargetProperties
      nameWithType:
        CSharp: IQuantumAction.TargetProperties
        VB: IQuantumAction.TargetProperties
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.IQuantumAction.TargetProperties
        VB: QRG.QuantumForge.Runtime.IQuantumAction.TargetProperties
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: TargetProperties
        path: ''
        startLine: 1188
      summary: "\nGets or sets the quantum properties that this action targets.\n"
      example: []
      syntax:
        content:
          CSharp: QuantumProperty[] TargetProperties { get; set; }
          VB: Property TargetProperties As QuantumProperty()
        parameters: []
        return:
          type: QRG.QuantumForge.Runtime.QuantumProperty[]
      overload: QRG.QuantumForge.Runtime.IQuantumAction.TargetProperties*
      modifiers:
        CSharp:
        - get
        - set
        VB: []
    - id: QRG.QuantumForge.Runtime.IQuantumAction.apply
      commentId: M:QRG.QuantumForge.Runtime.IQuantumAction.apply
      language: CSharp
      name:
        CSharp: apply()
        VB: apply()
      nameWithType:
        CSharp: IQuantumAction.apply()
        VB: IQuantumAction.apply()
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.IQuantumAction.apply()
        VB: QRG.QuantumForge.Runtime.IQuantumAction.apply()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: apply
        path: ''
        startLine: 1193
      summary: "\nApplies the quantum action to the target quantum properties.\n"
      example: []
      syntax:
        content:
          CSharp: void apply()
          VB: Sub apply
      overload: QRG.QuantumForge.Runtime.IQuantumAction.apply*
      modifiers:
        CSharp: []
        VB: []
  - id: QRG.QuantumForge.Runtime.Shift
    commentId: T:QRG.QuantumForge.Runtime.Shift
    language: CSharp
    name:
      CSharp: Shift
      VB: Shift
    nameWithType:
      CSharp: Shift
      VB: Shift
    qualifiedName:
      CSharp: QRG.QuantumForge.Runtime.Shift
      VB: QRG.QuantumForge.Runtime.Shift
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Runtime
    source:
      id: Shift
      path: ''
      startLine: 1224
    summary: "\nRepresents a quantum action that applies a shift operation to quantum properties.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class Shift : MonoBehaviour, IQuantumAction
        VB: >-
          <Serializable>

          Public Class Shift

              Inherits MonoBehaviour

              Implements IQuantumAction
    inheritance:
    - System.Object
    implements:
    - QRG.QuantumForge.Runtime.IQuantumAction
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: QRG.QuantumForge.Runtime.Shift.Predicates
      commentId: P:QRG.QuantumForge.Runtime.Shift.Predicates
      language: CSharp
      name:
        CSharp: Predicates
        VB: Predicates
      nameWithType:
        CSharp: Shift.Predicates
        VB: Shift.Predicates
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.Shift.Predicates
        VB: QRG.QuantumForge.Runtime.Shift.Predicates
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Predicates
        path: ''
        startLine: 1230
      summary: "\nGets or sets the predicates that determine the conditions for this action.\n"
      example: []
      syntax:
        content:
          CSharp: public Predicate[] Predicates { get; set; }
          VB: Public Property Predicates As Predicate()
        parameters: []
        return:
          type: QRG.QuantumForge.Runtime.Predicate[]
      overload: QRG.QuantumForge.Runtime.Shift.Predicates*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.Predicates
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.Shift.TargetProperties
      commentId: P:QRG.QuantumForge.Runtime.Shift.TargetProperties
      language: CSharp
      name:
        CSharp: TargetProperties
        VB: TargetProperties
      nameWithType:
        CSharp: Shift.TargetProperties
        VB: Shift.TargetProperties
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.Shift.TargetProperties
        VB: QRG.QuantumForge.Runtime.Shift.TargetProperties
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: TargetProperties
        path: ''
        startLine: 1235
      summary: "\nGets or sets the quantum properties that this action targets.\n"
      example: []
      syntax:
        content:
          CSharp: public QuantumProperty[] TargetProperties { get; set; }
          VB: Public Property TargetProperties As QuantumProperty()
        parameters: []
        return:
          type: QRG.QuantumForge.Runtime.QuantumProperty[]
      overload: QRG.QuantumForge.Runtime.Shift.TargetProperties*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.TargetProperties
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.Shift.apply
      commentId: M:QRG.QuantumForge.Runtime.Shift.apply
      language: CSharp
      name:
        CSharp: apply()
        VB: apply()
      nameWithType:
        CSharp: Shift.apply()
        VB: Shift.apply()
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.Shift.apply()
        VB: QRG.QuantumForge.Runtime.Shift.apply()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: apply
        path: ''
        startLine: 1245
      summary: "\nApplies the shift operation to the target quantum properties.\n"
      example: []
      syntax:
        content:
          CSharp: public void apply()
          VB: Public Sub apply
      overload: QRG.QuantumForge.Runtime.Shift.apply*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.apply
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: QRG.QuantumForge.Runtime.Swap
    commentId: T:QRG.QuantumForge.Runtime.Swap
    language: CSharp
    name:
      CSharp: Swap
      VB: Swap
    nameWithType:
      CSharp: Swap
      VB: Swap
    qualifiedName:
      CSharp: QRG.QuantumForge.Runtime.Swap
      VB: QRG.QuantumForge.Runtime.Swap
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Runtime
    source:
      id: Swap
      path: ''
      startLine: 1268
    summary: "\nRepresents a quantum action that swaps the states of two quantum properties.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class Swap : MonoBehaviour, IQuantumAction
        VB: >-
          <Serializable>

          Public Class Swap

              Inherits MonoBehaviour

              Implements IQuantumAction
    inheritance:
    - System.Object
    implements:
    - QRG.QuantumForge.Runtime.IQuantumAction
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: QRG.QuantumForge.Runtime.Swap.Predicates
      commentId: P:QRG.QuantumForge.Runtime.Swap.Predicates
      language: CSharp
      name:
        CSharp: Predicates
        VB: Predicates
      nameWithType:
        CSharp: Swap.Predicates
        VB: Swap.Predicates
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.Swap.Predicates
        VB: QRG.QuantumForge.Runtime.Swap.Predicates
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Predicates
        path: ''
        startLine: 1274
      summary: "\nGets or sets the predicates that determine the conditions for this action.\n"
      example: []
      syntax:
        content:
          CSharp: public Predicate[] Predicates { get; set; }
          VB: Public Property Predicates As Predicate()
        parameters: []
        return:
          type: QRG.QuantumForge.Runtime.Predicate[]
      overload: QRG.QuantumForge.Runtime.Swap.Predicates*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.Predicates
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.Swap.TargetProperties
      commentId: P:QRG.QuantumForge.Runtime.Swap.TargetProperties
      language: CSharp
      name:
        CSharp: TargetProperties
        VB: TargetProperties
      nameWithType:
        CSharp: Swap.TargetProperties
        VB: Swap.TargetProperties
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.Swap.TargetProperties
        VB: QRG.QuantumForge.Runtime.Swap.TargetProperties
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: TargetProperties
        path: ''
        startLine: 1279
      summary: "\nGets or sets the quantum properties that this action targets.\n"
      example: []
      syntax:
        content:
          CSharp: public QuantumProperty[] TargetProperties { get; set; }
          VB: Public Property TargetProperties As QuantumProperty()
        parameters: []
        return:
          type: QRG.QuantumForge.Runtime.QuantumProperty[]
      overload: QRG.QuantumForge.Runtime.Swap.TargetProperties*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.TargetProperties
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: QRG.QuantumForge.Runtime.Swap.apply
      commentId: M:QRG.QuantumForge.Runtime.Swap.apply
      language: CSharp
      name:
        CSharp: apply()
        VB: apply()
      nameWithType:
        CSharp: Swap.apply()
        VB: Swap.apply()
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.Swap.apply()
        VB: QRG.QuantumForge.Runtime.Swap.apply()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: apply
        path: ''
        startLine: 1284
      summary: "\nApplies the swap operation to the target quantum properties.\n"
      example: []
      syntax:
        content:
          CSharp: public void apply()
          VB: Public Sub apply
      overload: QRG.QuantumForge.Runtime.Swap.apply*
      implements:
      - QRG.QuantumForge.Runtime.IQuantumAction.apply
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: QRG.QuantumForge.Runtime.TriggerActionOnQuantumProperty
    commentId: T:QRG.QuantumForge.Runtime.TriggerActionOnQuantumProperty
    language: CSharp
    name:
      CSharp: TriggerActionOnQuantumProperty
      VB: TriggerActionOnQuantumProperty
    nameWithType:
      CSharp: TriggerActionOnQuantumProperty
      VB: TriggerActionOnQuantumProperty
    qualifiedName:
      CSharp: QRG.QuantumForge.Runtime.TriggerActionOnQuantumProperty
      VB: QRG.QuantumForge.Runtime.TriggerActionOnQuantumProperty
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Runtime
    source:
      id: TriggerActionOnQuantumProperty
      path: ''
      startLine: 1324
    summary: "\nRepresents a component that triggers a quantum action when a QuantumProperty is detected.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class TriggerActionOnQuantumProperty : MonoBehaviour'
        VB: >-
          Public Class TriggerActionOnQuantumProperty

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: QRG.QuantumForge.Runtime.CorrelationTracker
    commentId: T:QRG.QuantumForge.Runtime.CorrelationTracker
    language: CSharp
    name:
      CSharp: CorrelationTracker
      VB: CorrelationTracker
    nameWithType:
      CSharp: CorrelationTracker
      VB: CorrelationTracker
    qualifiedName:
      CSharp: QRG.QuantumForge.Runtime.CorrelationTracker
      VB: QRG.QuantumForge.Runtime.CorrelationTracker
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Runtime
    source:
      id: CorrelationTracker
      path: ''
      startLine: 2575
    summary: "\nTracks correlations between specified quantum properties.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class CorrelationTracker : MonoBehaviour'
        VB: >-
          Public Class CorrelationTracker

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: QRG.QuantumForge.Runtime.CorrelationTracker.UpdateCorrelationMatrix
      commentId: M:QRG.QuantumForge.Runtime.CorrelationTracker.UpdateCorrelationMatrix
      language: CSharp
      name:
        CSharp: UpdateCorrelationMatrix()
        VB: UpdateCorrelationMatrix()
      nameWithType:
        CSharp: CorrelationTracker.UpdateCorrelationMatrix()
        VB: CorrelationTracker.UpdateCorrelationMatrix()
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.CorrelationTracker.UpdateCorrelationMatrix()
        VB: QRG.QuantumForge.Runtime.CorrelationTracker.UpdateCorrelationMatrix()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: UpdateCorrelationMatrix
        path: ''
        startLine: 2635
      summary: "\nCalculates and returns the correlation matrix of the quantum properties.\n"
      example: []
      syntax:
        content:
          CSharp: public float[, ] UpdateCorrelationMatrix()
          VB: Public Function UpdateCorrelationMatrix As Single(,)
        return:
          type: System.Single[,]
          description: The correlation matrix as a 2D float array.
      overload: QRG.QuantumForge.Runtime.CorrelationTracker.UpdateCorrelationMatrix*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: QRG.QuantumForge.Runtime.EntanglementTracker
    commentId: T:QRG.QuantumForge.Runtime.EntanglementTracker
    language: CSharp
    name:
      CSharp: EntanglementTracker
      VB: EntanglementTracker
    nameWithType:
      CSharp: EntanglementTracker
      VB: EntanglementTracker
    qualifiedName:
      CSharp: QRG.QuantumForge.Runtime.EntanglementTracker
      VB: QRG.QuantumForge.Runtime.EntanglementTracker
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Runtime
    source:
      id: EntanglementTracker
      path: ''
      startLine: 2690
    summary: "\nTracks mutual information to measure entanglement between specified quantum properties.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class EntanglementTracker : MonoBehaviour'
        VB: >-
          Public Class EntanglementTracker

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: QRG.QuantumForge.Runtime.EntanglementTracker.LastUpdatedMutualInformation
      commentId: P:QRG.QuantumForge.Runtime.EntanglementTracker.LastUpdatedMutualInformation
      language: CSharp
      name:
        CSharp: LastUpdatedMutualInformation
        VB: LastUpdatedMutualInformation
      nameWithType:
        CSharp: EntanglementTracker.LastUpdatedMutualInformation
        VB: EntanglementTracker.LastUpdatedMutualInformation
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.EntanglementTracker.LastUpdatedMutualInformation
        VB: QRG.QuantumForge.Runtime.EntanglementTracker.LastUpdatedMutualInformation
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: LastUpdatedMutualInformation
        path: ''
        startLine: 2704
      syntax:
        content:
          CSharp: public float[] LastUpdatedMutualInformation { get; }
          VB: Public ReadOnly Property LastUpdatedMutualInformation As Single()
        parameters: []
        return:
          type: System.Single[]
      overload: QRG.QuantumForge.Runtime.EntanglementTracker.LastUpdatedMutualInformation*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: QRG.QuantumForge.Runtime.EntanglementTracker.UpdateMutualInformation
      commentId: M:QRG.QuantumForge.Runtime.EntanglementTracker.UpdateMutualInformation
      language: CSharp
      name:
        CSharp: UpdateMutualInformation()
        VB: UpdateMutualInformation()
      nameWithType:
        CSharp: EntanglementTracker.UpdateMutualInformation()
        VB: EntanglementTracker.UpdateMutualInformation()
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.EntanglementTracker.UpdateMutualInformation()
        VB: QRG.QuantumForge.Runtime.EntanglementTracker.UpdateMutualInformation()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: UpdateMutualInformation
        path: ''
        startLine: 2723
      syntax:
        content:
          CSharp: public float[] UpdateMutualInformation()
          VB: Public Function UpdateMutualInformation As Single()
        return:
          type: System.Single[]
      overload: QRG.QuantumForge.Runtime.EntanglementTracker.UpdateMutualInformation*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: QRG.QuantumForge.Runtime.PhaseTracker
    commentId: T:QRG.QuantumForge.Runtime.PhaseTracker
    language: CSharp
    name:
      CSharp: PhaseTracker
      VB: PhaseTracker
    nameWithType:
      CSharp: PhaseTracker
      VB: PhaseTracker
    qualifiedName:
      CSharp: QRG.QuantumForge.Runtime.PhaseTracker
      VB: QRG.QuantumForge.Runtime.PhaseTracker
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Runtime
    source:
      id: PhaseTracker
      path: ''
      startLine: 2766
    summary: "\nTracks phase information for specified quantum properties.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class PhaseTracker : MonoBehaviour'
        VB: >-
          Public Class PhaseTracker

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: QRG.QuantumForge.Runtime.PhaseTracker.PhaseMatrix
      commentId: P:QRG.QuantumForge.Runtime.PhaseTracker.PhaseMatrix
      language: CSharp
      name:
        CSharp: PhaseMatrix
        VB: PhaseMatrix
      nameWithType:
        CSharp: PhaseTracker.PhaseMatrix
        VB: PhaseTracker.PhaseMatrix
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.PhaseTracker.PhaseMatrix
        VB: QRG.QuantumForge.Runtime.PhaseTracker.PhaseMatrix
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: PhaseMatrix
        path: ''
        startLine: 2779
      syntax:
        content:
          CSharp: public float[, ] PhaseMatrix { get; }
          VB: Public ReadOnly Property PhaseMatrix As Single(,)
        parameters: []
        return:
          type: System.Single[,]
      overload: QRG.QuantumForge.Runtime.PhaseTracker.PhaseMatrix*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: QRG.QuantumForge.Runtime.PhaseTracker.UpdatePhaseMatrix
      commentId: M:QRG.QuantumForge.Runtime.PhaseTracker.UpdatePhaseMatrix
      language: CSharp
      name:
        CSharp: UpdatePhaseMatrix()
        VB: UpdatePhaseMatrix()
      nameWithType:
        CSharp: PhaseTracker.UpdatePhaseMatrix()
        VB: PhaseTracker.UpdatePhaseMatrix()
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.PhaseTracker.UpdatePhaseMatrix()
        VB: QRG.QuantumForge.Runtime.PhaseTracker.UpdatePhaseMatrix()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: UpdatePhaseMatrix
        path: ''
        startLine: 2840
      summary: "\nCalculates and returns the phase matrix of the quantum properties.\n"
      example: []
      syntax:
        content:
          CSharp: public float[, ] UpdatePhaseMatrix()
          VB: Public Function UpdatePhaseMatrix As Single(,)
        return:
          type: System.Single[,]
          description: The phase matrix as a 2D float array.
      overload: QRG.QuantumForge.Runtime.PhaseTracker.UpdatePhaseMatrix*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: QRG.QuantumForge.Runtime.ProbabilityTracker
    commentId: T:QRG.QuantumForge.Runtime.ProbabilityTracker
    language: CSharp
    name:
      CSharp: ProbabilityTracker
      VB: ProbabilityTracker
    nameWithType:
      CSharp: ProbabilityTracker
      VB: ProbabilityTracker
    qualifiedName:
      CSharp: QRG.QuantumForge.Runtime.ProbabilityTracker
      VB: QRG.QuantumForge.Runtime.ProbabilityTracker
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Runtime
    source:
      id: ProbabilityTracker
      path: ''
      startLine: 2903
    summary: "\nTracks basis probabilities of specified quantum properties.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ProbabilityTracker : MonoBehaviour'
        VB: >-
          Public Class ProbabilityTracker

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: QRG.QuantumForge.Runtime.ProbabilityTracker.Probabilities
      commentId: P:QRG.QuantumForge.Runtime.ProbabilityTracker.Probabilities
      language: CSharp
      name:
        CSharp: Probabilities
        VB: Probabilities
      nameWithType:
        CSharp: ProbabilityTracker.Probabilities
        VB: ProbabilityTracker.Probabilities
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.ProbabilityTracker.Probabilities
        VB: QRG.QuantumForge.Runtime.ProbabilityTracker.Probabilities
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: Probabilities
        path: ''
        startLine: 2916
      syntax:
        content:
          CSharp: public QuantumProperty.BasisProbability[] Probabilities { get; }
          VB: Public ReadOnly Property Probabilities As QuantumProperty.BasisProbability()
        parameters: []
        return:
          type: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability[]
      overload: QRG.QuantumForge.Runtime.ProbabilityTracker.Probabilities*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: QRG.QuantumForge.Runtime.ProbabilityTracker.GetBasisProbabilities
      commentId: M:QRG.QuantumForge.Runtime.ProbabilityTracker.GetBasisProbabilities
      language: CSharp
      name:
        CSharp: GetBasisProbabilities()
        VB: GetBasisProbabilities()
      nameWithType:
        CSharp: ProbabilityTracker.GetBasisProbabilities()
        VB: ProbabilityTracker.GetBasisProbabilities()
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.ProbabilityTracker.GetBasisProbabilities()
        VB: QRG.QuantumForge.Runtime.ProbabilityTracker.GetBasisProbabilities()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: GetBasisProbabilities
        path: ''
        startLine: 2965
      summary: "\nCalculates and returns the basis probabilities of the quantum properties.\n"
      example: []
      syntax:
        content:
          CSharp: public QuantumProperty.BasisProbability[] GetBasisProbabilities()
          VB: Public Function GetBasisProbabilities As QuantumProperty.BasisProbability()
        return:
          type: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability[]
          description: An array of basis probabilities.
      overload: QRG.QuantumForge.Runtime.ProbabilityTracker.GetBasisProbabilities*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker
    commentId: T:QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker
    language: CSharp
    name:
      CSharp: ReducedDensityMatrixTracker
      VB: ReducedDensityMatrixTracker
    nameWithType:
      CSharp: ReducedDensityMatrixTracker
      VB: ReducedDensityMatrixTracker
    qualifiedName:
      CSharp: QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker
      VB: QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Runtime
    source:
      id: ReducedDensityMatrixTracker
      path: ''
      startLine: 3001
    summary: "\nTracks the reduced density matrix of specified quantum properties.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ReducedDensityMatrixTracker : MonoBehaviour'
        VB: >-
          Public Class ReducedDensityMatrixTracker

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker.ReducedDensityMatrix
      commentId: P:QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker.ReducedDensityMatrix
      language: CSharp
      name:
        CSharp: ReducedDensityMatrix
        VB: ReducedDensityMatrix
      nameWithType:
        CSharp: ReducedDensityMatrixTracker.ReducedDensityMatrix
        VB: ReducedDensityMatrixTracker.ReducedDensityMatrix
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker.ReducedDensityMatrix
        VB: QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker.ReducedDensityMatrix
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: ReducedDensityMatrix
        path: ''
        startLine: 3014
      syntax:
        content:
          CSharp: public Complex[, ] ReducedDensityMatrix { get; }
          VB: Public ReadOnly Property ReducedDensityMatrix As Complex(,)
        parameters: []
        return:
          type: Complex[,]
      overload: QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker.ReducedDensityMatrix*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker.GetReducedDensityMatrix
      commentId: M:QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker.GetReducedDensityMatrix
      language: CSharp
      name:
        CSharp: GetReducedDensityMatrix()
        VB: GetReducedDensityMatrix()
      nameWithType:
        CSharp: ReducedDensityMatrixTracker.GetReducedDensityMatrix()
        VB: ReducedDensityMatrixTracker.GetReducedDensityMatrix()
      qualifiedName:
        CSharp: QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker.GetReducedDensityMatrix()
        VB: QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker.GetReducedDensityMatrix()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Runtime
      source:
        id: GetReducedDensityMatrix
        path: ''
        startLine: 3062
      summary: "\nCalculates and returns the reduced density matrix of the quantum properties.\n"
      example: []
      syntax:
        content:
          CSharp: public Complex[, ] GetReducedDensityMatrix()
          VB: Public Function GetReducedDensityMatrix As Complex(,)
        return:
          type: Complex[,]
          description: The reduced density matrix as a 2D complex array.
      overload: QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker.GetReducedDensityMatrix*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
- id: QRG.QuantumForge.Core
  commentId: N:QRG.QuantumForge.Core
  language: CSharp
  name:
    CSharp: QRG.QuantumForge.Core
    VB: QRG.QuantumForge.Core
  nameWithType:
    CSharp: QRG.QuantumForge.Core
    VB: QRG.QuantumForge.Core
  qualifiedName:
    CSharp: QRG.QuantumForge.Core
    VB: QRG.QuantumForge.Core
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: QRG.QuantumForge.Core.QuantumForge
    commentId: T:QRG.QuantumForge.Core.QuantumForge
    language: CSharp
    name:
      CSharp: QuantumForge
      VB: QuantumForge
    nameWithType:
      CSharp: QuantumForge
      VB: QuantumForge
    qualifiedName:
      CSharp: QRG.QuantumForge.Core.QuantumForge
      VB: QRG.QuantumForge.Core.QuantumForge
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Core
    source:
      id: QuantumForge
      path: ''
      startLine: 1389
    syntax:
      content:
        CSharp: public static class QuantumForge
        VB: Public Module QuantumForge
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: QRG.QuantumForge.Core.QuantumForge.Cycle(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,System.Single,QRG.QuantumForge.Core.QuantumForge.Predicate[])
      commentId: M:QRG.QuantumForge.Core.QuantumForge.Cycle(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,System.Single,QRG.QuantumForge.Core.QuantumForge.Predicate[])
      language: CSharp
      name:
        CSharp: Cycle(QuantumForge.NativeQuantumProperty, Single, QuantumForge.Predicate[])
        VB: Cycle(QuantumForge.NativeQuantumProperty, Single, QuantumForge.Predicate())
      nameWithType:
        CSharp: QuantumForge.Cycle(QuantumForge.NativeQuantumProperty, Single, QuantumForge.Predicate[])
        VB: QuantumForge.Cycle(QuantumForge.NativeQuantumProperty, Single, QuantumForge.Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.Cycle(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, System.Single, QRG.QuantumForge.Core.QuantumForge.Predicate[])
        VB: QRG.QuantumForge.Core.QuantumForge.Cycle(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, System.Single, QRG.QuantumForge.Core.QuantumForge.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: Cycle
        path: ''
        startLine: 1539
      syntax:
        content:
          CSharp: public static void Cycle(QuantumForge.NativeQuantumProperty prop, float fraction, params QuantumForge.Predicate[] preds)
          VB: Public Shared Sub Cycle(prop As QuantumForge.NativeQuantumProperty, fraction As Single, ParamArray preds As QuantumForge.Predicate())
        parameters:
        - id: prop
          type: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
        - id: fraction
          type: System.Single
        - id: preds
          type: QRG.QuantumForge.Core.QuantumForge.Predicate[]
      overload: QRG.QuantumForge.Core.QuantumForge.Cycle*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Core.QuantumForge.Cycle(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,QRG.QuantumForge.Core.QuantumForge.Predicate[])
      commentId: M:QRG.QuantumForge.Core.QuantumForge.Cycle(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,QRG.QuantumForge.Core.QuantumForge.Predicate[])
      language: CSharp
      name:
        CSharp: Cycle(QuantumForge.NativeQuantumProperty, QuantumForge.Predicate[])
        VB: Cycle(QuantumForge.NativeQuantumProperty, QuantumForge.Predicate())
      nameWithType:
        CSharp: QuantumForge.Cycle(QuantumForge.NativeQuantumProperty, QuantumForge.Predicate[])
        VB: QuantumForge.Cycle(QuantumForge.NativeQuantumProperty, QuantumForge.Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.Cycle(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, QRG.QuantumForge.Core.QuantumForge.Predicate[])
        VB: QRG.QuantumForge.Core.QuantumForge.Cycle(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, QRG.QuantumForge.Core.QuantumForge.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: Cycle
        path: ''
        startLine: 1571
      syntax:
        content:
          CSharp: public static void Cycle(QuantumForge.NativeQuantumProperty prop, params QuantumForge.Predicate[] preds)
          VB: Public Shared Sub Cycle(prop As QuantumForge.NativeQuantumProperty, ParamArray preds As QuantumForge.Predicate())
        parameters:
        - id: prop
          type: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
        - id: preds
          type: QRG.QuantumForge.Core.QuantumForge.Predicate[]
      overload: QRG.QuantumForge.Core.QuantumForge.Cycle*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Core.QuantumForge.NCycle(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,System.Single)
      commentId: M:QRG.QuantumForge.Core.QuantumForge.NCycle(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,System.Single)
      language: CSharp
      name:
        CSharp: NCycle(QuantumForge.NativeQuantumProperty, QuantumForge.NativeQuantumProperty, Single)
        VB: NCycle(QuantumForge.NativeQuantumProperty, QuantumForge.NativeQuantumProperty, Single)
      nameWithType:
        CSharp: QuantumForge.NCycle(QuantumForge.NativeQuantumProperty, QuantumForge.NativeQuantumProperty, Single)
        VB: QuantumForge.NCycle(QuantumForge.NativeQuantumProperty, QuantumForge.NativeQuantumProperty, Single)
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.NCycle(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, System.Single)
        VB: QRG.QuantumForge.Core.QuantumForge.NCycle(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: NCycle
        path: ''
        startLine: 1576
      syntax:
        content:
          CSharp: public static void NCycle(QuantumForge.NativeQuantumProperty prop1, QuantumForge.NativeQuantumProperty prop2, float fraction = 1F)
          VB: Public Shared Sub NCycle(prop1 As QuantumForge.NativeQuantumProperty, prop2 As QuantumForge.NativeQuantumProperty, fraction As Single = 1F)
        parameters:
        - id: prop1
          type: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
        - id: prop2
          type: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
        - id: fraction
          type: System.Single
      overload: QRG.QuantumForge.Core.QuantumForge.NCycle*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Core.QuantumForge.Shift(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,System.Single,QRG.QuantumForge.Core.QuantumForge.Predicate[])
      commentId: M:QRG.QuantumForge.Core.QuantumForge.Shift(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,System.Single,QRG.QuantumForge.Core.QuantumForge.Predicate[])
      language: CSharp
      name:
        CSharp: Shift(QuantumForge.NativeQuantumProperty, Single, QuantumForge.Predicate[])
        VB: Shift(QuantumForge.NativeQuantumProperty, Single, QuantumForge.Predicate())
      nameWithType:
        CSharp: QuantumForge.Shift(QuantumForge.NativeQuantumProperty, Single, QuantumForge.Predicate[])
        VB: QuantumForge.Shift(QuantumForge.NativeQuantumProperty, Single, QuantumForge.Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.Shift(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, System.Single, QRG.QuantumForge.Core.QuantumForge.Predicate[])
        VB: QRG.QuantumForge.Core.QuantumForge.Shift(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, System.Single, QRG.QuantumForge.Core.QuantumForge.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: Shift
        path: ''
        startLine: 1590
      syntax:
        content:
          CSharp: public static void Shift(QuantumForge.NativeQuantumProperty prop, float fraction, params QuantumForge.Predicate[] preds)
          VB: Public Shared Sub Shift(prop As QuantumForge.NativeQuantumProperty, fraction As Single, ParamArray preds As QuantumForge.Predicate())
        parameters:
        - id: prop
          type: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
        - id: fraction
          type: System.Single
        - id: preds
          type: QRG.QuantumForge.Core.QuantumForge.Predicate[]
      overload: QRG.QuantumForge.Core.QuantumForge.Shift*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Core.QuantumForge.Shift(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,QRG.QuantumForge.Core.QuantumForge.Predicate[])
      commentId: M:QRG.QuantumForge.Core.QuantumForge.Shift(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,QRG.QuantumForge.Core.QuantumForge.Predicate[])
      language: CSharp
      name:
        CSharp: Shift(QuantumForge.NativeQuantumProperty, QuantumForge.Predicate[])
        VB: Shift(QuantumForge.NativeQuantumProperty, QuantumForge.Predicate())
      nameWithType:
        CSharp: QuantumForge.Shift(QuantumForge.NativeQuantumProperty, QuantumForge.Predicate[])
        VB: QuantumForge.Shift(QuantumForge.NativeQuantumProperty, QuantumForge.Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.Shift(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, QRG.QuantumForge.Core.QuantumForge.Predicate[])
        VB: QRG.QuantumForge.Core.QuantumForge.Shift(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, QRG.QuantumForge.Core.QuantumForge.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: Shift
        path: ''
        startLine: 1622
      syntax:
        content:
          CSharp: public static void Shift(QuantumForge.NativeQuantumProperty prop, params QuantumForge.Predicate[] preds)
          VB: Public Shared Sub Shift(prop As QuantumForge.NativeQuantumProperty, ParamArray preds As QuantumForge.Predicate())
        parameters:
        - id: prop
          type: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
        - id: preds
          type: QRG.QuantumForge.Core.QuantumForge.Predicate[]
      overload: QRG.QuantumForge.Core.QuantumForge.Shift*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Core.QuantumForge.NShift(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,System.Single)
      commentId: M:QRG.QuantumForge.Core.QuantumForge.NShift(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,System.Single)
      language: CSharp
      name:
        CSharp: NShift(QuantumForge.NativeQuantumProperty, QuantumForge.NativeQuantumProperty, Single)
        VB: NShift(QuantumForge.NativeQuantumProperty, QuantumForge.NativeQuantumProperty, Single)
      nameWithType:
        CSharp: QuantumForge.NShift(QuantumForge.NativeQuantumProperty, QuantumForge.NativeQuantumProperty, Single)
        VB: QuantumForge.NShift(QuantumForge.NativeQuantumProperty, QuantumForge.NativeQuantumProperty, Single)
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.NShift(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, System.Single)
        VB: QRG.QuantumForge.Core.QuantumForge.NShift(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: NShift
        path: ''
        startLine: 1627
      syntax:
        content:
          CSharp: public static void NShift(QuantumForge.NativeQuantumProperty prop1, QuantumForge.NativeQuantumProperty prop2, float fraction = 1F)
          VB: Public Shared Sub NShift(prop1 As QuantumForge.NativeQuantumProperty, prop2 As QuantumForge.NativeQuantumProperty, fraction As Single = 1F)
        parameters:
        - id: prop1
          type: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
        - id: prop2
          type: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
        - id: fraction
          type: System.Single
      overload: QRG.QuantumForge.Core.QuantumForge.NShift*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Core.QuantumForge.Clock(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,System.Single,QRG.QuantumForge.Core.QuantumForge.Predicate[])
      commentId: M:QRG.QuantumForge.Core.QuantumForge.Clock(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,System.Single,QRG.QuantumForge.Core.QuantumForge.Predicate[])
      language: CSharp
      name:
        CSharp: Clock(QuantumForge.NativeQuantumProperty, Single, QuantumForge.Predicate[])
        VB: Clock(QuantumForge.NativeQuantumProperty, Single, QuantumForge.Predicate())
      nameWithType:
        CSharp: QuantumForge.Clock(QuantumForge.NativeQuantumProperty, Single, QuantumForge.Predicate[])
        VB: QuantumForge.Clock(QuantumForge.NativeQuantumProperty, Single, QuantumForge.Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.Clock(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, System.Single, QRG.QuantumForge.Core.QuantumForge.Predicate[])
        VB: QRG.QuantumForge.Core.QuantumForge.Clock(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, System.Single, QRG.QuantumForge.Core.QuantumForge.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: Clock
        path: ''
        startLine: 1641
      syntax:
        content:
          CSharp: public static void Clock(QuantumForge.NativeQuantumProperty prop, float fraction, params QuantumForge.Predicate[] preds)
          VB: Public Shared Sub Clock(prop As QuantumForge.NativeQuantumProperty, fraction As Single, ParamArray preds As QuantumForge.Predicate())
        parameters:
        - id: prop
          type: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
        - id: fraction
          type: System.Single
        - id: preds
          type: QRG.QuantumForge.Core.QuantumForge.Predicate[]
      overload: QRG.QuantumForge.Core.QuantumForge.Clock*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Core.QuantumForge.Clock(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,QRG.QuantumForge.Core.QuantumForge.Predicate[])
      commentId: M:QRG.QuantumForge.Core.QuantumForge.Clock(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,QRG.QuantumForge.Core.QuantumForge.Predicate[])
      language: CSharp
      name:
        CSharp: Clock(QuantumForge.NativeQuantumProperty, QuantumForge.Predicate[])
        VB: Clock(QuantumForge.NativeQuantumProperty, QuantumForge.Predicate())
      nameWithType:
        CSharp: QuantumForge.Clock(QuantumForge.NativeQuantumProperty, QuantumForge.Predicate[])
        VB: QuantumForge.Clock(QuantumForge.NativeQuantumProperty, QuantumForge.Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.Clock(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, QRG.QuantumForge.Core.QuantumForge.Predicate[])
        VB: QRG.QuantumForge.Core.QuantumForge.Clock(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, QRG.QuantumForge.Core.QuantumForge.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: Clock
        path: ''
        startLine: 1673
      syntax:
        content:
          CSharp: public static void Clock(QuantumForge.NativeQuantumProperty prop, params QuantumForge.Predicate[] preds)
          VB: Public Shared Sub Clock(prop As QuantumForge.NativeQuantumProperty, ParamArray preds As QuantumForge.Predicate())
        parameters:
        - id: prop
          type: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
        - id: preds
          type: QRG.QuantumForge.Core.QuantumForge.Predicate[]
      overload: QRG.QuantumForge.Core.QuantumForge.Clock*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Core.QuantumForge.Hadamard(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,QRG.QuantumForge.Core.QuantumForge.Predicate[])
      commentId: M:QRG.QuantumForge.Core.QuantumForge.Hadamard(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,QRG.QuantumForge.Core.QuantumForge.Predicate[])
      language: CSharp
      name:
        CSharp: Hadamard(QuantumForge.NativeQuantumProperty, QuantumForge.Predicate[])
        VB: Hadamard(QuantumForge.NativeQuantumProperty, QuantumForge.Predicate())
      nameWithType:
        CSharp: QuantumForge.Hadamard(QuantumForge.NativeQuantumProperty, QuantumForge.Predicate[])
        VB: QuantumForge.Hadamard(QuantumForge.NativeQuantumProperty, QuantumForge.Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.Hadamard(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, QRG.QuantumForge.Core.QuantumForge.Predicate[])
        VB: QRG.QuantumForge.Core.QuantumForge.Hadamard(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, QRG.QuantumForge.Core.QuantumForge.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: Hadamard
        path: ''
        startLine: 1681
      syntax:
        content:
          CSharp: public static void Hadamard(QuantumForge.NativeQuantumProperty prop, params QuantumForge.Predicate[] preds)
          VB: Public Shared Sub Hadamard(prop As QuantumForge.NativeQuantumProperty, ParamArray preds As QuantumForge.Predicate())
        parameters:
        - id: prop
          type: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
        - id: preds
          type: QRG.QuantumForge.Core.QuantumForge.Predicate[]
      overload: QRG.QuantumForge.Core.QuantumForge.Hadamard*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Core.QuantumForge.InverseHadamard(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,QRG.QuantumForge.Core.QuantumForge.Predicate[])
      commentId: M:QRG.QuantumForge.Core.QuantumForge.InverseHadamard(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,QRG.QuantumForge.Core.QuantumForge.Predicate[])
      language: CSharp
      name:
        CSharp: InverseHadamard(QuantumForge.NativeQuantumProperty, QuantumForge.Predicate[])
        VB: InverseHadamard(QuantumForge.NativeQuantumProperty, QuantumForge.Predicate())
      nameWithType:
        CSharp: QuantumForge.InverseHadamard(QuantumForge.NativeQuantumProperty, QuantumForge.Predicate[])
        VB: QuantumForge.InverseHadamard(QuantumForge.NativeQuantumProperty, QuantumForge.Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.InverseHadamard(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, QRG.QuantumForge.Core.QuantumForge.Predicate[])
        VB: QRG.QuantumForge.Core.QuantumForge.InverseHadamard(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, QRG.QuantumForge.Core.QuantumForge.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: InverseHadamard
        path: ''
        startLine: 1716
      syntax:
        content:
          CSharp: public static void InverseHadamard(QuantumForge.NativeQuantumProperty prop, params QuantumForge.Predicate[] preds)
          VB: Public Shared Sub InverseHadamard(prop As QuantumForge.NativeQuantumProperty, ParamArray preds As QuantumForge.Predicate())
        parameters:
        - id: prop
          type: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
        - id: preds
          type: QRG.QuantumForge.Core.QuantumForge.Predicate[]
      overload: QRG.QuantumForge.Core.QuantumForge.InverseHadamard*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Core.QuantumForge.PhaseRotate(System.Single,QRG.QuantumForge.Core.QuantumForge.Predicate[])
      commentId: M:QRG.QuantumForge.Core.QuantumForge.PhaseRotate(System.Single,QRG.QuantumForge.Core.QuantumForge.Predicate[])
      language: CSharp
      name:
        CSharp: PhaseRotate(Single, QuantumForge.Predicate[])
        VB: PhaseRotate(Single, QuantumForge.Predicate())
      nameWithType:
        CSharp: QuantumForge.PhaseRotate(Single, QuantumForge.Predicate[])
        VB: QuantumForge.PhaseRotate(Single, QuantumForge.Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.PhaseRotate(System.Single, QRG.QuantumForge.Core.QuantumForge.Predicate[])
        VB: QRG.QuantumForge.Core.QuantumForge.PhaseRotate(System.Single, QRG.QuantumForge.Core.QuantumForge.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: PhaseRotate
        path: ''
        startLine: 1751
      syntax:
        content:
          CSharp: public static void PhaseRotate(float angle, params QuantumForge.Predicate[] preds)
          VB: Public Shared Sub PhaseRotate(angle As Single, ParamArray preds As QuantumForge.Predicate())
        parameters:
        - id: angle
          type: System.Single
        - id: preds
          type: QRG.QuantumForge.Core.QuantumForge.Predicate[]
      overload: QRG.QuantumForge.Core.QuantumForge.PhaseRotate*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Core.QuantumForge.Swap(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,QRG.QuantumForge.Core.QuantumForge.Predicate[])
      commentId: M:QRG.QuantumForge.Core.QuantumForge.Swap(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,QRG.QuantumForge.Core.QuantumForge.Predicate[])
      language: CSharp
      name:
        CSharp: Swap(QuantumForge.NativeQuantumProperty, QuantumForge.NativeQuantumProperty, QuantumForge.Predicate[])
        VB: Swap(QuantumForge.NativeQuantumProperty, QuantumForge.NativeQuantumProperty, QuantumForge.Predicate())
      nameWithType:
        CSharp: QuantumForge.Swap(QuantumForge.NativeQuantumProperty, QuantumForge.NativeQuantumProperty, QuantumForge.Predicate[])
        VB: QuantumForge.Swap(QuantumForge.NativeQuantumProperty, QuantumForge.NativeQuantumProperty, QuantumForge.Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.Swap(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, QRG.QuantumForge.Core.QuantumForge.Predicate[])
        VB: QRG.QuantumForge.Core.QuantumForge.Swap(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, QRG.QuantumForge.Core.QuantumForge.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: Swap
        path: ''
        startLine: 1789
      syntax:
        content:
          CSharp: public static void Swap(QuantumForge.NativeQuantumProperty p1, QuantumForge.NativeQuantumProperty p2, params QuantumForge.Predicate[] preds)
          VB: Public Shared Sub Swap(p1 As QuantumForge.NativeQuantumProperty, p2 As QuantumForge.NativeQuantumProperty, ParamArray preds As QuantumForge.Predicate())
        parameters:
        - id: p1
          type: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
        - id: p2
          type: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
        - id: preds
          type: QRG.QuantumForge.Core.QuantumForge.Predicate[]
      overload: QRG.QuantumForge.Core.QuantumForge.Swap*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Core.QuantumForge.ISwap(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,System.Single,QRG.QuantumForge.Core.QuantumForge.Predicate[])
      commentId: M:QRG.QuantumForge.Core.QuantumForge.ISwap(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,System.Single,QRG.QuantumForge.Core.QuantumForge.Predicate[])
      language: CSharp
      name:
        CSharp: ISwap(QuantumForge.NativeQuantumProperty, QuantumForge.NativeQuantumProperty, Single, QuantumForge.Predicate[])
        VB: ISwap(QuantumForge.NativeQuantumProperty, QuantumForge.NativeQuantumProperty, Single, QuantumForge.Predicate())
      nameWithType:
        CSharp: QuantumForge.ISwap(QuantumForge.NativeQuantumProperty, QuantumForge.NativeQuantumProperty, Single, QuantumForge.Predicate[])
        VB: QuantumForge.ISwap(QuantumForge.NativeQuantumProperty, QuantumForge.NativeQuantumProperty, Single, QuantumForge.Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.ISwap(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, System.Single, QRG.QuantumForge.Core.QuantumForge.Predicate[])
        VB: QRG.QuantumForge.Core.QuantumForge.ISwap(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, System.Single, QRG.QuantumForge.Core.QuantumForge.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: ISwap
        path: ''
        startLine: 1826
      syntax:
        content:
          CSharp: public static void ISwap(QuantumForge.NativeQuantumProperty p1, QuantumForge.NativeQuantumProperty p2, float fraction, params QuantumForge.Predicate[] preds)
          VB: Public Shared Sub ISwap(p1 As QuantumForge.NativeQuantumProperty, p2 As QuantumForge.NativeQuantumProperty, fraction As Single, ParamArray preds As QuantumForge.Predicate())
        parameters:
        - id: p1
          type: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
        - id: p2
          type: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
        - id: fraction
          type: System.Single
        - id: preds
          type: QRG.QuantumForge.Core.QuantumForge.Predicate[]
      overload: QRG.QuantumForge.Core.QuantumForge.ISwap*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Core.QuantumForge.ISwap(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,QRG.QuantumForge.Core.QuantumForge.Predicate[])
      commentId: M:QRG.QuantumForge.Core.QuantumForge.ISwap(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,QRG.QuantumForge.Core.QuantumForge.Predicate[])
      language: CSharp
      name:
        CSharp: ISwap(QuantumForge.NativeQuantumProperty, QuantumForge.NativeQuantumProperty, QuantumForge.Predicate[])
        VB: ISwap(QuantumForge.NativeQuantumProperty, QuantumForge.NativeQuantumProperty, QuantumForge.Predicate())
      nameWithType:
        CSharp: QuantumForge.ISwap(QuantumForge.NativeQuantumProperty, QuantumForge.NativeQuantumProperty, QuantumForge.Predicate[])
        VB: QuantumForge.ISwap(QuantumForge.NativeQuantumProperty, QuantumForge.NativeQuantumProperty, QuantumForge.Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.ISwap(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, QRG.QuantumForge.Core.QuantumForge.Predicate[])
        VB: QRG.QuantumForge.Core.QuantumForge.ISwap(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, QRG.QuantumForge.Core.QuantumForge.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: ISwap
        path: ''
        startLine: 1859
      syntax:
        content:
          CSharp: public static void ISwap(QuantumForge.NativeQuantumProperty p1, QuantumForge.NativeQuantumProperty p2, params QuantumForge.Predicate[] preds)
          VB: Public Shared Sub ISwap(p1 As QuantumForge.NativeQuantumProperty, p2 As QuantumForge.NativeQuantumProperty, ParamArray preds As QuantumForge.Predicate())
        parameters:
        - id: p1
          type: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
        - id: p2
          type: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
        - id: preds
          type: QRG.QuantumForge.Core.QuantumForge.Predicate[]
      overload: QRG.QuantumForge.Core.QuantumForge.ISwap*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Core.QuantumForge.Measure(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty[])
      commentId: M:QRG.QuantumForge.Core.QuantumForge.Measure(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty[])
      language: CSharp
      name:
        CSharp: Measure(QuantumForge.NativeQuantumProperty[])
        VB: Measure(QuantumForge.NativeQuantumProperty())
      nameWithType:
        CSharp: QuantumForge.Measure(QuantumForge.NativeQuantumProperty[])
        VB: QuantumForge.Measure(QuantumForge.NativeQuantumProperty())
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.Measure(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty[])
        VB: QRG.QuantumForge.Core.QuantumForge.Measure(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: Measure
        path: ''
        startLine: 1868
      syntax:
        content:
          CSharp: public static int[] Measure(params QuantumForge.NativeQuantumProperty[] props)
          VB: Public Shared Function Measure(ParamArray props As QuantumForge.NativeQuantumProperty()) As Integer()
        parameters:
        - id: props
          type: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty[]
        return:
          type: System.Int32[]
      overload: QRG.QuantumForge.Core.QuantumForge.Measure*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Core.QuantumForge.Measure(QRG.QuantumForge.Core.QuantumForge.Predicate[])
      commentId: M:QRG.QuantumForge.Core.QuantumForge.Measure(QRG.QuantumForge.Core.QuantumForge.Predicate[])
      language: CSharp
      name:
        CSharp: Measure(QuantumForge.Predicate[])
        VB: Measure(QuantumForge.Predicate())
      nameWithType:
        CSharp: QuantumForge.Measure(QuantumForge.Predicate[])
        VB: QuantumForge.Measure(QuantumForge.Predicate())
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.Measure(QRG.QuantumForge.Core.QuantumForge.Predicate[])
        VB: QRG.QuantumForge.Core.QuantumForge.Measure(QRG.QuantumForge.Core.QuantumForge.Predicate())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: Measure
        path: ''
        startLine: 1893
      syntax:
        content:
          CSharp: public static int Measure(QuantumForge.Predicate[] preds)
          VB: Public Shared Function Measure(preds As QuantumForge.Predicate()) As Integer
        parameters:
        - id: preds
          type: QRG.QuantumForge.Core.QuantumForge.Predicate[]
        return:
          type: System.Int32
      overload: QRG.QuantumForge.Core.QuantumForge.Measure*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Core.QuantumForge.Probabilities(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty[])
      commentId: M:QRG.QuantumForge.Core.QuantumForge.Probabilities(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty[])
      language: CSharp
      name:
        CSharp: Probabilities(QuantumForge.NativeQuantumProperty[])
        VB: Probabilities(QuantumForge.NativeQuantumProperty())
      nameWithType:
        CSharp: QuantumForge.Probabilities(QuantumForge.NativeQuantumProperty[])
        VB: QuantumForge.Probabilities(QuantumForge.NativeQuantumProperty())
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.Probabilities(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty[])
        VB: QRG.QuantumForge.Core.QuantumForge.Probabilities(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: Probabilities
        path: ''
        startLine: 1933
      syntax:
        content:
          CSharp: public static QuantumForge.BasisProbability[] Probabilities(params QuantumForge.NativeQuantumProperty[] props)
          VB: Public Shared Function Probabilities(ParamArray props As QuantumForge.NativeQuantumProperty()) As QuantumForge.BasisProbability()
        parameters:
        - id: props
          type: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty[]
        return:
          type: QRG.QuantumForge.Core.QuantumForge.BasisProbability[]
      overload: QRG.QuantumForge.Core.QuantumForge.Probabilities*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Core.QuantumForge.ReducedDensityMatrix(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty[])
      commentId: M:QRG.QuantumForge.Core.QuantumForge.ReducedDensityMatrix(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty[])
      language: CSharp
      name:
        CSharp: ReducedDensityMatrix(QuantumForge.NativeQuantumProperty[])
        VB: ReducedDensityMatrix(QuantumForge.NativeQuantumProperty())
      nameWithType:
        CSharp: QuantumForge.ReducedDensityMatrix(QuantumForge.NativeQuantumProperty[])
        VB: QuantumForge.ReducedDensityMatrix(QuantumForge.NativeQuantumProperty())
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.ReducedDensityMatrix(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty[])
        VB: QRG.QuantumForge.Core.QuantumForge.ReducedDensityMatrix(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: ReducedDensityMatrix
        path: ''
        startLine: 2018
      syntax:
        content:
          CSharp: public static Complex[, ] ReducedDensityMatrix(params QuantumForge.NativeQuantumProperty[] props)
          VB: Public Shared Function ReducedDensityMatrix(ParamArray props As QuantumForge.NativeQuantumProperty()) As Complex(,)
        parameters:
        - id: props
          type: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty[]
        return:
          type: Complex[,]
      overload: QRG.QuantumForge.Core.QuantumForge.ReducedDensityMatrix*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Core.QuantumForge.MutualInformation(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty[])
      commentId: M:QRG.QuantumForge.Core.QuantumForge.MutualInformation(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty[])
      language: CSharp
      name:
        CSharp: MutualInformation(QuantumForge.NativeQuantumProperty[])
        VB: MutualInformation(QuantumForge.NativeQuantumProperty())
      nameWithType:
        CSharp: QuantumForge.MutualInformation(QuantumForge.NativeQuantumProperty[])
        VB: QuantumForge.MutualInformation(QuantumForge.NativeQuantumProperty())
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.MutualInformation(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty[])
        VB: QRG.QuantumForge.Core.QuantumForge.MutualInformation(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: MutualInformation
        path: ''
        startLine: 2497
      syntax:
        content:
          CSharp: public static float[] MutualInformation(params QuantumForge.NativeQuantumProperty[] props)
          VB: Public Shared Function MutualInformation(ParamArray props As QuantumForge.NativeQuantumProperty()) As Single()
        parameters:
        - id: props
          type: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty[]
        return:
          type: System.Single[]
      overload: QRG.QuantumForge.Core.QuantumForge.MutualInformation*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: QRG.QuantumForge.Core.QuantumForge.CorrelationMatrix(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty[])
      commentId: M:QRG.QuantumForge.Core.QuantumForge.CorrelationMatrix(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty[])
      language: CSharp
      name:
        CSharp: CorrelationMatrix(QuantumForge.NativeQuantumProperty[])
        VB: CorrelationMatrix(QuantumForge.NativeQuantumProperty())
      nameWithType:
        CSharp: QuantumForge.CorrelationMatrix(QuantumForge.NativeQuantumProperty[])
        VB: QuantumForge.CorrelationMatrix(QuantumForge.NativeQuantumProperty())
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.CorrelationMatrix(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty[])
        VB: QRG.QuantumForge.Core.QuantumForge.CorrelationMatrix(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: CorrelationMatrix
        path: ''
        startLine: 2516
      syntax:
        content:
          CSharp: public static float[, ] CorrelationMatrix(params QuantumForge.NativeQuantumProperty[] props)
          VB: Public Shared Function CorrelationMatrix(ParamArray props As QuantumForge.NativeQuantumProperty()) As Single(,)
        parameters:
        - id: props
          type: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty[]
        return:
          type: System.Single[,]
      overload: QRG.QuantumForge.Core.QuantumForge.CorrelationMatrix*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: QRG.QuantumForge.Core.QuantumForge.QForgeError
    commentId: T:QRG.QuantumForge.Core.QuantumForge.QForgeError
    language: CSharp
    name:
      CSharp: QuantumForge.QForgeError
      VB: QuantumForge.QForgeError
    nameWithType:
      CSharp: QuantumForge.QForgeError
      VB: QuantumForge.QForgeError
    qualifiedName:
      CSharp: QRG.QuantumForge.Core.QuantumForge.QForgeError
      VB: QRG.QuantumForge.Core.QuantumForge.QForgeError
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Core
    source:
      id: QForgeError
      path: ''
      startLine: 1392
    syntax:
      content:
        CSharp: public enum QForgeError
        VB: Public Enum QForgeError
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_NONE
      commentId: F:QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_NONE
      language: CSharp
      name:
        CSharp: QFORGE_ERR_NONE
        VB: QFORGE_ERR_NONE
      nameWithType:
        CSharp: QuantumForge.QForgeError.QFORGE_ERR_NONE
        VB: QuantumForge.QForgeError.QFORGE_ERR_NONE
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_NONE
        VB: QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_NONE
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: QFORGE_ERR_NONE
        path: ''
        startLine: 1394
      syntax:
        content:
          CSharp: QFORGE_ERR_NONE = 0
          VB: QFORGE_ERR_NONE = 0
        return:
          type: QRG.QuantumForge.Core.QuantumForge.QForgeError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_NULL_POINTER
      commentId: F:QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_NULL_POINTER
      language: CSharp
      name:
        CSharp: QFORGE_ERR_NULL_POINTER
        VB: QFORGE_ERR_NULL_POINTER
      nameWithType:
        CSharp: QuantumForge.QForgeError.QFORGE_ERR_NULL_POINTER
        VB: QuantumForge.QForgeError.QFORGE_ERR_NULL_POINTER
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_NULL_POINTER
        VB: QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_NULL_POINTER
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: QFORGE_ERR_NULL_POINTER
        path: ''
        startLine: 1395
      syntax:
        content:
          CSharp: QFORGE_ERR_NULL_POINTER = 1
          VB: QFORGE_ERR_NULL_POINTER = 1
        return:
          type: QRG.QuantumForge.Core.QuantumForge.QForgeError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_INVALID_ARGUMENT
      commentId: F:QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_INVALID_ARGUMENT
      language: CSharp
      name:
        CSharp: QFORGE_ERR_INVALID_ARGUMENT
        VB: QFORGE_ERR_INVALID_ARGUMENT
      nameWithType:
        CSharp: QuantumForge.QForgeError.QFORGE_ERR_INVALID_ARGUMENT
        VB: QuantumForge.QForgeError.QFORGE_ERR_INVALID_ARGUMENT
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_INVALID_ARGUMENT
        VB: QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_INVALID_ARGUMENT
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: QFORGE_ERR_INVALID_ARGUMENT
        path: ''
        startLine: 1396
      syntax:
        content:
          CSharp: QFORGE_ERR_INVALID_ARGUMENT = 2
          VB: QFORGE_ERR_INVALID_ARGUMENT = 2
        return:
          type: QRG.QuantumForge.Core.QuantumForge.QForgeError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_BUFFER_TOO_SMALL
      commentId: F:QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_BUFFER_TOO_SMALL
      language: CSharp
      name:
        CSharp: QFORGE_ERR_BUFFER_TOO_SMALL
        VB: QFORGE_ERR_BUFFER_TOO_SMALL
      nameWithType:
        CSharp: QuantumForge.QForgeError.QFORGE_ERR_BUFFER_TOO_SMALL
        VB: QuantumForge.QForgeError.QFORGE_ERR_BUFFER_TOO_SMALL
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_BUFFER_TOO_SMALL
        VB: QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_BUFFER_TOO_SMALL
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: QFORGE_ERR_BUFFER_TOO_SMALL
        path: ''
        startLine: 1397
      syntax:
        content:
          CSharp: QFORGE_ERR_BUFFER_TOO_SMALL = 3
          VB: QFORGE_ERR_BUFFER_TOO_SMALL = 3
        return:
          type: QRG.QuantumForge.Core.QuantumForge.QForgeError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_TARGET_CONTROL_OVERLAP
      commentId: F:QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_TARGET_CONTROL_OVERLAP
      language: CSharp
      name:
        CSharp: QFORGE_ERR_TARGET_CONTROL_OVERLAP
        VB: QFORGE_ERR_TARGET_CONTROL_OVERLAP
      nameWithType:
        CSharp: QuantumForge.QForgeError.QFORGE_ERR_TARGET_CONTROL_OVERLAP
        VB: QuantumForge.QForgeError.QFORGE_ERR_TARGET_CONTROL_OVERLAP
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_TARGET_CONTROL_OVERLAP
        VB: QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_TARGET_CONTROL_OVERLAP
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: QFORGE_ERR_TARGET_CONTROL_OVERLAP
        path: ''
        startLine: 1398
      syntax:
        content:
          CSharp: QFORGE_ERR_TARGET_CONTROL_OVERLAP = 4
          VB: QFORGE_ERR_TARGET_CONTROL_OVERLAP = 4
        return:
          type: QRG.QuantumForge.Core.QuantumForge.QForgeError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_INCOMPATIBLE_DIMENSIONS
      commentId: F:QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_INCOMPATIBLE_DIMENSIONS
      language: CSharp
      name:
        CSharp: QFORGE_ERR_INCOMPATIBLE_DIMENSIONS
        VB: QFORGE_ERR_INCOMPATIBLE_DIMENSIONS
      nameWithType:
        CSharp: QuantumForge.QForgeError.QFORGE_ERR_INCOMPATIBLE_DIMENSIONS
        VB: QuantumForge.QForgeError.QFORGE_ERR_INCOMPATIBLE_DIMENSIONS
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_INCOMPATIBLE_DIMENSIONS
        VB: QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_INCOMPATIBLE_DIMENSIONS
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: QFORGE_ERR_INCOMPATIBLE_DIMENSIONS
        path: ''
        startLine: 1399
      syntax:
        content:
          CSharp: QFORGE_ERR_INCOMPATIBLE_DIMENSIONS = 5
          VB: QFORGE_ERR_INCOMPATIBLE_DIMENSIONS = 5
        return:
          type: QRG.QuantumForge.Core.QuantumForge.QForgeError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_BAD_DIMENSION
      commentId: F:QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_BAD_DIMENSION
      language: CSharp
      name:
        CSharp: QFORGE_ERR_BAD_DIMENSION
        VB: QFORGE_ERR_BAD_DIMENSION
      nameWithType:
        CSharp: QuantumForge.QForgeError.QFORGE_ERR_BAD_DIMENSION
        VB: QuantumForge.QForgeError.QFORGE_ERR_BAD_DIMENSION
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_BAD_DIMENSION
        VB: QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_BAD_DIMENSION
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: QFORGE_ERR_BAD_DIMENSION
        path: ''
        startLine: 1400
      syntax:
        content:
          CSharp: QFORGE_ERR_BAD_DIMENSION = 6
          VB: QFORGE_ERR_BAD_DIMENSION = 6
        return:
          type: QRG.QuantumForge.Core.QuantumForge.QForgeError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_BAD_QUDIT_NUMBER
      commentId: F:QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_BAD_QUDIT_NUMBER
      language: CSharp
      name:
        CSharp: QFORGE_ERR_BAD_QUDIT_NUMBER
        VB: QFORGE_ERR_BAD_QUDIT_NUMBER
      nameWithType:
        CSharp: QuantumForge.QForgeError.QFORGE_ERR_BAD_QUDIT_NUMBER
        VB: QuantumForge.QForgeError.QFORGE_ERR_BAD_QUDIT_NUMBER
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_BAD_QUDIT_NUMBER
        VB: QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_BAD_QUDIT_NUMBER
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: QFORGE_ERR_BAD_QUDIT_NUMBER
        path: ''
        startLine: 1401
      syntax:
        content:
          CSharp: QFORGE_ERR_BAD_QUDIT_NUMBER = 7
          VB: QFORGE_ERR_BAD_QUDIT_NUMBER = 7
        return:
          type: QRG.QuantumForge.Core.QuantumForge.QForgeError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_OUTPUT_BUFFER_SIZE_NOT_EQUAL_TO_PERMUTATIONS
      commentId: F:QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_OUTPUT_BUFFER_SIZE_NOT_EQUAL_TO_PERMUTATIONS
      language: CSharp
      name:
        CSharp: QFORGE_ERR_OUTPUT_BUFFER_SIZE_NOT_EQUAL_TO_PERMUTATIONS
        VB: QFORGE_ERR_OUTPUT_BUFFER_SIZE_NOT_EQUAL_TO_PERMUTATIONS
      nameWithType:
        CSharp: QuantumForge.QForgeError.QFORGE_ERR_OUTPUT_BUFFER_SIZE_NOT_EQUAL_TO_PERMUTATIONS
        VB: QuantumForge.QForgeError.QFORGE_ERR_OUTPUT_BUFFER_SIZE_NOT_EQUAL_TO_PERMUTATIONS
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_OUTPUT_BUFFER_SIZE_NOT_EQUAL_TO_PERMUTATIONS
        VB: QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_OUTPUT_BUFFER_SIZE_NOT_EQUAL_TO_PERMUTATIONS
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: QFORGE_ERR_OUTPUT_BUFFER_SIZE_NOT_EQUAL_TO_PERMUTATIONS
        path: ''
        startLine: 1402
      syntax:
        content:
          CSharp: QFORGE_ERR_OUTPUT_BUFFER_SIZE_NOT_EQUAL_TO_PERMUTATIONS = 8
          VB: QFORGE_ERR_OUTPUT_BUFFER_SIZE_NOT_EQUAL_TO_PERMUTATIONS = 8
        return:
          type: QRG.QuantumForge.Core.QuantumForge.QForgeError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_MAX_STATE_SIZE_EXCEEDED
      commentId: F:QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_MAX_STATE_SIZE_EXCEEDED
      language: CSharp
      name:
        CSharp: QFORGE_ERR_MAX_STATE_SIZE_EXCEEDED
        VB: QFORGE_ERR_MAX_STATE_SIZE_EXCEEDED
      nameWithType:
        CSharp: QuantumForge.QForgeError.QFORGE_ERR_MAX_STATE_SIZE_EXCEEDED
        VB: QuantumForge.QForgeError.QFORGE_ERR_MAX_STATE_SIZE_EXCEEDED
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_MAX_STATE_SIZE_EXCEEDED
        VB: QRG.QuantumForge.Core.QuantumForge.QForgeError.QFORGE_ERR_MAX_STATE_SIZE_EXCEEDED
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: QFORGE_ERR_MAX_STATE_SIZE_EXCEEDED
        path: ''
        startLine: 1403
      syntax:
        content:
          CSharp: QFORGE_ERR_MAX_STATE_SIZE_EXCEEDED = 9
          VB: QFORGE_ERR_MAX_STATE_SIZE_EXCEEDED = 9
        return:
          type: QRG.QuantumForge.Core.QuantumForge.QForgeError
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: QRG.QuantumForge.Core.QuantumForge.BasisProbability
    commentId: T:QRG.QuantumForge.Core.QuantumForge.BasisProbability
    language: CSharp
    name:
      CSharp: QuantumForge.BasisProbability
      VB: QuantumForge.BasisProbability
    nameWithType:
      CSharp: QuantumForge.BasisProbability
      VB: QuantumForge.BasisProbability
    qualifiedName:
      CSharp: QRG.QuantumForge.Core.QuantumForge.BasisProbability
      VB: QRG.QuantumForge.Core.QuantumForge.BasisProbability
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Core
    source:
      id: BasisProbability
      path: ''
      startLine: 1414
    syntax:
      content:
        CSharp: public readonly struct BasisProbability
        VB: Public Structure BasisProbability
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - readonly
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: QRG.QuantumForge.Core.QuantumForge.BasisProbability.Probability
      commentId: F:QRG.QuantumForge.Core.QuantumForge.BasisProbability.Probability
      language: CSharp
      name:
        CSharp: Probability
        VB: Probability
      nameWithType:
        CSharp: QuantumForge.BasisProbability.Probability
        VB: QuantumForge.BasisProbability.Probability
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.BasisProbability.Probability
        VB: QRG.QuantumForge.Core.QuantumForge.BasisProbability.Probability
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: Probability
        path: ''
        startLine: 1416
      syntax:
        content:
          CSharp: public readonly float Probability
          VB: Public ReadOnly Probability As Single
        return:
          type: System.Single
      modifiers:
        CSharp:
        - public
        - readonly
        VB:
        - Public
        - ReadOnly
    - id: QRG.QuantumForge.Core.QuantumForge.BasisProbability.QuditValues
      commentId: F:QRG.QuantumForge.Core.QuantumForge.BasisProbability.QuditValues
      language: CSharp
      name:
        CSharp: QuditValues
        VB: QuditValues
      nameWithType:
        CSharp: QuantumForge.BasisProbability.QuditValues
        VB: QuantumForge.BasisProbability.QuditValues
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.BasisProbability.QuditValues
        VB: QRG.QuantumForge.Core.QuantumForge.BasisProbability.QuditValues
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: QuditValues
        path: ''
        startLine: 1417
      syntax:
        content:
          CSharp: public readonly int[] QuditValues
          VB: Public ReadOnly QuditValues As Integer()
        return:
          type: System.Int32[]
      modifiers:
        CSharp:
        - public
        - readonly
        VB:
        - Public
        - ReadOnly
  - id: QRG.QuantumForge.Core.QuantumForge.Predicate
    commentId: T:QRG.QuantumForge.Core.QuantumForge.Predicate
    language: CSharp
    name:
      CSharp: QuantumForge.Predicate
      VB: QuantumForge.Predicate
    nameWithType:
      CSharp: QuantumForge.Predicate
      VB: QuantumForge.Predicate
    qualifiedName:
      CSharp: QRG.QuantumForge.Core.QuantumForge.Predicate
      VB: QRG.QuantumForge.Core.QuantumForge.Predicate
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Core
    source:
      id: Predicate
      path: ''
      startLine: 1444
    syntax:
      content:
        CSharp: public struct Predicate
        VB: Public Structure Predicate
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.ValueType.ToString
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: QRG.QuantumForge.Core.QuantumForge.Predicate.Property
      commentId: F:QRG.QuantumForge.Core.QuantumForge.Predicate.Property
      language: CSharp
      name:
        CSharp: Property
        VB: Property
      nameWithType:
        CSharp: QuantumForge.Predicate.Property
        VB: QuantumForge.Predicate.Property
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.Predicate.Property
        VB: QRG.QuantumForge.Core.QuantumForge.Predicate.Property
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: Property
        path: ''
        startLine: 1446
      syntax:
        content:
          CSharp: public QuantumForge.NativeQuantumProperty Property
          VB: Public Property As QuantumForge.NativeQuantumProperty
        return:
          type: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Core.QuantumForge.Predicate.Value
      commentId: F:QRG.QuantumForge.Core.QuantumForge.Predicate.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: QuantumForge.Predicate.Value
        VB: QuantumForge.Predicate.Value
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.Predicate.Value
        VB: QRG.QuantumForge.Core.QuantumForge.Predicate.Value
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: Value
        path: ''
        startLine: 1447
      syntax:
        content:
          CSharp: public int Value
          VB: Public Value As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Core.QuantumForge.Predicate.IsEqual
      commentId: F:QRG.QuantumForge.Core.QuantumForge.Predicate.IsEqual
      language: CSharp
      name:
        CSharp: IsEqual
        VB: IsEqual
      nameWithType:
        CSharp: QuantumForge.Predicate.IsEqual
        VB: QuantumForge.Predicate.IsEqual
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.Predicate.IsEqual
        VB: QRG.QuantumForge.Core.QuantumForge.Predicate.IsEqual
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: IsEqual
        path: ''
        startLine: 1448
      syntax:
        content:
          CSharp: public bool IsEqual
          VB: Public IsEqual As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Core.QuantumForge.Predicate.#ctor(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,System.Int32,System.Boolean)
      commentId: M:QRG.QuantumForge.Core.QuantumForge.Predicate.#ctor(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty,System.Int32,System.Boolean)
      language: CSharp
      name:
        CSharp: Predicate(QuantumForge.NativeQuantumProperty, Int32, Boolean)
        VB: Predicate(QuantumForge.NativeQuantumProperty, Int32, Boolean)
      nameWithType:
        CSharp: QuantumForge.Predicate.Predicate(QuantumForge.NativeQuantumProperty, Int32, Boolean)
        VB: QuantumForge.Predicate.Predicate(QuantumForge.NativeQuantumProperty, Int32, Boolean)
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.Predicate.Predicate(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, System.Int32, System.Boolean)
        VB: QRG.QuantumForge.Core.QuantumForge.Predicate.Predicate(QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty, System.Int32, System.Boolean)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: .ctor
        path: ''
        startLine: 1450
      syntax:
        content:
          CSharp: public Predicate(QuantumForge.NativeQuantumProperty property, int value, bool isEqual)
          VB: Public Sub New(property As QuantumForge.NativeQuantumProperty, value As Integer, isEqual As Boolean)
        parameters:
        - id: property
          type: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
        - id: value
          type: System.Int32
        - id: isEqual
          type: System.Boolean
      overload: QRG.QuantumForge.Core.QuantumForge.Predicate.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
    commentId: T:QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
    language: CSharp
    name:
      CSharp: QuantumForge.NativeQuantumProperty
      VB: QuantumForge.NativeQuantumProperty
    nameWithType:
      CSharp: QuantumForge.NativeQuantumProperty
      VB: QuantumForge.NativeQuantumProperty
    qualifiedName:
      CSharp: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
      VB: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Core
    source:
      id: NativeQuantumProperty
      path: ''
      startLine: 1471
    syntax:
      content:
        CSharp: 'public class NativeQuantumProperty : IDisposable'
        VB: >-
          Public Class NativeQuantumProperty

              Implements IDisposable
    inheritance:
    - System.Object
    implements:
    - System.IDisposable
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.Dimension
      commentId: F:QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.Dimension
      language: CSharp
      name:
        CSharp: Dimension
        VB: Dimension
      nameWithType:
        CSharp: QuantumForge.NativeQuantumProperty.Dimension
        VB: QuantumForge.NativeQuantumProperty.Dimension
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.Dimension
        VB: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.Dimension
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: Dimension
        path: ''
        startLine: 1474
      syntax:
        content:
          CSharp: public readonly int Dimension
          VB: Public ReadOnly Dimension As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - readonly
        VB:
        - Public
        - ReadOnly
    - id: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.#ctor(System.Int32)
      commentId: M:QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.#ctor(System.Int32)
      language: CSharp
      name:
        CSharp: NativeQuantumProperty(Int32)
        VB: NativeQuantumProperty(Int32)
      nameWithType:
        CSharp: QuantumForge.NativeQuantumProperty.NativeQuantumProperty(Int32)
        VB: QuantumForge.NativeQuantumProperty.NativeQuantumProperty(Int32)
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.NativeQuantumProperty(System.Int32)
        VB: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.NativeQuantumProperty(System.Int32)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: .ctor
        path: ''
        startLine: 1476
      syntax:
        content:
          CSharp: public NativeQuantumProperty(int dimension)
          VB: Public Sub New(dimension As Integer)
        parameters:
        - id: dimension
          type: System.Int32
      overload: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.#ctor(System.Int32,System.Int32)
      commentId: M:QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.#ctor(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: NativeQuantumProperty(Int32, Int32)
        VB: NativeQuantumProperty(Int32, Int32)
      nameWithType:
        CSharp: QuantumForge.NativeQuantumProperty.NativeQuantumProperty(Int32, Int32)
        VB: QuantumForge.NativeQuantumProperty.NativeQuantumProperty(Int32, Int32)
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.NativeQuantumProperty(System.Int32, System.Int32)
        VB: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.NativeQuantumProperty(System.Int32, System.Int32)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: .ctor
        path: ''
        startLine: 1488
      syntax:
        content:
          CSharp: public NativeQuantumProperty(int dimension, int initial)
          VB: Public Sub New(dimension As Integer, initial As Integer)
        parameters:
        - id: dimension
          type: System.Int32
        - id: initial
          type: System.Int32
      overload: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.Dispose
      commentId: M:QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.Dispose
      language: CSharp
      name:
        CSharp: Dispose()
        VB: Dispose()
      nameWithType:
        CSharp: QuantumForge.NativeQuantumProperty.Dispose()
        VB: QuantumForge.NativeQuantumProperty.Dispose()
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.Dispose()
        VB: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.Dispose()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: Dispose
        path: ''
        startLine: 1515
      syntax:
        content:
          CSharp: public void Dispose()
          VB: Public Sub Dispose
      overload: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.Dispose*
      implements:
      - System.IDisposable.Dispose
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.is_value(System.Int32)
      commentId: M:QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.is_value(System.Int32)
      language: CSharp
      name:
        CSharp: is_value(Int32)
        VB: is_value(Int32)
      nameWithType:
        CSharp: QuantumForge.NativeQuantumProperty.is_value(Int32)
        VB: QuantumForge.NativeQuantumProperty.is_value(Int32)
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.is_value(System.Int32)
        VB: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.is_value(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: is_value
        path: ''
        startLine: 1525
      syntax:
        content:
          CSharp: public QuantumForge.Predicate is_value(int value)
          VB: Public Function is_value(value As Integer) As QuantumForge.Predicate
        parameters:
        - id: value
          type: System.Int32
        return:
          type: QRG.QuantumForge.Core.QuantumForge.Predicate
      overload: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.is_value*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.is_not_value(System.Int32)
      commentId: M:QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.is_not_value(System.Int32)
      language: CSharp
      name:
        CSharp: is_not_value(Int32)
        VB: is_not_value(Int32)
      nameWithType:
        CSharp: QuantumForge.NativeQuantumProperty.is_not_value(Int32)
        VB: QuantumForge.NativeQuantumProperty.is_not_value(Int32)
      qualifiedName:
        CSharp: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.is_not_value(System.Int32)
        VB: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.is_not_value(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: QRG.QuantumForge.Core
      source:
        id: is_not_value
        path: ''
        startLine: 1530
      syntax:
        content:
          CSharp: public QuantumForge.Predicate is_not_value(int value)
          VB: Public Function is_not_value(value As Integer) As QuantumForge.Predicate
        parameters:
        - id: value
          type: System.Int32
        return:
          type: QRG.QuantumForge.Core.QuantumForge.Predicate
      overload: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.is_not_value*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
- id: QRG.QuantumForge.Utility
  commentId: N:QRG.QuantumForge.Utility
  language: CSharp
  name:
    CSharp: QRG.QuantumForge.Utility
    VB: QRG.QuantumForge.Utility
  nameWithType:
    CSharp: QRG.QuantumForge.Utility
    VB: QRG.QuantumForge.Utility
  qualifiedName:
    CSharp: QRG.QuantumForge.Utility
    VB: QRG.QuantumForge.Utility
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: QRG.QuantumForge.Utility.ButtonPressOnKey
    commentId: T:QRG.QuantumForge.Utility.ButtonPressOnKey
    language: CSharp
    name:
      CSharp: ButtonPressOnKey
      VB: ButtonPressOnKey
    nameWithType:
      CSharp: ButtonPressOnKey
      VB: ButtonPressOnKey
    qualifiedName:
      CSharp: QRG.QuantumForge.Utility.ButtonPressOnKey
      VB: QRG.QuantumForge.Utility.ButtonPressOnKey
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Utility
    source:
      id: ButtonPressOnKey
      path: ''
      startLine: 3110
    syntax:
      content:
        CSharp: 'public class ButtonPressOnKey : MonoBehaviour'
        VB: >-
          Public Class ButtonPressOnKey

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: QRG.QuantumForge.Utility.RotateOnPhase
    commentId: T:QRG.QuantumForge.Utility.RotateOnPhase
    language: CSharp
    name:
      CSharp: RotateOnPhase
      VB: RotateOnPhase
    nameWithType:
      CSharp: RotateOnPhase
      VB: RotateOnPhase
    qualifiedName:
      CSharp: QRG.QuantumForge.Utility.RotateOnPhase
      VB: QRG.QuantumForge.Utility.RotateOnPhase
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Utility
    source:
      id: RotateOnPhase
      path: ''
      startLine: 3179
    syntax:
      content:
        CSharp: 'public class RotateOnPhase : MonoBehaviour'
        VB: >-
          Public Class RotateOnPhase

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: QRG.QuantumForge.Utility.ScaleProbability
    commentId: T:QRG.QuantumForge.Utility.ScaleProbability
    language: CSharp
    name:
      CSharp: ScaleProbability
      VB: ScaleProbability
    nameWithType:
      CSharp: ScaleProbability
      VB: ScaleProbability
    qualifiedName:
      CSharp: QRG.QuantumForge.Utility.ScaleProbability
      VB: QRG.QuantumForge.Utility.ScaleProbability
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Utility
    source:
      id: ScaleProbability
      path: ''
      startLine: 3253
    syntax:
      content:
        CSharp: 'public class ScaleProbability : MonoBehaviour'
        VB: >-
          Public Class ScaleProbability

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: QRG.QuantumForge.Utility.Trigger
    commentId: T:QRG.QuantumForge.Utility.Trigger
    language: CSharp
    name:
      CSharp: Trigger
      VB: Trigger
    nameWithType:
      CSharp: Trigger
      VB: Trigger
    qualifiedName:
      CSharp: QRG.QuantumForge.Utility.Trigger
      VB: QRG.QuantumForge.Utility.Trigger
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: QRG.QuantumForge.Utility
    source:
      id: Trigger
      path: ''
      startLine: 3312
    syntax:
      content:
        CSharp: 'public class Trigger : MonoBehaviour'
        VB: >-
          Public Class Trigger

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
references:
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  System.IEquatable`1:
    name:
      CSharp:
      - id: System.IEquatable`1
        name: IEquatable
        nameWithType: IEquatable
        qualifiedName: System.IEquatable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.IEquatable`1
        name: IEquatable
        nameWithType: IEquatable
        qualifiedName: System.IEquatable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.IEquatable`1
  System.IEquatable{QRG.QuantumForge.Runtime.BasisValue}:
    name:
      CSharp:
      - id: System.IEquatable`1
        name: IEquatable
        nameWithType: IEquatable
        qualifiedName: System.IEquatable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: QRG.QuantumForge.Runtime.BasisValue
        name: BasisValue
        nameWithType: BasisValue
        qualifiedName: QRG.QuantumForge.Runtime.BasisValue
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.IEquatable`1
        name: IEquatable
        nameWithType: IEquatable
        qualifiedName: System.IEquatable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: QRG.QuantumForge.Runtime.BasisValue
        name: BasisValue
        nameWithType: BasisValue
        qualifiedName: QRG.QuantumForge.Runtime.BasisValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.IEquatable`1
    parent: System
    commentId: T:System.IEquatable{QRG.QuantumForge.Runtime.BasisValue}
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  QRG.QuantumForge.Runtime.BasisValue:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.BasisValue
        name: BasisValue
        nameWithType: BasisValue
        qualifiedName: QRG.QuantumForge.Runtime.BasisValue
      VB:
      - id: QRG.QuantumForge.Runtime.BasisValue
        name: BasisValue
        nameWithType: BasisValue
        qualifiedName: QRG.QuantumForge.Runtime.BasisValue
    isDefinition: true
    parent: QRG.QuantumForge.Runtime
    commentId: T:QRG.QuantumForge.Runtime.BasisValue
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  QRG.QuantumForge.Runtime:
    name:
      CSharp:
      - name: QRG.QuantumForge.Runtime
        nameWithType: QRG.QuantumForge.Runtime
        qualifiedName: QRG.QuantumForge.Runtime
      VB:
      - name: QRG.QuantumForge.Runtime
        nameWithType: QRG.QuantumForge.Runtime
        qualifiedName: QRG.QuantumForge.Runtime
    isDefinition: true
    commentId: N:QRG.QuantumForge.Runtime
  QRG.QuantumForge.Runtime.BasisValue.Equals*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.BasisValue.Equals*
        name: Equals
        nameWithType: BasisValue.Equals
        qualifiedName: QRG.QuantumForge.Runtime.BasisValue.Equals
      VB:
      - id: QRG.QuantumForge.Runtime.BasisValue.Equals*
        name: Equals
        nameWithType: BasisValue.Equals
        qualifiedName: QRG.QuantumForge.Runtime.BasisValue.Equals
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.BasisValue.Equals
  System.IEquatable`1.Equals(`0):
    name:
      CSharp:
      - id: System.IEquatable`1.Equals(`0)
        name: Equals
        nameWithType: IEquatable<T>.Equals
        qualifiedName: System.IEquatable<T>.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.IEquatable`1.Equals(`0)
        name: Equals
        nameWithType: IEquatable(Of T).Equals
        qualifiedName: System.IEquatable(Of T).Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:System.IEquatable`1.Equals(`0)
  System.IEquatable{QRG.QuantumForge.Runtime.BasisValue}.Equals(QRG.QuantumForge.Runtime.BasisValue):
    name:
      CSharp:
      - id: System.IEquatable`1.Equals(`0)
        name: Equals
        nameWithType: IEquatable<BasisValue>.Equals
        qualifiedName: System.IEquatable<QRG.QuantumForge.Runtime.BasisValue>.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: QRG.QuantumForge.Runtime.BasisValue
        name: BasisValue
        nameWithType: BasisValue
        qualifiedName: QRG.QuantumForge.Runtime.BasisValue
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.IEquatable`1.Equals(`0)
        name: Equals
        nameWithType: IEquatable(Of BasisValue).Equals
        qualifiedName: System.IEquatable(Of QRG.QuantumForge.Runtime.BasisValue).Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: QRG.QuantumForge.Runtime.BasisValue
        name: BasisValue
        nameWithType: BasisValue
        qualifiedName: QRG.QuantumForge.Runtime.BasisValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.IEquatable`1.Equals(`0)
    parent: System.IEquatable{QRG.QuantumForge.Runtime.BasisValue}
    commentId: M:System.IEquatable{QRG.QuantumForge.Runtime.BasisValue}.Equals(QRG.QuantumForge.Runtime.BasisValue)
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  QRG.QuantumForge.Runtime.BasisValue.GetHashCode*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.BasisValue.GetHashCode*
        name: GetHashCode
        nameWithType: BasisValue.GetHashCode
        qualifiedName: QRG.QuantumForge.Runtime.BasisValue.GetHashCode
      VB:
      - id: QRG.QuantumForge.Runtime.BasisValue.GetHashCode*
        name: GetHashCode
        nameWithType: BasisValue.GetHashCode
        qualifiedName: QRG.QuantumForge.Runtime.BasisValue.GetHashCode
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.BasisValue.GetHashCode
  System.SerializableAttribute:
    name:
      CSharp:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        nameWithType: SerializableAttribute
        qualifiedName: System.SerializableAttribute
        isExternal: true
      VB:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        nameWithType: SerializableAttribute
        qualifiedName: System.SerializableAttribute
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.SerializableAttribute
  System.SerializableAttribute.#ctor:
    name:
      CSharp:
      - id: System.SerializableAttribute.#ctor
        name: SerializableAttribute
        nameWithType: SerializableAttribute.SerializableAttribute
        qualifiedName: System.SerializableAttribute.SerializableAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.SerializableAttribute.#ctor
        name: SerializableAttribute
        nameWithType: SerializableAttribute.SerializableAttribute
        qualifiedName: System.SerializableAttribute.SerializableAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.SerializableAttribute
    commentId: M:System.SerializableAttribute.#ctor
  System.Collections.Generic.List`1:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.List`1
  System.Collections.Generic:
    name:
      CSharp:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
        isExternal: true
      VB:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
    isDefinition: true
    commentId: N:System.Collections.Generic
  System.Collections.Generic.List{QRG.QuantumForge.Runtime.BasisValue}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: QRG.QuantumForge.Runtime.BasisValue
        name: BasisValue
        nameWithType: BasisValue
        qualifiedName: QRG.QuantumForge.Runtime.BasisValue
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: QRG.QuantumForge.Runtime.BasisValue
        name: BasisValue
        nameWithType: BasisValue
        qualifiedName: QRG.QuantumForge.Runtime.BasisValue
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{QRG.QuantumForge.Runtime.BasisValue}
  QRG.QuantumForge.Runtime.Basis.Dimension*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.Basis.Dimension*
        name: Dimension
        nameWithType: Basis.Dimension
        qualifiedName: QRG.QuantumForge.Runtime.Basis.Dimension
      VB:
      - id: QRG.QuantumForge.Runtime.Basis.Dimension*
        name: Dimension
        nameWithType: Basis.Dimension
        qualifiedName: QRG.QuantumForge.Runtime.Basis.Dimension
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.Basis.Dimension
  QRG.QuantumForge.Runtime.Basis:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.Basis
        name: Basis
        nameWithType: Basis
        qualifiedName: QRG.QuantumForge.Runtime.Basis
      VB:
      - id: QRG.QuantumForge.Runtime.Basis
        name: Basis
        nameWithType: Basis
        qualifiedName: QRG.QuantumForge.Runtime.Basis
    isDefinition: true
    parent: QRG.QuantumForge.Runtime
    commentId: T:QRG.QuantumForge.Runtime.Basis
  QRG.QuantumForge.Runtime.BasisValueDropdownAttribute.#ctor*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.BasisValueDropdownAttribute.#ctor*
        name: BasisValueDropdownAttribute
        nameWithType: BasisValueDropdownAttribute.BasisValueDropdownAttribute
        qualifiedName: QRG.QuantumForge.Runtime.BasisValueDropdownAttribute.BasisValueDropdownAttribute
      VB:
      - id: QRG.QuantumForge.Runtime.BasisValueDropdownAttribute.#ctor*
        name: BasisValueDropdownAttribute
        nameWithType: BasisValueDropdownAttribute.BasisValueDropdownAttribute
        qualifiedName: QRG.QuantumForge.Runtime.BasisValueDropdownAttribute.BasisValueDropdownAttribute
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.BasisValueDropdownAttribute.#ctor
  QRG.QuantumForge.Runtime.BasisValueDropdownAttribute:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.BasisValueDropdownAttribute
        name: BasisValueDropdownAttribute
        nameWithType: BasisValueDropdownAttribute
        qualifiedName: QRG.QuantumForge.Runtime.BasisValueDropdownAttribute
      VB:
      - id: QRG.QuantumForge.Runtime.BasisValueDropdownAttribute
        name: BasisValueDropdownAttribute
        nameWithType: BasisValueDropdownAttribute
        qualifiedName: QRG.QuantumForge.Runtime.BasisValueDropdownAttribute
    isDefinition: true
    commentId: T:QRG.QuantumForge.Runtime.BasisValueDropdownAttribute
  QRG.QuantumForge.Runtime.QuantumProperty:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.QuantumProperty
        name: QuantumProperty
        nameWithType: QuantumProperty
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty
      VB:
      - id: QRG.QuantumForge.Runtime.QuantumProperty
        name: QuantumProperty
        nameWithType: QuantumProperty
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty
    isDefinition: true
    parent: QRG.QuantumForge.Runtime
    commentId: T:QRG.QuantumForge.Runtime.QuantumProperty
  QRG.QuantumForge.Runtime.Predicate:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.Predicate
        name: Predicate
        nameWithType: Predicate
        qualifiedName: QRG.QuantumForge.Runtime.Predicate
      VB:
      - id: QRG.QuantumForge.Runtime.Predicate
        name: Predicate
        nameWithType: Predicate
        qualifiedName: QRG.QuantumForge.Runtime.Predicate
    isDefinition: true
    parent: QRG.QuantumForge.Runtime
    commentId: T:QRG.QuantumForge.Runtime.Predicate
  QRG.QuantumForge.Runtime.QuantumProperty.Dimension*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.Dimension*
        name: Dimension
        nameWithType: QuantumProperty.Dimension
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.Dimension
      VB:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.Dimension*
        name: Dimension
        nameWithType: QuantumProperty.Dimension
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.Dimension
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.QuantumProperty.Dimension
  QRG.QuantumForge.Runtime.QuantumProperty.is_value*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.is_value*
        name: is_value
        nameWithType: QuantumProperty.is_value
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.is_value
      VB:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.is_value*
        name: is_value
        nameWithType: QuantumProperty.is_value
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.is_value
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.QuantumProperty.is_value
  QRG.QuantumForge.Runtime.QuantumProperty.is_not_value*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.is_not_value*
        name: is_not_value
        nameWithType: QuantumProperty.is_not_value
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.is_not_value
      VB:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.is_not_value*
        name: is_not_value
        nameWithType: QuantumProperty.is_not_value
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.is_not_value
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.QuantumProperty.is_not_value
  QRG.QuantumForge.Runtime.Predicate[]:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.Predicate
        name: Predicate
        nameWithType: Predicate
        qualifiedName: QRG.QuantumForge.Runtime.Predicate
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: QRG.QuantumForge.Runtime.Predicate
        name: Predicate
        nameWithType: Predicate
        qualifiedName: QRG.QuantumForge.Runtime.Predicate
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  QRG.QuantumForge.Runtime.QuantumProperty.Cycle*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.Cycle*
        name: Cycle
        nameWithType: QuantumProperty.Cycle
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.Cycle
      VB:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.Cycle*
        name: Cycle
        nameWithType: QuantumProperty.Cycle
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.Cycle
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.QuantumProperty.Cycle
  System.Single:
    name:
      CSharp:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      VB:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Single
  QRG.QuantumForge.Runtime.QuantumProperty.Shift*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.Shift*
        name: Shift
        nameWithType: QuantumProperty.Shift
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.Shift
      VB:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.Shift*
        name: Shift
        nameWithType: QuantumProperty.Shift
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.Shift
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.QuantumProperty.Shift
  QRG.QuantumForge.Runtime.QuantumProperty.Clock*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.Clock*
        name: Clock
        nameWithType: QuantumProperty.Clock
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.Clock
      VB:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.Clock*
        name: Clock
        nameWithType: QuantumProperty.Clock
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.Clock
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.QuantumProperty.Clock
  QRG.QuantumForge.Runtime.QuantumProperty.Hadamard*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.Hadamard*
        name: Hadamard
        nameWithType: QuantumProperty.Hadamard
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.Hadamard
      VB:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.Hadamard*
        name: Hadamard
        nameWithType: QuantumProperty.Hadamard
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.Hadamard
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.QuantumProperty.Hadamard
  QRG.QuantumForge.Runtime.QuantumProperty.InverseHadamard*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.InverseHadamard*
        name: InverseHadamard
        nameWithType: QuantumProperty.InverseHadamard
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.InverseHadamard
      VB:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.InverseHadamard*
        name: InverseHadamard
        nameWithType: QuantumProperty.InverseHadamard
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.InverseHadamard
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.QuantumProperty.InverseHadamard
  QRG.QuantumForge.Runtime.QuantumProperty.PhaseRotate*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.PhaseRotate*
        name: PhaseRotate
        nameWithType: QuantumProperty.PhaseRotate
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.PhaseRotate
      VB:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.PhaseRotate*
        name: PhaseRotate
        nameWithType: QuantumProperty.PhaseRotate
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.PhaseRotate
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.QuantumProperty.PhaseRotate
  QRG.QuantumForge.Runtime.QuantumProperty.Swap*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.Swap*
        name: Swap
        nameWithType: QuantumProperty.Swap
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.Swap
      VB:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.Swap*
        name: Swap
        nameWithType: QuantumProperty.Swap
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.Swap
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.QuantumProperty.Swap
  QRG.QuantumForge.Runtime.QuantumProperty.ISwap*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.ISwap*
        name: ISwap
        nameWithType: QuantumProperty.ISwap
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.ISwap
      VB:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.ISwap*
        name: ISwap
        nameWithType: QuantumProperty.ISwap
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.ISwap
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.QuantumProperty.ISwap
  QRG.QuantumForge.Runtime.QuantumProperty.NCycle*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.NCycle*
        name: NCycle
        nameWithType: QuantumProperty.NCycle
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.NCycle
      VB:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.NCycle*
        name: NCycle
        nameWithType: QuantumProperty.NCycle
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.NCycle
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.QuantumProperty.NCycle
  QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability[]:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability
        name: QuantumProperty.BasisProbability
        nameWithType: QuantumProperty.BasisProbability
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability
        name: QuantumProperty.BasisProbability
        nameWithType: QuantumProperty.BasisProbability
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  QRG.QuantumForge.Runtime.QuantumProperty[]:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.QuantumProperty
        name: QuantumProperty
        nameWithType: QuantumProperty
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: QRG.QuantumForge.Runtime.QuantumProperty
        name: QuantumProperty
        nameWithType: QuantumProperty
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  QRG.QuantumForge.Runtime.QuantumProperty.Probabilities*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.Probabilities*
        name: Probabilities
        nameWithType: QuantumProperty.Probabilities
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.Probabilities
      VB:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.Probabilities*
        name: Probabilities
        nameWithType: QuantumProperty.Probabilities
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.Probabilities
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.QuantumProperty.Probabilities
  Complex[,]:
    name:
      CSharp:
      - id: Complex
        name: Complex
        nameWithType: Complex
        qualifiedName: Complex
        isExternal: true
      - name: '[,]'
        nameWithType: '[,]'
        qualifiedName: '[,]'
      VB:
      - id: Complex
        name: Complex
        nameWithType: Complex
        qualifiedName: Complex
        isExternal: true
      - name: (,)
        nameWithType: (,)
        qualifiedName: (,)
    isDefinition: false
  QRG.QuantumForge.Runtime.QuantumProperty.ReducedDensityMatrix*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.ReducedDensityMatrix*
        name: ReducedDensityMatrix
        nameWithType: QuantumProperty.ReducedDensityMatrix
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.ReducedDensityMatrix
      VB:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.ReducedDensityMatrix*
        name: ReducedDensityMatrix
        nameWithType: QuantumProperty.ReducedDensityMatrix
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.ReducedDensityMatrix
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.QuantumProperty.ReducedDensityMatrix
  System.Single[]:
    name:
      CSharp:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  QRG.QuantumForge.Runtime.QuantumProperty.MutualInformation*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.MutualInformation*
        name: MutualInformation
        nameWithType: QuantumProperty.MutualInformation
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.MutualInformation
      VB:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.MutualInformation*
        name: MutualInformation
        nameWithType: QuantumProperty.MutualInformation
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.MutualInformation
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.QuantumProperty.MutualInformation
  System.Single[,]:
    name:
      CSharp:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: '[,]'
        nameWithType: '[,]'
        qualifiedName: '[,]'
      VB:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: (,)
        nameWithType: (,)
        qualifiedName: (,)
    isDefinition: false
  QRG.QuantumForge.Runtime.QuantumProperty.CorrelationMatrix*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.CorrelationMatrix*
        name: CorrelationMatrix
        nameWithType: QuantumProperty.CorrelationMatrix
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.CorrelationMatrix
      VB:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.CorrelationMatrix*
        name: CorrelationMatrix
        nameWithType: QuantumProperty.CorrelationMatrix
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.CorrelationMatrix
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.QuantumProperty.CorrelationMatrix
  System.Int32[]:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  QRG.QuantumForge.Runtime.QuantumProperty.Measure*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.Measure*
        name: Measure
        nameWithType: QuantumProperty.Measure
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.Measure
      VB:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.Measure*
        name: Measure
        nameWithType: QuantumProperty.Measure
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.Measure
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.QuantumProperty.Measure
  System.ValueType:
    name:
      CSharp:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
      VB:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.ValueType
  System.ValueType.Equals(System.Object):
    name:
      CSharp:
      - id: System.ValueType.Equals(System.Object)
        name: Equals
        nameWithType: ValueType.Equals
        qualifiedName: System.ValueType.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.Equals(System.Object)
        name: Equals
        nameWithType: ValueType.Equals
        qualifiedName: System.ValueType.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.Equals(System.Object)
  System.ValueType.GetHashCode:
    name:
      CSharp:
      - id: System.ValueType.GetHashCode
        name: GetHashCode
        nameWithType: ValueType.GetHashCode
        qualifiedName: System.ValueType.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.GetHashCode
        name: GetHashCode
        nameWithType: ValueType.GetHashCode
        qualifiedName: System.ValueType.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.GetHashCode
  QRG.QuantumForge.Runtime.BasisValue[]:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.BasisValue
        name: BasisValue
        nameWithType: BasisValue
        qualifiedName: QRG.QuantumForge.Runtime.BasisValue
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: QRG.QuantumForge.Runtime.BasisValue
        name: BasisValue
        nameWithType: BasisValue
        qualifiedName: QRG.QuantumForge.Runtime.BasisValue
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability.#ctor*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability.#ctor*
        name: BasisProbability
        nameWithType: QuantumProperty.BasisProbability.BasisProbability
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability.BasisProbability
      VB:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability.#ctor*
        name: BasisProbability
        nameWithType: QuantumProperty.BasisProbability.BasisProbability
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability.BasisProbability
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability.#ctor
  System.ValueType.ToString:
    name:
      CSharp:
      - id: System.ValueType.ToString
        name: ToString
        nameWithType: ValueType.ToString
        qualifiedName: System.ValueType.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.ToString
        name: ToString
        nameWithType: ValueType.ToString
        qualifiedName: System.ValueType.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.ToString
  QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability.ToString*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability.ToString*
        name: ToString
        nameWithType: QuantumProperty.BasisProbability.ToString
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability.ToString
      VB:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability.ToString*
        name: ToString
        nameWithType: QuantumProperty.BasisProbability.ToString
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability.ToString
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability.ToString
  QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability
        name: QuantumProperty.BasisProbability
        nameWithType: QuantumProperty.BasisProbability
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability
      VB:
      - id: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability
        name: QuantumProperty.BasisProbability
        nameWithType: QuantumProperty.BasisProbability
        qualifiedName: QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability
    isDefinition: true
    commentId: T:QRG.QuantumForge.Runtime.QuantumProperty.BasisProbability
  QRG.QuantumForge.Runtime.QuantumPropertyEvent:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.QuantumPropertyEvent
        name: QuantumPropertyEvent
        nameWithType: QuantumPropertyEvent
        qualifiedName: QRG.QuantumForge.Runtime.QuantumPropertyEvent
      VB:
      - id: QRG.QuantumForge.Runtime.QuantumPropertyEvent
        name: QuantumPropertyEvent
        nameWithType: QuantumPropertyEvent
        qualifiedName: QRG.QuantumForge.Runtime.QuantumPropertyEvent
    isDefinition: true
    parent: QRG.QuantumForge.Runtime
    commentId: T:QRG.QuantumForge.Runtime.QuantumPropertyEvent
  QRG.QuantumForge.Runtime.QuantumPropertyTrigger:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.QuantumPropertyTrigger
        name: QuantumPropertyTrigger
        nameWithType: QuantumPropertyTrigger
        qualifiedName: QRG.QuantumForge.Runtime.QuantumPropertyTrigger
      VB:
      - id: QRG.QuantumForge.Runtime.QuantumPropertyTrigger
        name: QuantumPropertyTrigger
        nameWithType: QuantumPropertyTrigger
        qualifiedName: QRG.QuantumForge.Runtime.QuantumPropertyTrigger
    isDefinition: true
    commentId: T:QRG.QuantumForge.Runtime.QuantumPropertyTrigger
  QRG.QuantumForge.Runtime.IQuantumAction:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.IQuantumAction
        name: IQuantumAction
        nameWithType: IQuantumAction
        qualifiedName: QRG.QuantumForge.Runtime.IQuantumAction
      VB:
      - id: QRG.QuantumForge.Runtime.IQuantumAction
        name: IQuantumAction
        nameWithType: IQuantumAction
        qualifiedName: QRG.QuantumForge.Runtime.IQuantumAction
    isDefinition: true
    parent: QRG.QuantumForge.Runtime
    commentId: T:QRG.QuantumForge.Runtime.IQuantumAction
  QRG.QuantumForge.Runtime.Clock.Predicates*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.Clock.Predicates*
        name: Predicates
        nameWithType: Clock.Predicates
        qualifiedName: QRG.QuantumForge.Runtime.Clock.Predicates
      VB:
      - id: QRG.QuantumForge.Runtime.Clock.Predicates*
        name: Predicates
        nameWithType: Clock.Predicates
        qualifiedName: QRG.QuantumForge.Runtime.Clock.Predicates
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.Clock.Predicates
  QRG.QuantumForge.Runtime.IQuantumAction.Predicates:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.IQuantumAction.Predicates
        name: Predicates
        nameWithType: IQuantumAction.Predicates
        qualifiedName: QRG.QuantumForge.Runtime.IQuantumAction.Predicates
      VB:
      - id: QRG.QuantumForge.Runtime.IQuantumAction.Predicates
        name: Predicates
        nameWithType: IQuantumAction.Predicates
        qualifiedName: QRG.QuantumForge.Runtime.IQuantumAction.Predicates
    isDefinition: true
    parent: QRG.QuantumForge.Runtime.IQuantumAction
    commentId: P:QRG.QuantumForge.Runtime.IQuantumAction.Predicates
  QRG.QuantumForge.Runtime.Clock.TargetProperties*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.Clock.TargetProperties*
        name: TargetProperties
        nameWithType: Clock.TargetProperties
        qualifiedName: QRG.QuantumForge.Runtime.Clock.TargetProperties
      VB:
      - id: QRG.QuantumForge.Runtime.Clock.TargetProperties*
        name: TargetProperties
        nameWithType: Clock.TargetProperties
        qualifiedName: QRG.QuantumForge.Runtime.Clock.TargetProperties
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.Clock.TargetProperties
  QRG.QuantumForge.Runtime.IQuantumAction.TargetProperties:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.IQuantumAction.TargetProperties
        name: TargetProperties
        nameWithType: IQuantumAction.TargetProperties
        qualifiedName: QRG.QuantumForge.Runtime.IQuantumAction.TargetProperties
      VB:
      - id: QRG.QuantumForge.Runtime.IQuantumAction.TargetProperties
        name: TargetProperties
        nameWithType: IQuantumAction.TargetProperties
        qualifiedName: QRG.QuantumForge.Runtime.IQuantumAction.TargetProperties
    isDefinition: true
    parent: QRG.QuantumForge.Runtime.IQuantumAction
    commentId: P:QRG.QuantumForge.Runtime.IQuantumAction.TargetProperties
  QRG.QuantumForge.Runtime.Clock.apply*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.Clock.apply*
        name: apply
        nameWithType: Clock.apply
        qualifiedName: QRG.QuantumForge.Runtime.Clock.apply
      VB:
      - id: QRG.QuantumForge.Runtime.Clock.apply*
        name: apply
        nameWithType: Clock.apply
        qualifiedName: QRG.QuantumForge.Runtime.Clock.apply
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.Clock.apply
  QRG.QuantumForge.Runtime.IQuantumAction.apply:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.IQuantumAction.apply
        name: apply
        nameWithType: IQuantumAction.apply
        qualifiedName: QRG.QuantumForge.Runtime.IQuantumAction.apply
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: QRG.QuantumForge.Runtime.IQuantumAction.apply
        name: apply
        nameWithType: IQuantumAction.apply
        qualifiedName: QRG.QuantumForge.Runtime.IQuantumAction.apply
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: QRG.QuantumForge.Runtime.IQuantumAction
    commentId: M:QRG.QuantumForge.Runtime.IQuantumAction.apply
  QRG.QuantumForge.Runtime.Clock:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.Clock
        name: Clock
        nameWithType: Clock
        qualifiedName: QRG.QuantumForge.Runtime.Clock
      VB:
      - id: QRG.QuantumForge.Runtime.Clock
        name: Clock
        nameWithType: Clock
        qualifiedName: QRG.QuantumForge.Runtime.Clock
    isDefinition: true
    commentId: T:QRG.QuantumForge.Runtime.Clock
  QRG.QuantumForge.Runtime.Cycle.Predicates*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.Cycle.Predicates*
        name: Predicates
        nameWithType: Cycle.Predicates
        qualifiedName: QRG.QuantumForge.Runtime.Cycle.Predicates
      VB:
      - id: QRG.QuantumForge.Runtime.Cycle.Predicates*
        name: Predicates
        nameWithType: Cycle.Predicates
        qualifiedName: QRG.QuantumForge.Runtime.Cycle.Predicates
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.Cycle.Predicates
  QRG.QuantumForge.Runtime.Cycle.TargetProperties*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.Cycle.TargetProperties*
        name: TargetProperties
        nameWithType: Cycle.TargetProperties
        qualifiedName: QRG.QuantumForge.Runtime.Cycle.TargetProperties
      VB:
      - id: QRG.QuantumForge.Runtime.Cycle.TargetProperties*
        name: TargetProperties
        nameWithType: Cycle.TargetProperties
        qualifiedName: QRG.QuantumForge.Runtime.Cycle.TargetProperties
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.Cycle.TargetProperties
  QRG.QuantumForge.Runtime.Cycle.apply*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.Cycle.apply*
        name: apply
        nameWithType: Cycle.apply
        qualifiedName: QRG.QuantumForge.Runtime.Cycle.apply
      VB:
      - id: QRG.QuantumForge.Runtime.Cycle.apply*
        name: apply
        nameWithType: Cycle.apply
        qualifiedName: QRG.QuantumForge.Runtime.Cycle.apply
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.Cycle.apply
  QRG.QuantumForge.Runtime.Cycle:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.Cycle
        name: Cycle
        nameWithType: Cycle
        qualifiedName: QRG.QuantumForge.Runtime.Cycle
      VB:
      - id: QRG.QuantumForge.Runtime.Cycle
        name: Cycle
        nameWithType: Cycle
        qualifiedName: QRG.QuantumForge.Runtime.Cycle
    isDefinition: true
    commentId: T:QRG.QuantumForge.Runtime.Cycle
  QRG.QuantumForge.Runtime.Hadamard.Predicates*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.Hadamard.Predicates*
        name: Predicates
        nameWithType: Hadamard.Predicates
        qualifiedName: QRG.QuantumForge.Runtime.Hadamard.Predicates
      VB:
      - id: QRG.QuantumForge.Runtime.Hadamard.Predicates*
        name: Predicates
        nameWithType: Hadamard.Predicates
        qualifiedName: QRG.QuantumForge.Runtime.Hadamard.Predicates
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.Hadamard.Predicates
  QRG.QuantumForge.Runtime.Hadamard.TargetProperties*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.Hadamard.TargetProperties*
        name: TargetProperties
        nameWithType: Hadamard.TargetProperties
        qualifiedName: QRG.QuantumForge.Runtime.Hadamard.TargetProperties
      VB:
      - id: QRG.QuantumForge.Runtime.Hadamard.TargetProperties*
        name: TargetProperties
        nameWithType: Hadamard.TargetProperties
        qualifiedName: QRG.QuantumForge.Runtime.Hadamard.TargetProperties
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.Hadamard.TargetProperties
  QRG.QuantumForge.Runtime.Hadamard.apply*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.Hadamard.apply*
        name: apply
        nameWithType: Hadamard.apply
        qualifiedName: QRG.QuantumForge.Runtime.Hadamard.apply
      VB:
      - id: QRG.QuantumForge.Runtime.Hadamard.apply*
        name: apply
        nameWithType: Hadamard.apply
        qualifiedName: QRG.QuantumForge.Runtime.Hadamard.apply
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.Hadamard.apply
  QRG.QuantumForge.Runtime.Hadamard:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.Hadamard
        name: Hadamard
        nameWithType: Hadamard
        qualifiedName: QRG.QuantumForge.Runtime.Hadamard
      VB:
      - id: QRG.QuantumForge.Runtime.Hadamard
        name: Hadamard
        nameWithType: Hadamard
        qualifiedName: QRG.QuantumForge.Runtime.Hadamard
    isDefinition: true
    commentId: T:QRG.QuantumForge.Runtime.Hadamard
  QRG.QuantumForge.Runtime.InverseHadamard.Predicates*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.InverseHadamard.Predicates*
        name: Predicates
        nameWithType: InverseHadamard.Predicates
        qualifiedName: QRG.QuantumForge.Runtime.InverseHadamard.Predicates
      VB:
      - id: QRG.QuantumForge.Runtime.InverseHadamard.Predicates*
        name: Predicates
        nameWithType: InverseHadamard.Predicates
        qualifiedName: QRG.QuantumForge.Runtime.InverseHadamard.Predicates
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.InverseHadamard.Predicates
  QRG.QuantumForge.Runtime.InverseHadamard.TargetProperties*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.InverseHadamard.TargetProperties*
        name: TargetProperties
        nameWithType: InverseHadamard.TargetProperties
        qualifiedName: QRG.QuantumForge.Runtime.InverseHadamard.TargetProperties
      VB:
      - id: QRG.QuantumForge.Runtime.InverseHadamard.TargetProperties*
        name: TargetProperties
        nameWithType: InverseHadamard.TargetProperties
        qualifiedName: QRG.QuantumForge.Runtime.InverseHadamard.TargetProperties
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.InverseHadamard.TargetProperties
  QRG.QuantumForge.Runtime.InverseHadamard.apply*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.InverseHadamard.apply*
        name: apply
        nameWithType: InverseHadamard.apply
        qualifiedName: QRG.QuantumForge.Runtime.InverseHadamard.apply
      VB:
      - id: QRG.QuantumForge.Runtime.InverseHadamard.apply*
        name: apply
        nameWithType: InverseHadamard.apply
        qualifiedName: QRG.QuantumForge.Runtime.InverseHadamard.apply
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.InverseHadamard.apply
  QRG.QuantumForge.Runtime.InverseHadamard:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.InverseHadamard
        name: InverseHadamard
        nameWithType: InverseHadamard
        qualifiedName: QRG.QuantumForge.Runtime.InverseHadamard
      VB:
      - id: QRG.QuantumForge.Runtime.InverseHadamard
        name: InverseHadamard
        nameWithType: InverseHadamard
        qualifiedName: QRG.QuantumForge.Runtime.InverseHadamard
    isDefinition: true
    commentId: T:QRG.QuantumForge.Runtime.InverseHadamard
  QRG.QuantumForge.Runtime.ISwap.Predicates*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.ISwap.Predicates*
        name: Predicates
        nameWithType: ISwap.Predicates
        qualifiedName: QRG.QuantumForge.Runtime.ISwap.Predicates
      VB:
      - id: QRG.QuantumForge.Runtime.ISwap.Predicates*
        name: Predicates
        nameWithType: ISwap.Predicates
        qualifiedName: QRG.QuantumForge.Runtime.ISwap.Predicates
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.ISwap.Predicates
  QRG.QuantumForge.Runtime.ISwap.TargetProperties*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.ISwap.TargetProperties*
        name: TargetProperties
        nameWithType: ISwap.TargetProperties
        qualifiedName: QRG.QuantumForge.Runtime.ISwap.TargetProperties
      VB:
      - id: QRG.QuantumForge.Runtime.ISwap.TargetProperties*
        name: TargetProperties
        nameWithType: ISwap.TargetProperties
        qualifiedName: QRG.QuantumForge.Runtime.ISwap.TargetProperties
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.ISwap.TargetProperties
  QRG.QuantumForge.Runtime.ISwap.apply*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.ISwap.apply*
        name: apply
        nameWithType: ISwap.apply
        qualifiedName: QRG.QuantumForge.Runtime.ISwap.apply
      VB:
      - id: QRG.QuantumForge.Runtime.ISwap.apply*
        name: apply
        nameWithType: ISwap.apply
        qualifiedName: QRG.QuantumForge.Runtime.ISwap.apply
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.ISwap.apply
  QRG.QuantumForge.Runtime.ISwap:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.ISwap
        name: ISwap
        nameWithType: ISwap
        qualifiedName: QRG.QuantumForge.Runtime.ISwap
      VB:
      - id: QRG.QuantumForge.Runtime.ISwap
        name: ISwap
        nameWithType: ISwap
        qualifiedName: QRG.QuantumForge.Runtime.ISwap
    isDefinition: true
    commentId: T:QRG.QuantumForge.Runtime.ISwap
  QRG.QuantumForge.Runtime.MeasurePredicateEvent:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.MeasurePredicateEvent
        name: MeasurePredicateEvent
        nameWithType: MeasurePredicateEvent
        qualifiedName: QRG.QuantumForge.Runtime.MeasurePredicateEvent
      VB:
      - id: QRG.QuantumForge.Runtime.MeasurePredicateEvent
        name: MeasurePredicateEvent
        nameWithType: MeasurePredicateEvent
        qualifiedName: QRG.QuantumForge.Runtime.MeasurePredicateEvent
    isDefinition: true
    parent: QRG.QuantumForge.Runtime
    commentId: T:QRG.QuantumForge.Runtime.MeasurePredicateEvent
  UnityEvent:
    name:
      CSharp:
      - id: UnityEvent
        name: UnityEvent
        nameWithType: UnityEvent
        qualifiedName: UnityEvent
        isExternal: true
      VB:
      - id: UnityEvent
        name: UnityEvent
        nameWithType: UnityEvent
        qualifiedName: UnityEvent
        isExternal: true
    isDefinition: true
  QRG.QuantumForge.Runtime.MeasurePredicates.Predicates*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.MeasurePredicates.Predicates*
        name: Predicates
        nameWithType: MeasurePredicates.Predicates
        qualifiedName: QRG.QuantumForge.Runtime.MeasurePredicates.Predicates
      VB:
      - id: QRG.QuantumForge.Runtime.MeasurePredicates.Predicates*
        name: Predicates
        nameWithType: MeasurePredicates.Predicates
        qualifiedName: QRG.QuantumForge.Runtime.MeasurePredicates.Predicates
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.MeasurePredicates.Predicates
  QRG.QuantumForge.Runtime.MeasurePredicates.TargetProperties*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.MeasurePredicates.TargetProperties*
        name: TargetProperties
        nameWithType: MeasurePredicates.TargetProperties
        qualifiedName: QRG.QuantumForge.Runtime.MeasurePredicates.TargetProperties
      VB:
      - id: QRG.QuantumForge.Runtime.MeasurePredicates.TargetProperties*
        name: TargetProperties
        nameWithType: MeasurePredicates.TargetProperties
        qualifiedName: QRG.QuantumForge.Runtime.MeasurePredicates.TargetProperties
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.MeasurePredicates.TargetProperties
  QRG.QuantumForge.Runtime.MeasurePredicates.LastResult*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.MeasurePredicates.LastResult*
        name: LastResult
        nameWithType: MeasurePredicates.LastResult
        qualifiedName: QRG.QuantumForge.Runtime.MeasurePredicates.LastResult
      VB:
      - id: QRG.QuantumForge.Runtime.MeasurePredicates.LastResult*
        name: LastResult
        nameWithType: MeasurePredicates.LastResult
        qualifiedName: QRG.QuantumForge.Runtime.MeasurePredicates.LastResult
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.MeasurePredicates.LastResult
  QRG.QuantumForge.Runtime.MeasurePredicates.apply*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.MeasurePredicates.apply*
        name: apply
        nameWithType: MeasurePredicates.apply
        qualifiedName: QRG.QuantumForge.Runtime.MeasurePredicates.apply
      VB:
      - id: QRG.QuantumForge.Runtime.MeasurePredicates.apply*
        name: apply
        nameWithType: MeasurePredicates.apply
        qualifiedName: QRG.QuantumForge.Runtime.MeasurePredicates.apply
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.MeasurePredicates.apply
  QRG.QuantumForge.Runtime.MeasurePredicates:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.MeasurePredicates
        name: MeasurePredicates
        nameWithType: MeasurePredicates
        qualifiedName: QRG.QuantumForge.Runtime.MeasurePredicates
      VB:
      - id: QRG.QuantumForge.Runtime.MeasurePredicates
        name: MeasurePredicates
        nameWithType: MeasurePredicates
        qualifiedName: QRG.QuantumForge.Runtime.MeasurePredicates
    isDefinition: true
    commentId: T:QRG.QuantumForge.Runtime.MeasurePredicates
  QRG.QuantumForge.Runtime.MeasureProperties.Predicates*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.MeasureProperties.Predicates*
        name: Predicates
        nameWithType: MeasureProperties.Predicates
        qualifiedName: QRG.QuantumForge.Runtime.MeasureProperties.Predicates
      VB:
      - id: QRG.QuantumForge.Runtime.MeasureProperties.Predicates*
        name: Predicates
        nameWithType: MeasureProperties.Predicates
        qualifiedName: QRG.QuantumForge.Runtime.MeasureProperties.Predicates
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.MeasureProperties.Predicates
  QRG.QuantumForge.Runtime.MeasureProperties.TargetProperties*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.MeasureProperties.TargetProperties*
        name: TargetProperties
        nameWithType: MeasureProperties.TargetProperties
        qualifiedName: QRG.QuantumForge.Runtime.MeasureProperties.TargetProperties
      VB:
      - id: QRG.QuantumForge.Runtime.MeasureProperties.TargetProperties*
        name: TargetProperties
        nameWithType: MeasureProperties.TargetProperties
        qualifiedName: QRG.QuantumForge.Runtime.MeasureProperties.TargetProperties
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.MeasureProperties.TargetProperties
  QRG.QuantumForge.Runtime.MeasureProperties.LastResult*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.MeasureProperties.LastResult*
        name: LastResult
        nameWithType: MeasureProperties.LastResult
        qualifiedName: QRG.QuantumForge.Runtime.MeasureProperties.LastResult
      VB:
      - id: QRG.QuantumForge.Runtime.MeasureProperties.LastResult*
        name: LastResult
        nameWithType: MeasureProperties.LastResult
        qualifiedName: QRG.QuantumForge.Runtime.MeasureProperties.LastResult
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.MeasureProperties.LastResult
  QRG.QuantumForge.Runtime.MeasureProperties.apply*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.MeasureProperties.apply*
        name: apply
        nameWithType: MeasureProperties.apply
        qualifiedName: QRG.QuantumForge.Runtime.MeasureProperties.apply
      VB:
      - id: QRG.QuantumForge.Runtime.MeasureProperties.apply*
        name: apply
        nameWithType: MeasureProperties.apply
        qualifiedName: QRG.QuantumForge.Runtime.MeasureProperties.apply
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.MeasureProperties.apply
  QRG.QuantumForge.Runtime.MeasureProperties:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.MeasureProperties
        name: MeasureProperties
        nameWithType: MeasureProperties
        qualifiedName: QRG.QuantumForge.Runtime.MeasureProperties
      VB:
      - id: QRG.QuantumForge.Runtime.MeasureProperties
        name: MeasureProperties
        nameWithType: MeasureProperties
        qualifiedName: QRG.QuantumForge.Runtime.MeasureProperties
    isDefinition: true
    commentId: T:QRG.QuantumForge.Runtime.MeasureProperties
  QRG.QuantumForge.Runtime.NCycle.Predicates*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.NCycle.Predicates*
        name: Predicates
        nameWithType: NCycle.Predicates
        qualifiedName: QRG.QuantumForge.Runtime.NCycle.Predicates
      VB:
      - id: QRG.QuantumForge.Runtime.NCycle.Predicates*
        name: Predicates
        nameWithType: NCycle.Predicates
        qualifiedName: QRG.QuantumForge.Runtime.NCycle.Predicates
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.NCycle.Predicates
  QRG.QuantumForge.Runtime.NCycle.TargetProperties*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.NCycle.TargetProperties*
        name: TargetProperties
        nameWithType: NCycle.TargetProperties
        qualifiedName: QRG.QuantumForge.Runtime.NCycle.TargetProperties
      VB:
      - id: QRG.QuantumForge.Runtime.NCycle.TargetProperties*
        name: TargetProperties
        nameWithType: NCycle.TargetProperties
        qualifiedName: QRG.QuantumForge.Runtime.NCycle.TargetProperties
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.NCycle.TargetProperties
  QRG.QuantumForge.Runtime.NCycle.apply*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.NCycle.apply*
        name: apply
        nameWithType: NCycle.apply
        qualifiedName: QRG.QuantumForge.Runtime.NCycle.apply
      VB:
      - id: QRG.QuantumForge.Runtime.NCycle.apply*
        name: apply
        nameWithType: NCycle.apply
        qualifiedName: QRG.QuantumForge.Runtime.NCycle.apply
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.NCycle.apply
  QRG.QuantumForge.Runtime.NCycle:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.NCycle
        name: NCycle
        nameWithType: NCycle
        qualifiedName: QRG.QuantumForge.Runtime.NCycle
      VB:
      - id: QRG.QuantumForge.Runtime.NCycle
        name: NCycle
        nameWithType: NCycle
        qualifiedName: QRG.QuantumForge.Runtime.NCycle
    isDefinition: true
    commentId: T:QRG.QuantumForge.Runtime.NCycle
  QRG.QuantumForge.Runtime.PhaseRotate.Predicates*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.PhaseRotate.Predicates*
        name: Predicates
        nameWithType: PhaseRotate.Predicates
        qualifiedName: QRG.QuantumForge.Runtime.PhaseRotate.Predicates
      VB:
      - id: QRG.QuantumForge.Runtime.PhaseRotate.Predicates*
        name: Predicates
        nameWithType: PhaseRotate.Predicates
        qualifiedName: QRG.QuantumForge.Runtime.PhaseRotate.Predicates
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.PhaseRotate.Predicates
  QRG.QuantumForge.Runtime.PhaseRotate.TargetProperties*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.PhaseRotate.TargetProperties*
        name: TargetProperties
        nameWithType: PhaseRotate.TargetProperties
        qualifiedName: QRG.QuantumForge.Runtime.PhaseRotate.TargetProperties
      VB:
      - id: QRG.QuantumForge.Runtime.PhaseRotate.TargetProperties*
        name: TargetProperties
        nameWithType: PhaseRotate.TargetProperties
        qualifiedName: QRG.QuantumForge.Runtime.PhaseRotate.TargetProperties
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.PhaseRotate.TargetProperties
  QRG.QuantumForge.Runtime.PhaseRotate.Radians*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.PhaseRotate.Radians*
        name: Radians
        nameWithType: PhaseRotate.Radians
        qualifiedName: QRG.QuantumForge.Runtime.PhaseRotate.Radians
      VB:
      - id: QRG.QuantumForge.Runtime.PhaseRotate.Radians*
        name: Radians
        nameWithType: PhaseRotate.Radians
        qualifiedName: QRG.QuantumForge.Runtime.PhaseRotate.Radians
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.PhaseRotate.Radians
  QRG.QuantumForge.Runtime.PhaseRotate.apply*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.PhaseRotate.apply*
        name: apply
        nameWithType: PhaseRotate.apply
        qualifiedName: QRG.QuantumForge.Runtime.PhaseRotate.apply
      VB:
      - id: QRG.QuantumForge.Runtime.PhaseRotate.apply*
        name: apply
        nameWithType: PhaseRotate.apply
        qualifiedName: QRG.QuantumForge.Runtime.PhaseRotate.apply
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.PhaseRotate.apply
  QRG.QuantumForge.Runtime.PhaseRotate:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.PhaseRotate
        name: PhaseRotate
        nameWithType: PhaseRotate
        qualifiedName: QRG.QuantumForge.Runtime.PhaseRotate
      VB:
      - id: QRG.QuantumForge.Runtime.PhaseRotate
        name: PhaseRotate
        nameWithType: PhaseRotate
        qualifiedName: QRG.QuantumForge.Runtime.PhaseRotate
    isDefinition: true
    commentId: T:QRG.QuantumForge.Runtime.PhaseRotate
  QRG.QuantumForge.Runtime.IQuantumAction.Predicates*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.IQuantumAction.Predicates*
        name: Predicates
        nameWithType: IQuantumAction.Predicates
        qualifiedName: QRG.QuantumForge.Runtime.IQuantumAction.Predicates
      VB:
      - id: QRG.QuantumForge.Runtime.IQuantumAction.Predicates*
        name: Predicates
        nameWithType: IQuantumAction.Predicates
        qualifiedName: QRG.QuantumForge.Runtime.IQuantumAction.Predicates
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.IQuantumAction.Predicates
  QRG.QuantumForge.Runtime.IQuantumAction.TargetProperties*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.IQuantumAction.TargetProperties*
        name: TargetProperties
        nameWithType: IQuantumAction.TargetProperties
        qualifiedName: QRG.QuantumForge.Runtime.IQuantumAction.TargetProperties
      VB:
      - id: QRG.QuantumForge.Runtime.IQuantumAction.TargetProperties*
        name: TargetProperties
        nameWithType: IQuantumAction.TargetProperties
        qualifiedName: QRG.QuantumForge.Runtime.IQuantumAction.TargetProperties
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.IQuantumAction.TargetProperties
  QRG.QuantumForge.Runtime.IQuantumAction.apply*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.IQuantumAction.apply*
        name: apply
        nameWithType: IQuantumAction.apply
        qualifiedName: QRG.QuantumForge.Runtime.IQuantumAction.apply
      VB:
      - id: QRG.QuantumForge.Runtime.IQuantumAction.apply*
        name: apply
        nameWithType: IQuantumAction.apply
        qualifiedName: QRG.QuantumForge.Runtime.IQuantumAction.apply
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.IQuantumAction.apply
  QRG.QuantumForge.Runtime.Shift.Predicates*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.Shift.Predicates*
        name: Predicates
        nameWithType: Shift.Predicates
        qualifiedName: QRG.QuantumForge.Runtime.Shift.Predicates
      VB:
      - id: QRG.QuantumForge.Runtime.Shift.Predicates*
        name: Predicates
        nameWithType: Shift.Predicates
        qualifiedName: QRG.QuantumForge.Runtime.Shift.Predicates
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.Shift.Predicates
  QRG.QuantumForge.Runtime.Shift.TargetProperties*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.Shift.TargetProperties*
        name: TargetProperties
        nameWithType: Shift.TargetProperties
        qualifiedName: QRG.QuantumForge.Runtime.Shift.TargetProperties
      VB:
      - id: QRG.QuantumForge.Runtime.Shift.TargetProperties*
        name: TargetProperties
        nameWithType: Shift.TargetProperties
        qualifiedName: QRG.QuantumForge.Runtime.Shift.TargetProperties
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.Shift.TargetProperties
  QRG.QuantumForge.Runtime.Shift.apply*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.Shift.apply*
        name: apply
        nameWithType: Shift.apply
        qualifiedName: QRG.QuantumForge.Runtime.Shift.apply
      VB:
      - id: QRG.QuantumForge.Runtime.Shift.apply*
        name: apply
        nameWithType: Shift.apply
        qualifiedName: QRG.QuantumForge.Runtime.Shift.apply
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.Shift.apply
  QRG.QuantumForge.Runtime.Shift:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.Shift
        name: Shift
        nameWithType: Shift
        qualifiedName: QRG.QuantumForge.Runtime.Shift
      VB:
      - id: QRG.QuantumForge.Runtime.Shift
        name: Shift
        nameWithType: Shift
        qualifiedName: QRG.QuantumForge.Runtime.Shift
    isDefinition: true
    commentId: T:QRG.QuantumForge.Runtime.Shift
  QRG.QuantumForge.Runtime.Swap.Predicates*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.Swap.Predicates*
        name: Predicates
        nameWithType: Swap.Predicates
        qualifiedName: QRG.QuantumForge.Runtime.Swap.Predicates
      VB:
      - id: QRG.QuantumForge.Runtime.Swap.Predicates*
        name: Predicates
        nameWithType: Swap.Predicates
        qualifiedName: QRG.QuantumForge.Runtime.Swap.Predicates
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.Swap.Predicates
  QRG.QuantumForge.Runtime.Swap.TargetProperties*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.Swap.TargetProperties*
        name: TargetProperties
        nameWithType: Swap.TargetProperties
        qualifiedName: QRG.QuantumForge.Runtime.Swap.TargetProperties
      VB:
      - id: QRG.QuantumForge.Runtime.Swap.TargetProperties*
        name: TargetProperties
        nameWithType: Swap.TargetProperties
        qualifiedName: QRG.QuantumForge.Runtime.Swap.TargetProperties
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.Swap.TargetProperties
  QRG.QuantumForge.Runtime.Swap.apply*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.Swap.apply*
        name: apply
        nameWithType: Swap.apply
        qualifiedName: QRG.QuantumForge.Runtime.Swap.apply
      VB:
      - id: QRG.QuantumForge.Runtime.Swap.apply*
        name: apply
        nameWithType: Swap.apply
        qualifiedName: QRG.QuantumForge.Runtime.Swap.apply
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.Swap.apply
  QRG.QuantumForge.Runtime.Swap:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.Swap
        name: Swap
        nameWithType: Swap
        qualifiedName: QRG.QuantumForge.Runtime.Swap
      VB:
      - id: QRG.QuantumForge.Runtime.Swap
        name: Swap
        nameWithType: Swap
        qualifiedName: QRG.QuantumForge.Runtime.Swap
    isDefinition: true
    commentId: T:QRG.QuantumForge.Runtime.Swap
  QRG.QuantumForge.Runtime.TriggerActionOnQuantumProperty:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.TriggerActionOnQuantumProperty
        name: TriggerActionOnQuantumProperty
        nameWithType: TriggerActionOnQuantumProperty
        qualifiedName: QRG.QuantumForge.Runtime.TriggerActionOnQuantumProperty
      VB:
      - id: QRG.QuantumForge.Runtime.TriggerActionOnQuantumProperty
        name: TriggerActionOnQuantumProperty
        nameWithType: TriggerActionOnQuantumProperty
        qualifiedName: QRG.QuantumForge.Runtime.TriggerActionOnQuantumProperty
    isDefinition: true
    commentId: T:QRG.QuantumForge.Runtime.TriggerActionOnQuantumProperty
  QRG.QuantumForge.Runtime.CorrelationTracker.UpdateCorrelationMatrix*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.CorrelationTracker.UpdateCorrelationMatrix*
        name: UpdateCorrelationMatrix
        nameWithType: CorrelationTracker.UpdateCorrelationMatrix
        qualifiedName: QRG.QuantumForge.Runtime.CorrelationTracker.UpdateCorrelationMatrix
      VB:
      - id: QRG.QuantumForge.Runtime.CorrelationTracker.UpdateCorrelationMatrix*
        name: UpdateCorrelationMatrix
        nameWithType: CorrelationTracker.UpdateCorrelationMatrix
        qualifiedName: QRG.QuantumForge.Runtime.CorrelationTracker.UpdateCorrelationMatrix
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.CorrelationTracker.UpdateCorrelationMatrix
  QRG.QuantumForge.Runtime.CorrelationTracker:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.CorrelationTracker
        name: CorrelationTracker
        nameWithType: CorrelationTracker
        qualifiedName: QRG.QuantumForge.Runtime.CorrelationTracker
      VB:
      - id: QRG.QuantumForge.Runtime.CorrelationTracker
        name: CorrelationTracker
        nameWithType: CorrelationTracker
        qualifiedName: QRG.QuantumForge.Runtime.CorrelationTracker
    isDefinition: true
    commentId: T:QRG.QuantumForge.Runtime.CorrelationTracker
  QRG.QuantumForge.Runtime.EntanglementTracker.LastUpdatedMutualInformation*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.EntanglementTracker.LastUpdatedMutualInformation*
        name: LastUpdatedMutualInformation
        nameWithType: EntanglementTracker.LastUpdatedMutualInformation
        qualifiedName: QRG.QuantumForge.Runtime.EntanglementTracker.LastUpdatedMutualInformation
      VB:
      - id: QRG.QuantumForge.Runtime.EntanglementTracker.LastUpdatedMutualInformation*
        name: LastUpdatedMutualInformation
        nameWithType: EntanglementTracker.LastUpdatedMutualInformation
        qualifiedName: QRG.QuantumForge.Runtime.EntanglementTracker.LastUpdatedMutualInformation
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.EntanglementTracker.LastUpdatedMutualInformation
  QRG.QuantumForge.Runtime.EntanglementTracker.UpdateMutualInformation*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.EntanglementTracker.UpdateMutualInformation*
        name: UpdateMutualInformation
        nameWithType: EntanglementTracker.UpdateMutualInformation
        qualifiedName: QRG.QuantumForge.Runtime.EntanglementTracker.UpdateMutualInformation
      VB:
      - id: QRG.QuantumForge.Runtime.EntanglementTracker.UpdateMutualInformation*
        name: UpdateMutualInformation
        nameWithType: EntanglementTracker.UpdateMutualInformation
        qualifiedName: QRG.QuantumForge.Runtime.EntanglementTracker.UpdateMutualInformation
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.EntanglementTracker.UpdateMutualInformation
  QRG.QuantumForge.Runtime.EntanglementTracker:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.EntanglementTracker
        name: EntanglementTracker
        nameWithType: EntanglementTracker
        qualifiedName: QRG.QuantumForge.Runtime.EntanglementTracker
      VB:
      - id: QRG.QuantumForge.Runtime.EntanglementTracker
        name: EntanglementTracker
        nameWithType: EntanglementTracker
        qualifiedName: QRG.QuantumForge.Runtime.EntanglementTracker
    isDefinition: true
    commentId: T:QRG.QuantumForge.Runtime.EntanglementTracker
  QRG.QuantumForge.Runtime.PhaseTracker.PhaseMatrix*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.PhaseTracker.PhaseMatrix*
        name: PhaseMatrix
        nameWithType: PhaseTracker.PhaseMatrix
        qualifiedName: QRG.QuantumForge.Runtime.PhaseTracker.PhaseMatrix
      VB:
      - id: QRG.QuantumForge.Runtime.PhaseTracker.PhaseMatrix*
        name: PhaseMatrix
        nameWithType: PhaseTracker.PhaseMatrix
        qualifiedName: QRG.QuantumForge.Runtime.PhaseTracker.PhaseMatrix
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.PhaseTracker.PhaseMatrix
  QRG.QuantumForge.Runtime.PhaseTracker.UpdatePhaseMatrix*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.PhaseTracker.UpdatePhaseMatrix*
        name: UpdatePhaseMatrix
        nameWithType: PhaseTracker.UpdatePhaseMatrix
        qualifiedName: QRG.QuantumForge.Runtime.PhaseTracker.UpdatePhaseMatrix
      VB:
      - id: QRG.QuantumForge.Runtime.PhaseTracker.UpdatePhaseMatrix*
        name: UpdatePhaseMatrix
        nameWithType: PhaseTracker.UpdatePhaseMatrix
        qualifiedName: QRG.QuantumForge.Runtime.PhaseTracker.UpdatePhaseMatrix
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.PhaseTracker.UpdatePhaseMatrix
  QRG.QuantumForge.Runtime.PhaseTracker:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.PhaseTracker
        name: PhaseTracker
        nameWithType: PhaseTracker
        qualifiedName: QRG.QuantumForge.Runtime.PhaseTracker
      VB:
      - id: QRG.QuantumForge.Runtime.PhaseTracker
        name: PhaseTracker
        nameWithType: PhaseTracker
        qualifiedName: QRG.QuantumForge.Runtime.PhaseTracker
    isDefinition: true
    commentId: T:QRG.QuantumForge.Runtime.PhaseTracker
  QRG.QuantumForge.Runtime.ProbabilityTracker.Probabilities*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.ProbabilityTracker.Probabilities*
        name: Probabilities
        nameWithType: ProbabilityTracker.Probabilities
        qualifiedName: QRG.QuantumForge.Runtime.ProbabilityTracker.Probabilities
      VB:
      - id: QRG.QuantumForge.Runtime.ProbabilityTracker.Probabilities*
        name: Probabilities
        nameWithType: ProbabilityTracker.Probabilities
        qualifiedName: QRG.QuantumForge.Runtime.ProbabilityTracker.Probabilities
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.ProbabilityTracker.Probabilities
  QRG.QuantumForge.Runtime.ProbabilityTracker.GetBasisProbabilities*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.ProbabilityTracker.GetBasisProbabilities*
        name: GetBasisProbabilities
        nameWithType: ProbabilityTracker.GetBasisProbabilities
        qualifiedName: QRG.QuantumForge.Runtime.ProbabilityTracker.GetBasisProbabilities
      VB:
      - id: QRG.QuantumForge.Runtime.ProbabilityTracker.GetBasisProbabilities*
        name: GetBasisProbabilities
        nameWithType: ProbabilityTracker.GetBasisProbabilities
        qualifiedName: QRG.QuantumForge.Runtime.ProbabilityTracker.GetBasisProbabilities
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.ProbabilityTracker.GetBasisProbabilities
  QRG.QuantumForge.Runtime.ProbabilityTracker:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.ProbabilityTracker
        name: ProbabilityTracker
        nameWithType: ProbabilityTracker
        qualifiedName: QRG.QuantumForge.Runtime.ProbabilityTracker
      VB:
      - id: QRG.QuantumForge.Runtime.ProbabilityTracker
        name: ProbabilityTracker
        nameWithType: ProbabilityTracker
        qualifiedName: QRG.QuantumForge.Runtime.ProbabilityTracker
    isDefinition: true
    commentId: T:QRG.QuantumForge.Runtime.ProbabilityTracker
  QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker.ReducedDensityMatrix*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker.ReducedDensityMatrix*
        name: ReducedDensityMatrix
        nameWithType: ReducedDensityMatrixTracker.ReducedDensityMatrix
        qualifiedName: QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker.ReducedDensityMatrix
      VB:
      - id: QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker.ReducedDensityMatrix*
        name: ReducedDensityMatrix
        nameWithType: ReducedDensityMatrixTracker.ReducedDensityMatrix
        qualifiedName: QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker.ReducedDensityMatrix
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker.ReducedDensityMatrix
  QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker.GetReducedDensityMatrix*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker.GetReducedDensityMatrix*
        name: GetReducedDensityMatrix
        nameWithType: ReducedDensityMatrixTracker.GetReducedDensityMatrix
        qualifiedName: QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker.GetReducedDensityMatrix
      VB:
      - id: QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker.GetReducedDensityMatrix*
        name: GetReducedDensityMatrix
        nameWithType: ReducedDensityMatrixTracker.GetReducedDensityMatrix
        qualifiedName: QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker.GetReducedDensityMatrix
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker.GetReducedDensityMatrix
  QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker:
    name:
      CSharp:
      - id: QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker
        name: ReducedDensityMatrixTracker
        nameWithType: ReducedDensityMatrixTracker
        qualifiedName: QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker
      VB:
      - id: QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker
        name: ReducedDensityMatrixTracker
        nameWithType: ReducedDensityMatrixTracker
        qualifiedName: QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker
    isDefinition: true
    commentId: T:QRG.QuantumForge.Runtime.ReducedDensityMatrixTracker
  QRG.QuantumForge.Core:
    name:
      CSharp:
      - name: QRG.QuantumForge.Core
        nameWithType: QRG.QuantumForge.Core
        qualifiedName: QRG.QuantumForge.Core
      VB:
      - name: QRG.QuantumForge.Core
        nameWithType: QRG.QuantumForge.Core
        qualifiedName: QRG.QuantumForge.Core
    isDefinition: true
    commentId: N:QRG.QuantumForge.Core
  QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty:
    name:
      CSharp:
      - id: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
        name: QuantumForge.NativeQuantumProperty
        nameWithType: QuantumForge.NativeQuantumProperty
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
      VB:
      - id: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
        name: QuantumForge.NativeQuantumProperty
        nameWithType: QuantumForge.NativeQuantumProperty
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
    isDefinition: true
    parent: QRG.QuantumForge.Core
    commentId: T:QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
  QRG.QuantumForge.Core.QuantumForge.Predicate[]:
    name:
      CSharp:
      - id: QRG.QuantumForge.Core.QuantumForge.Predicate
        name: QuantumForge.Predicate
        nameWithType: QuantumForge.Predicate
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.Predicate
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: QRG.QuantumForge.Core.QuantumForge.Predicate
        name: QuantumForge.Predicate
        nameWithType: QuantumForge.Predicate
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.Predicate
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  QRG.QuantumForge.Core.QuantumForge.Cycle*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Core.QuantumForge.Cycle*
        name: Cycle
        nameWithType: QuantumForge.Cycle
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.Cycle
      VB:
      - id: QRG.QuantumForge.Core.QuantumForge.Cycle*
        name: Cycle
        nameWithType: QuantumForge.Cycle
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.Cycle
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Core.QuantumForge.Cycle
  QRG.QuantumForge.Core.QuantumForge.NCycle*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Core.QuantumForge.NCycle*
        name: NCycle
        nameWithType: QuantumForge.NCycle
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.NCycle
      VB:
      - id: QRG.QuantumForge.Core.QuantumForge.NCycle*
        name: NCycle
        nameWithType: QuantumForge.NCycle
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.NCycle
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Core.QuantumForge.NCycle
  QRG.QuantumForge.Core.QuantumForge.Shift*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Core.QuantumForge.Shift*
        name: Shift
        nameWithType: QuantumForge.Shift
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.Shift
      VB:
      - id: QRG.QuantumForge.Core.QuantumForge.Shift*
        name: Shift
        nameWithType: QuantumForge.Shift
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.Shift
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Core.QuantumForge.Shift
  QRG.QuantumForge.Core.QuantumForge.NShift*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Core.QuantumForge.NShift*
        name: NShift
        nameWithType: QuantumForge.NShift
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.NShift
      VB:
      - id: QRG.QuantumForge.Core.QuantumForge.NShift*
        name: NShift
        nameWithType: QuantumForge.NShift
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.NShift
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Core.QuantumForge.NShift
  QRG.QuantumForge.Core.QuantumForge.Clock*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Core.QuantumForge.Clock*
        name: Clock
        nameWithType: QuantumForge.Clock
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.Clock
      VB:
      - id: QRG.QuantumForge.Core.QuantumForge.Clock*
        name: Clock
        nameWithType: QuantumForge.Clock
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.Clock
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Core.QuantumForge.Clock
  QRG.QuantumForge.Core.QuantumForge.Hadamard*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Core.QuantumForge.Hadamard*
        name: Hadamard
        nameWithType: QuantumForge.Hadamard
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.Hadamard
      VB:
      - id: QRG.QuantumForge.Core.QuantumForge.Hadamard*
        name: Hadamard
        nameWithType: QuantumForge.Hadamard
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.Hadamard
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Core.QuantumForge.Hadamard
  QRG.QuantumForge.Core.QuantumForge.InverseHadamard*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Core.QuantumForge.InverseHadamard*
        name: InverseHadamard
        nameWithType: QuantumForge.InverseHadamard
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.InverseHadamard
      VB:
      - id: QRG.QuantumForge.Core.QuantumForge.InverseHadamard*
        name: InverseHadamard
        nameWithType: QuantumForge.InverseHadamard
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.InverseHadamard
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Core.QuantumForge.InverseHadamard
  QRG.QuantumForge.Core.QuantumForge.PhaseRotate*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Core.QuantumForge.PhaseRotate*
        name: PhaseRotate
        nameWithType: QuantumForge.PhaseRotate
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.PhaseRotate
      VB:
      - id: QRG.QuantumForge.Core.QuantumForge.PhaseRotate*
        name: PhaseRotate
        nameWithType: QuantumForge.PhaseRotate
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.PhaseRotate
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Core.QuantumForge.PhaseRotate
  QRG.QuantumForge.Core.QuantumForge.Swap*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Core.QuantumForge.Swap*
        name: Swap
        nameWithType: QuantumForge.Swap
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.Swap
      VB:
      - id: QRG.QuantumForge.Core.QuantumForge.Swap*
        name: Swap
        nameWithType: QuantumForge.Swap
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.Swap
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Core.QuantumForge.Swap
  QRG.QuantumForge.Core.QuantumForge.ISwap*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Core.QuantumForge.ISwap*
        name: ISwap
        nameWithType: QuantumForge.ISwap
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.ISwap
      VB:
      - id: QRG.QuantumForge.Core.QuantumForge.ISwap*
        name: ISwap
        nameWithType: QuantumForge.ISwap
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.ISwap
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Core.QuantumForge.ISwap
  QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty[]:
    name:
      CSharp:
      - id: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
        name: QuantumForge.NativeQuantumProperty
        nameWithType: QuantumForge.NativeQuantumProperty
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
        name: QuantumForge.NativeQuantumProperty
        nameWithType: QuantumForge.NativeQuantumProperty
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  QRG.QuantumForge.Core.QuantumForge.Measure*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Core.QuantumForge.Measure*
        name: Measure
        nameWithType: QuantumForge.Measure
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.Measure
      VB:
      - id: QRG.QuantumForge.Core.QuantumForge.Measure*
        name: Measure
        nameWithType: QuantumForge.Measure
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.Measure
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Core.QuantumForge.Measure
  QRG.QuantumForge.Core.QuantumForge.BasisProbability[]:
    name:
      CSharp:
      - id: QRG.QuantumForge.Core.QuantumForge.BasisProbability
        name: QuantumForge.BasisProbability
        nameWithType: QuantumForge.BasisProbability
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.BasisProbability
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: QRG.QuantumForge.Core.QuantumForge.BasisProbability
        name: QuantumForge.BasisProbability
        nameWithType: QuantumForge.BasisProbability
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.BasisProbability
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  QRG.QuantumForge.Core.QuantumForge.Probabilities*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Core.QuantumForge.Probabilities*
        name: Probabilities
        nameWithType: QuantumForge.Probabilities
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.Probabilities
      VB:
      - id: QRG.QuantumForge.Core.QuantumForge.Probabilities*
        name: Probabilities
        nameWithType: QuantumForge.Probabilities
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.Probabilities
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Core.QuantumForge.Probabilities
  QRG.QuantumForge.Core.QuantumForge.ReducedDensityMatrix*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Core.QuantumForge.ReducedDensityMatrix*
        name: ReducedDensityMatrix
        nameWithType: QuantumForge.ReducedDensityMatrix
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.ReducedDensityMatrix
      VB:
      - id: QRG.QuantumForge.Core.QuantumForge.ReducedDensityMatrix*
        name: ReducedDensityMatrix
        nameWithType: QuantumForge.ReducedDensityMatrix
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.ReducedDensityMatrix
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Core.QuantumForge.ReducedDensityMatrix
  QRG.QuantumForge.Core.QuantumForge.MutualInformation*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Core.QuantumForge.MutualInformation*
        name: MutualInformation
        nameWithType: QuantumForge.MutualInformation
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.MutualInformation
      VB:
      - id: QRG.QuantumForge.Core.QuantumForge.MutualInformation*
        name: MutualInformation
        nameWithType: QuantumForge.MutualInformation
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.MutualInformation
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Core.QuantumForge.MutualInformation
  QRG.QuantumForge.Core.QuantumForge.CorrelationMatrix*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Core.QuantumForge.CorrelationMatrix*
        name: CorrelationMatrix
        nameWithType: QuantumForge.CorrelationMatrix
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.CorrelationMatrix
      VB:
      - id: QRG.QuantumForge.Core.QuantumForge.CorrelationMatrix*
        name: CorrelationMatrix
        nameWithType: QuantumForge.CorrelationMatrix
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.CorrelationMatrix
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Core.QuantumForge.CorrelationMatrix
  QRG.QuantumForge.Core.QuantumForge:
    name:
      CSharp:
      - id: QRG.QuantumForge.Core.QuantumForge
        name: QuantumForge
        nameWithType: QuantumForge
        qualifiedName: QRG.QuantumForge.Core.QuantumForge
      VB:
      - id: QRG.QuantumForge.Core.QuantumForge
        name: QuantumForge
        nameWithType: QuantumForge
        qualifiedName: QRG.QuantumForge.Core.QuantumForge
    isDefinition: true
    commentId: T:QRG.QuantumForge.Core.QuantumForge
  QRG.QuantumForge.Core.QuantumForge.QForgeError:
    name:
      CSharp:
      - id: QRG.QuantumForge.Core.QuantumForge.QForgeError
        name: QuantumForge.QForgeError
        nameWithType: QuantumForge.QForgeError
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.QForgeError
      VB:
      - id: QRG.QuantumForge.Core.QuantumForge.QForgeError
        name: QuantumForge.QForgeError
        nameWithType: QuantumForge.QForgeError
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.QForgeError
    isDefinition: true
    parent: QRG.QuantumForge.Core
    commentId: T:QRG.QuantumForge.Core.QuantumForge.QForgeError
  QRG.QuantumForge.Core.QuantumForge.BasisProbability:
    name:
      CSharp:
      - id: QRG.QuantumForge.Core.QuantumForge.BasisProbability
        name: QuantumForge.BasisProbability
        nameWithType: QuantumForge.BasisProbability
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.BasisProbability
      VB:
      - id: QRG.QuantumForge.Core.QuantumForge.BasisProbability
        name: QuantumForge.BasisProbability
        nameWithType: QuantumForge.BasisProbability
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.BasisProbability
    isDefinition: true
    commentId: T:QRG.QuantumForge.Core.QuantumForge.BasisProbability
  QRG.QuantumForge.Core.QuantumForge.Predicate.#ctor*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Core.QuantumForge.Predicate.#ctor*
        name: Predicate
        nameWithType: QuantumForge.Predicate.Predicate
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.Predicate.Predicate
      VB:
      - id: QRG.QuantumForge.Core.QuantumForge.Predicate.#ctor*
        name: Predicate
        nameWithType: QuantumForge.Predicate.Predicate
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.Predicate.Predicate
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Core.QuantumForge.Predicate.#ctor
  QRG.QuantumForge.Core.QuantumForge.Predicate:
    name:
      CSharp:
      - id: QRG.QuantumForge.Core.QuantumForge.Predicate
        name: QuantumForge.Predicate
        nameWithType: QuantumForge.Predicate
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.Predicate
      VB:
      - id: QRG.QuantumForge.Core.QuantumForge.Predicate
        name: QuantumForge.Predicate
        nameWithType: QuantumForge.Predicate
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.Predicate
    isDefinition: true
    parent: QRG.QuantumForge.Core
    commentId: T:QRG.QuantumForge.Core.QuantumForge.Predicate
  System.IDisposable:
    name:
      CSharp:
      - id: System.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: System.IDisposable
        isExternal: true
      VB:
      - id: System.IDisposable
        name: IDisposable
        nameWithType: IDisposable
        qualifiedName: System.IDisposable
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.IDisposable
  QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.#ctor*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.#ctor*
        name: NativeQuantumProperty
        nameWithType: QuantumForge.NativeQuantumProperty.NativeQuantumProperty
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.NativeQuantumProperty
      VB:
      - id: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.#ctor*
        name: NativeQuantumProperty
        nameWithType: QuantumForge.NativeQuantumProperty.NativeQuantumProperty
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.NativeQuantumProperty
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.#ctor
  QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.Dispose*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.Dispose*
        name: Dispose
        nameWithType: QuantumForge.NativeQuantumProperty.Dispose
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.Dispose
      VB:
      - id: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.Dispose*
        name: Dispose
        nameWithType: QuantumForge.NativeQuantumProperty.Dispose
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.Dispose
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.Dispose
  System.IDisposable.Dispose:
    name:
      CSharp:
      - id: System.IDisposable.Dispose
        name: Dispose
        nameWithType: IDisposable.Dispose
        qualifiedName: System.IDisposable.Dispose
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.IDisposable.Dispose
        name: Dispose
        nameWithType: IDisposable.Dispose
        qualifiedName: System.IDisposable.Dispose
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.IDisposable
    commentId: M:System.IDisposable.Dispose
  QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.is_value*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.is_value*
        name: is_value
        nameWithType: QuantumForge.NativeQuantumProperty.is_value
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.is_value
      VB:
      - id: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.is_value*
        name: is_value
        nameWithType: QuantumForge.NativeQuantumProperty.is_value
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.is_value
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.is_value
  QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.is_not_value*:
    name:
      CSharp:
      - id: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.is_not_value*
        name: is_not_value
        nameWithType: QuantumForge.NativeQuantumProperty.is_not_value
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.is_not_value
      VB:
      - id: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.is_not_value*
        name: is_not_value
        nameWithType: QuantumForge.NativeQuantumProperty.is_not_value
        qualifiedName: QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.is_not_value
    isDefinition: true
    commentId: Overload:QRG.QuantumForge.Core.QuantumForge.NativeQuantumProperty.is_not_value
  QRG.QuantumForge.Utility.ButtonPressOnKey:
    name:
      CSharp:
      - id: QRG.QuantumForge.Utility.ButtonPressOnKey
        name: ButtonPressOnKey
        nameWithType: ButtonPressOnKey
        qualifiedName: QRG.QuantumForge.Utility.ButtonPressOnKey
      VB:
      - id: QRG.QuantumForge.Utility.ButtonPressOnKey
        name: ButtonPressOnKey
        nameWithType: ButtonPressOnKey
        qualifiedName: QRG.QuantumForge.Utility.ButtonPressOnKey
    isDefinition: true
    commentId: T:QRG.QuantumForge.Utility.ButtonPressOnKey
  QRG.QuantumForge.Utility.RotateOnPhase:
    name:
      CSharp:
      - id: QRG.QuantumForge.Utility.RotateOnPhase
        name: RotateOnPhase
        nameWithType: RotateOnPhase
        qualifiedName: QRG.QuantumForge.Utility.RotateOnPhase
      VB:
      - id: QRG.QuantumForge.Utility.RotateOnPhase
        name: RotateOnPhase
        nameWithType: RotateOnPhase
        qualifiedName: QRG.QuantumForge.Utility.RotateOnPhase
    isDefinition: true
    commentId: T:QRG.QuantumForge.Utility.RotateOnPhase
  QRG.QuantumForge.Utility.ScaleProbability:
    name:
      CSharp:
      - id: QRG.QuantumForge.Utility.ScaleProbability
        name: ScaleProbability
        nameWithType: ScaleProbability
        qualifiedName: QRG.QuantumForge.Utility.ScaleProbability
      VB:
      - id: QRG.QuantumForge.Utility.ScaleProbability
        name: ScaleProbability
        nameWithType: ScaleProbability
        qualifiedName: QRG.QuantumForge.Utility.ScaleProbability
    isDefinition: true
    commentId: T:QRG.QuantumForge.Utility.ScaleProbability
  QRG.QuantumForge.Utility.Trigger:
    name:
      CSharp:
      - id: QRG.QuantumForge.Utility.Trigger
        name: Trigger
        nameWithType: Trigger
        qualifiedName: QRG.QuantumForge.Utility.Trigger
      VB:
      - id: QRG.QuantumForge.Utility.Trigger
        name: Trigger
        nameWithType: Trigger
        qualifiedName: QRG.QuantumForge.Utility.Trigger
    isDefinition: true
    commentId: T:QRG.QuantumForge.Utility.Trigger
  QRG.QuantumForge.Utility:
    name:
      CSharp:
      - name: QRG.QuantumForge.Utility
        nameWithType: QRG.QuantumForge.Utility
        qualifiedName: QRG.QuantumForge.Utility
      VB:
      - name: QRG.QuantumForge.Utility
        nameWithType: QRG.QuantumForge.Utility
        qualifiedName: QRG.QuantumForge.Utility
    isDefinition: true
    commentId: N:QRG.QuantumForge.Utility
